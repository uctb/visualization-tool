"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CodeBlock;

var _react = _interopRequireWildcard(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _prismReactRenderer = _interopRequireWildcard(require("prism-react-renderer"));

var _copyTextToClipboard = _interopRequireDefault(require("copy-text-to-clipboard"));

var _Translate = _interopRequireWildcard(require("@docusaurus/Translate"));

var _themeCommon = require("@docusaurus/theme-common");

var _usePrismTheme = _interopRequireDefault(require("@theme/hooks/usePrismTheme"));

var _stylesModule = _interopRequireDefault(require("./styles.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function CodeBlock({
  children,
  className: blockClassName,
  metastring,
  title
}) {
  var _parseLanguage;

  const {
    prism
  } = (0, _themeCommon.useThemeConfig)();
  const [showCopied, setShowCopied] = (0, _react.useState)(false);
  const [mounted, setMounted] = (0, _react.useState)(false); // The Prism theme on SSR is always the default theme but the site theme
  // can be in a different mode. React hydration doesn't update DOM styles
  // that come from SSR. Hence force a re-render after mounting to apply the
  // current relevant styles. There will be a flash seen of the original
  // styles seen using this current approach but that's probably ok. Fixing
  // the flash will require changing the theming approach and is not worth it
  // at this point.

  (0, _react.useEffect)(() => {
    setMounted(true);
  }, []); // TODO: the title is provided by MDX as props automatically
  // so we probably don't need to parse the metastring
  // (note: title="xyz" => title prop still has the quotes)

  const codeBlockTitle = (0, _themeCommon.parseCodeBlockTitle)(metastring) || title;
  const prismTheme = (0, _usePrismTheme.default)(); // In case interleaved Markdown (e.g. when using CodeBlock as standalone component).

  const content = Array.isArray(children) ? children.join('') : children;
  const language = (_parseLanguage = (0, _themeCommon.parseLanguage)(blockClassName)) !== null && _parseLanguage !== void 0 ? _parseLanguage : prism.defaultLanguage;
  const {
    highlightLines,
    code
  } = (0, _themeCommon.parseLines)(content, metastring, language);

  const handleCopyCode = () => {
    (0, _copyTextToClipboard.default)(code);
    setShowCopied(true);
    setTimeout(() => setShowCopied(false), 2000);
  };

  return <_prismReactRenderer.default {..._prismReactRenderer.defaultProps} key={String(mounted)} theme={prismTheme} code={code} language={language}>
      {({
      className,
      style,
      tokens,
      getLineProps,
      getTokenProps
    }) => <div className={(0, _clsx.default)(_stylesModule.default.codeBlockContainer, blockClassName)}>
          {codeBlockTitle && <div style={style} className={_stylesModule.default.codeBlockTitle}>
              {codeBlockTitle}
            </div>}
          <div className={(0, _clsx.default)(_stylesModule.default.codeBlockContent, language)}>
            <pre
        /* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */
        tabIndex={0} className={(0, _clsx.default)(className, _stylesModule.default.codeBlock, 'thin-scrollbar')} style={style}>
              <code className={_stylesModule.default.codeBlockLines}>
                {tokens.map((line, i) => {
              if (line.length === 1 && line[0].content === '\n') {
                line[0].content = '';
              }

              const lineProps = getLineProps({
                line,
                key: i
              });

              if (highlightLines.includes(i)) {
                lineProps.className += ' docusaurus-highlight-code-line';
              }

              return <span key={i} {...lineProps}>
                      {line.map((token, key) => <span key={key} {...getTokenProps({
                  token,
                  key
                })} />)}
                      <br />
                    </span>;
            })}
              </code>
            </pre>

            <button type="button" aria-label={(0, _Translate.translate)({
          id: 'theme.CodeBlock.copyButtonAriaLabel',
          message: 'Copy code to clipboard',
          description: 'The ARIA label for copy code blocks button'
        })} className={(0, _clsx.default)(_stylesModule.default.copyButton, 'clean-btn')} onClick={handleCopyCode}>
              {showCopied ? <_Translate.default id="theme.CodeBlock.copied" description="The copied button label on code blocks">
                  Copied
                </_Translate.default> : <_Translate.default id="theme.CodeBlock.copy" description="The copy button label on code blocks">
                  Copy
                </_Translate.default>}
            </button>
          </div>
        </div>}
    </_prismReactRenderer.default>;
}