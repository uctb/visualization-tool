/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import { ENGINE } from '../engine';
import { RaggedGather } from '../kernel_names';
import { convertToTensor } from '../tensor_util_env';
import { op } from './operation';
function raggedGather_(paramsNestedSplits, paramsDenseValues, indices, outputRaggedRank) {
    const $paramsNestedSplits = paramsNestedSplits.map((t, i) => convertToTensor(t, `tensors${i}`, 'raggedGather', 'int32'));
    const $paramsDenseValues = convertToTensor(paramsDenseValues, 'paramsDenseValues', 'raggedGather');
    const $indices = convertToTensor(indices, 'indices', 'raggedGather', 'int32');
    const inputs = {
        paramsNestedSplits: $paramsNestedSplits,
        paramsDenseValues: $paramsDenseValues,
        indices: $indices,
    };
    const attrs = { outputRaggedRank };
    const result = ENGINE.runKernel(RaggedGather, inputs, attrs);
    return {
        outputNestedSplits: result.slice(0, result.length - 1),
        outputDenseValues: result[result.length - 1],
    };
}
export const raggedGather = op({ raggedGather_ });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFnZ2VkX2dhdGhlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvb3BzL3JhZ2dlZF9nYXRoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNqQyxPQUFPLEVBQUMsWUFBWSxFQUF3QyxNQUFNLGlCQUFpQixDQUFDO0FBRXBGLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVuRCxPQUFPLEVBQUMsRUFBRSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBNEIvQixTQUFTLGFBQWEsQ0FDbEIsa0JBQTRCLEVBQUUsaUJBQW9DLEVBQ2xFLE9BQTBCLEVBQUUsZ0JBQXdCO0lBQ3RELE1BQU0sbUJBQW1CLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUM5QyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMxRSxNQUFNLGtCQUFrQixHQUNwQixlQUFlLENBQUMsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDNUUsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTlFLE1BQU0sTUFBTSxHQUF1QjtRQUNqQyxrQkFBa0IsRUFBRSxtQkFBbUI7UUFDdkMsaUJBQWlCLEVBQUUsa0JBQWtCO1FBQ3JDLE9BQU8sRUFBRSxRQUFRO0tBQ2xCLENBQUM7SUFDRixNQUFNLEtBQUssR0FBc0IsRUFBQyxnQkFBZ0IsRUFBQyxDQUFDO0lBRXBELE1BQU0sTUFBTSxHQUNSLE1BQU0sQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLE1BQVksRUFBRSxLQUFXLENBQUMsQ0FBQztJQUM5RCxPQUFPO1FBQ0wsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDdEQsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0tBQzdDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxFQUFDLGFBQWEsRUFBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7RU5HSU5FfSBmcm9tICcuLi9lbmdpbmUnO1xuaW1wb3J0IHtSYWdnZWRHYXRoZXIsIFJhZ2dlZEdhdGhlckF0dHJzLCBSYWdnZWRHYXRoZXJJbnB1dHN9IGZyb20gJy4uL2tlcm5lbF9uYW1lcyc7XG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7Y29udmVydFRvVGVuc29yfSBmcm9tICcuLi90ZW5zb3JfdXRpbF9lbnYnO1xuaW1wb3J0IHtUZW5zb3JMaWtlfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge29wfSBmcm9tICcuL29wZXJhdGlvbic7XG5cbi8qKlxuICogR2F0aGVyIHJhZ2dlZCBzbGljZXMgZnJvbSBwYXJhbXMgYXhpcyAwIGFjY29yZGluZyB0byBpbmRpY2VzLlxuICpcbiAqIEBwYXJhbSBwYXJhbXNOZXN0ZWRTcGxpdHM6IEEgbGlzdCBvZiBhdCBsZWFzdCAxIFRlbnNvciB3aXRoIHR5cGUgJ2ludDMyJyBUaGVcbiAqICAgICBuZXN0ZWRSb3dTcGxpdHMgdGVuc29ycyB0aGF0IGRlZmluZSB0aGUgcm93LXBhcnRpdGlvbmluZyBmb3IgdGhlIHBhcmFtc1xuICogICAgIFJhZ2dlZFRlbnNvciBpbnB1dC5cbiAqIEBwYXJhbSBwYXJhbXNEZW5zZVZhbHVlczogQSBUZW5zb3IuIFRoZSBmbGF0VmFsdWVzIGZvciB0aGUgcGFyYW1zXG4gKiAgICAgUmFnZ2VkVGVuc29yLlxuICogQHBhcmFtIGluZGljZXM6IEEgVGVuc29yLiBNdXN0IGJlIG9uZSBvZiB0eXBlOiBpbnQzMi4gSW5kaWNlcyBpbiB0aGVcbiAqICAgICBvdXRlcm1vc3QgZGltZW5zaW9uIG9mIHBhcmFtcyBvZiB0aGUgdmFsdWVzIHRoYXQgc2hvdWxkIGJlIGdhdGhlcmVkLlxuICogQHBhcmFtIG91dHB1dFJhZ2dlZFJhbms6IEFuIGludCB0aGF0IGlzID49IDAuIFRoZSByYWdnZWQgcmFuayBvZiB0aGUgb3V0cHV0XG4gKiAgICAgUmFnZ2VkVGVuc29yLiBvdXRwdXROZXN0ZWRTcGxpdHMgd2lsbCBjb250YWluIHRoaXMgbnVtYmVyIG9mIHJvd1NwbGl0c1xuICogICAgIHRlbnNvcnMuIFRoaXMgdmFsdWUgc2hvdWxkIGVxdWFsIGluZGljZXMuc2hhcGUubmRpbXMgKyBwYXJhbXMucmFnZ2VkUmFua1xuICogICAgIC0gMS5cbiAqIEByZXR1cm4gQSBtYXAgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiAgICAgLSBvdXRwdXROZXN0ZWRTcGxpdHM6IEEgbGlzdCBvZiBvdXRwdXRSYWdnZWRSYW5rIFRlbnNvciBvYmplY3RzIHdpdGggdGhlXG4gKiBzYW1lIHR5cGUgYXMgcGFyYW1zTmVzdGVkU3BsaXRzLlxuICogICAgIC0gb3V0cHV0RGVuc2VWYWx1ZXM6IEEgVGVuc29yLiBIYXMgdGhlIHNhbWUgdHlwZSBhcyBwYXJhbXNEZW5zZVZhbHVlcy5cbiAqIEBkb2Mge2hlYWRpbmc6ICdPcGVyYXRpb25zJywgc3ViaGVhZGluZzogJ1JhZ2dlZCd9XG4gKi9cblxuaW50ZXJmYWNlIFJhZ2dlZEdhdGhlck1hcCB7XG4gIG91dHB1dE5lc3RlZFNwbGl0czogVGVuc29yW107XG4gIG91dHB1dERlbnNlVmFsdWVzOiBUZW5zb3I7XG59XG5cbmZ1bmN0aW9uIHJhZ2dlZEdhdGhlcl8oXG4gICAgcGFyYW1zTmVzdGVkU3BsaXRzOiBUZW5zb3JbXSwgcGFyYW1zRGVuc2VWYWx1ZXM6IFRlbnNvcnxUZW5zb3JMaWtlLFxuICAgIGluZGljZXM6IFRlbnNvcnxUZW5zb3JMaWtlLCBvdXRwdXRSYWdnZWRSYW5rOiBudW1iZXIpOiBSYWdnZWRHYXRoZXJNYXAge1xuICBjb25zdCAkcGFyYW1zTmVzdGVkU3BsaXRzID0gcGFyYW1zTmVzdGVkU3BsaXRzLm1hcChcbiAgICAgICh0LCBpKSA9PiBjb252ZXJ0VG9UZW5zb3IodCwgYHRlbnNvcnMke2l9YCwgJ3JhZ2dlZEdhdGhlcicsICdpbnQzMicpKTtcbiAgY29uc3QgJHBhcmFtc0RlbnNlVmFsdWVzID1cbiAgICAgIGNvbnZlcnRUb1RlbnNvcihwYXJhbXNEZW5zZVZhbHVlcywgJ3BhcmFtc0RlbnNlVmFsdWVzJywgJ3JhZ2dlZEdhdGhlcicpO1xuICBjb25zdCAkaW5kaWNlcyA9IGNvbnZlcnRUb1RlbnNvcihpbmRpY2VzLCAnaW5kaWNlcycsICdyYWdnZWRHYXRoZXInLCAnaW50MzInKTtcblxuICBjb25zdCBpbnB1dHM6IFJhZ2dlZEdhdGhlcklucHV0cyA9IHtcbiAgICBwYXJhbXNOZXN0ZWRTcGxpdHM6ICRwYXJhbXNOZXN0ZWRTcGxpdHMsXG4gICAgcGFyYW1zRGVuc2VWYWx1ZXM6ICRwYXJhbXNEZW5zZVZhbHVlcyxcbiAgICBpbmRpY2VzOiAkaW5kaWNlcyxcbiAgfTtcbiAgY29uc3QgYXR0cnM6IFJhZ2dlZEdhdGhlckF0dHJzID0ge291dHB1dFJhZ2dlZFJhbmt9O1xuXG4gIGNvbnN0IHJlc3VsdDogVGVuc29yW10gPVxuICAgICAgRU5HSU5FLnJ1bktlcm5lbChSYWdnZWRHYXRoZXIsIGlucHV0cyBhcyB7fSwgYXR0cnMgYXMge30pO1xuICByZXR1cm4ge1xuICAgIG91dHB1dE5lc3RlZFNwbGl0czogcmVzdWx0LnNsaWNlKDAsIHJlc3VsdC5sZW5ndGggLSAxKSxcbiAgICBvdXRwdXREZW5zZVZhbHVlczogcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IHJhZ2dlZEdhdGhlciA9IG9wKHtyYWdnZWRHYXRoZXJffSk7XG4iXX0=