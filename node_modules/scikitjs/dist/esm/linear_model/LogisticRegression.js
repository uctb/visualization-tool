// /**
// *  @license
// * Copyright 2021, JsData. All rights reserved.
// *
// * This source code is licensed under the MIT license found in the
// * LICENSE file in the root directory of this source tree.
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// * ==========================================================================
// */
import { SGDClassifier } from './SgdClassifier';
import { getBackend } from '../tf-singleton';
/** Builds a linear classification model with associated penalty and regularization
 *
 * @example
 * ```js
 * let X = [
      [1, -1],
      [2, 0],
      [2, 1],
      [2, -1],
      [3, 2],
      [0, 4],
      [1, 3],
      [1, 4],
      [1, 5],
      [2, 3],
    ]
    let y = [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1]

    let logreg = new LogisticRegression({ penalty: 'none' })
    await logreg.fit(X, y)
 * ```
*/
export class LogisticRegression extends SGDClassifier {
    constructor({ penalty = 'l2', C = 1, fitIntercept = true, modelFitOptions } = {}) {
        // Assume Binary classification
        // If we call fit, and it isn't binary then update args
        let tf = getBackend();
        super({
            modelCompileArgs: {
                optimizer: tf.train.adam(0.1),
                loss: tf.losses.softmaxCrossEntropy,
                metrics: ['accuracy']
            },
            modelFitArgs: {
                batchSize: 32,
                epochs: 1000,
                verbose: 0,
                callbacks: [
                    tf.callbacks.earlyStopping({ monitor: 'loss', patience: 50 })
                ],
                ...modelFitOptions
            },
            denseLayerArgs: {
                units: 1,
                useBias: Boolean(fitIntercept),
                activation: 'softmax',
                kernelInitializer: tf.initializers.zeros(),
                biasInitializer: tf.initializers.zeros(),
                kernelRegularizer: penalty === 'l2'
                    ? tf.regularizers.l2({ l2: C })
                    : penalty === 'l1'
                        ? tf.regularizers.l1({ l1: C })
                        : undefined
            },
            isClassification: true,
            optimizerType: 'adam',
            lossType: 'softmaxCrossEntropy'
        });
        /** Useful for pipelines and column transformers to have a default name for transforms */
        this.name = 'LogisticRegression';
    }
}
