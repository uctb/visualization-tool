import { RegressorMixin } from '../mixins';
import { getBackend } from '../tf-singleton';
/**
 * A voting regressor is an ensemble meta-estimator that fits several base
 * regressors, each on the whole dataset. Then it averages the individual
 * predictions to form a final prediction.
 *
 * @example
 * ```js
 * import { VotingRegressor, DecisionTreeRegressor, LinearRegression } from 'scikitjs'
 *
 * const X = [
      [2, 2],
      [2, 3],
      [5, 4],
      [1, 0]
    ]
    const y = [5, 3, 4, 1.5]
    const voter = new VotingRegressor({
      estimators: [
        ['dt', new DecisionTreeRegressor()],
        ['lr', new LinearRegression({ fitIntercept: false })]
      ]
    })

    await voter.fit(X, y)
 * ```
 */
export class VotingRegressor extends RegressorMixin {
    estimators;
    weights;
    name = 'VotingRegressor';
    constructor({ estimators = [], weights = undefined } = {}) {
        super();
        this.tf = getBackend();
        this.estimators = estimators;
        this.weights = weights;
    }
    async fit(X, y) {
        for (let i = 0; i < this.estimators?.length; i++) {
            let [_, curEstimator] = this.estimators[i];
            await curEstimator.fit(X, y);
        }
        return this;
    }
    predict(X) {
        let responses = [];
        let numEstimators = this.estimators.length;
        const weights = this.weights || Array(numEstimators).fill(1 / numEstimators);
        for (let i = 0; i < numEstimators; i++) {
            let [_, curEstimator] = this.estimators[i];
            let curWeight = weights[i];
            responses.push(curEstimator.predict(X).mul(curWeight));
        }
        return this.tf.addN(responses);
    }
    transform(X) {
        let responses = [];
        let numEstimators = this.estimators.length;
        for (let i = 0; i < numEstimators; i++) {
            let [_, curEstimator] = this.estimators[i];
            responses.push(curEstimator.predict(X));
        }
        return responses;
    }
    async fitTransform(X, y) {
        return (await this.fit(X, y)).transform(X);
    }
}
/**
 *
 * Helper function for make a VotingRegressor. Just pass your Estimators as function arguments.
 *
 * @example
 * ```typescript
 * import {makeVotingRegressor, DummyRegressor, LinearRegression} from 'scikitjs'
 *  const X = [
      [1, 2],
      [2, 1],
      [2, 2],
      [3, 1]
    ]
    const y = [3, 3, 4, 4]
    const voter = makeVotingRegressor(
      new DummyRegressor(),
      new LinearRegression({ fitIntercept: true })
    )

    await voter.fit(X, y)
    ```
 */
export function makeVotingRegressor(...args) {
    let estimators = [];
    for (let i = 0; i < args.length; i++) {
        // eslint-disable-next-line prefer-rest-params
        let cur = args[i];
        estimators.push([cur.name, cur]);
    }
    return new VotingRegressor({ estimators });
}
