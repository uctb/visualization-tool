import { r2Score, accuracyScore } from './metrics/metrics';
import { Serialize } from './simpleSerializer';
import { assert, isScikit2D } from './typesUtils';
import { convertToNumericTensor1D_2D } from './utils';
export class TransformerMixin extends Serialize {
    fitTransform(X) {
        return this.fit(X).transform(X);
    }
}
export class PredictorMixin {
    fitPredict(X, y) {
        return this.fit(X, y).predict(X);
    }
}
export class RegressorMixin extends Serialize {
    EstimatorType = 'regressor';
    score(X, y) {
        const yPred = this.predict(X);
        return r2Score(y, yPred);
    }
}
export class ClassifierMixin extends Serialize {
    EstimatorType = 'classifier';
    score(X, y) {
        const yPred = this.predict(X);
        const yTrue = convertToNumericTensor1D_2D(y);
        assert(yPred.shape.length === yTrue.shape.length, "The shape of the model output doesn't match the shape of the actual y values");
        if (isScikit2D(y)) {
            return accuracyScore(yTrue.argMax(1), yPred.argMax(1));
        }
        return accuracyScore(y, yPred);
    }
}
export const mixins = (baseClass, ...mixins) => {
    class base extends baseClass {
        constructor(...args) {
            super(...args);
            mixins.forEach((mixin) => {
                copyProps(this, new mixin());
            });
        }
    }
    let copyProps = (target, source) => {
        // this function copies all properties and symbols, filtering out some special ones
        Object.getOwnPropertyNames(source)
            .concat(Object.getOwnPropertySymbols(source))
            .forEach((prop) => {
            if (!prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))
                Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop));
        });
    };
    mixins.forEach((mixin) => {
        // outside contructor() to allow aggregation(A,B,C).staticFunction() to be called etc.
        copyProps(base.prototype, mixin.prototype);
        copyProps(base, mixin);
    });
    return base;
};
