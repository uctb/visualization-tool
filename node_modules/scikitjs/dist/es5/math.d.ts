import { Iterable, Tensor } from './types';
export declare function simpleMin<T extends Iterable<number | string | boolean>>(arr: T, ignoreNaN?: boolean): number | string | boolean;
export declare function tensorMin(tensor: Tensor, axis: number, ignoreNaN: boolean): Tensor;
export declare function simpleMax<T extends Iterable<number | string | boolean>>(arr: T, ignoreNaN?: boolean): number | string | boolean;
export declare function tensorMax(tensor: Tensor, axis: number, ignoreNaN?: boolean): Tensor;
export declare function simpleSum<T extends Iterable<number | boolean>>(arr: T, ignoreNaN?: boolean): number;
export declare function tensorSum(tensor: Tensor, axis: number, ignoreNaN?: boolean): any;
export declare function simpleCount<T extends Iterable<number | string | boolean>>(arr: T, ignoreNaN?: boolean): number;
export declare function tensorCount(tensor: Tensor, axis: number, ignoreNaN?: boolean): any;
export declare function simpleMean<T extends Iterable<number | boolean>>(arr: T): number;
export declare function tensorMean(tensor: Tensor, axis: number, ignoreNaN?: boolean, safe?: boolean): any;
export declare function tensorStd(tensor: Tensor, dim: number, ignoreNaN?: boolean): any;
export declare function turnZerosToOnes(tensor: Tensor): any;
