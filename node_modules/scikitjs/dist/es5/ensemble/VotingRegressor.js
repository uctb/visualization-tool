var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { RegressorMixin } from '../mixins';
import { getBackend } from '../tf-singleton';
/**
 * A voting regressor is an ensemble meta-estimator that fits several base
 * regressors, each on the whole dataset. Then it averages the individual
 * predictions to form a final prediction.
 *
 * @example
 * ```js
 * import { VotingRegressor, DecisionTreeRegressor, LinearRegression } from 'scikitjs'
 *
 * const X = [
      [2, 2],
      [2, 3],
      [5, 4],
      [1, 0]
    ]
    const y = [5, 3, 4, 1.5]
    const voter = new VotingRegressor({
      estimators: [
        ['dt', new DecisionTreeRegressor()],
        ['lr', new LinearRegression({ fitIntercept: false })]
      ]
    })

    await voter.fit(X, y)
 * ```
 */
var VotingRegressor = /** @class */ (function (_super) {
    __extends(VotingRegressor, _super);
    function VotingRegressor(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.estimators, estimators = _c === void 0 ? [] : _c, _d = _b.weights, weights = _d === void 0 ? undefined : _d;
        var _this = _super.call(this) || this;
        _this.name = 'VotingRegressor';
        _this.tf = getBackend();
        _this.estimators = estimators;
        _this.weights = weights;
        return _this;
    }
    VotingRegressor.prototype.fit = function (X, y) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var i, _b, _1, curEstimator;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(i < ((_a = this.estimators) === null || _a === void 0 ? void 0 : _a.length))) return [3 /*break*/, 4];
                        _b = __read(this.estimators[i], 2), _1 = _b[0], curEstimator = _b[1];
                        return [4 /*yield*/, curEstimator.fit(X, y)];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, this];
                }
            });
        });
    };
    VotingRegressor.prototype.predict = function (X) {
        var responses = [];
        var numEstimators = this.estimators.length;
        var weights = this.weights || Array(numEstimators).fill(1 / numEstimators);
        for (var i = 0; i < numEstimators; i++) {
            var _a = __read(this.estimators[i], 2), _2 = _a[0], curEstimator = _a[1];
            var curWeight = weights[i];
            responses.push(curEstimator.predict(X).mul(curWeight));
        }
        return this.tf.addN(responses);
    };
    VotingRegressor.prototype.transform = function (X) {
        var responses = [];
        var numEstimators = this.estimators.length;
        for (var i = 0; i < numEstimators; i++) {
            var _a = __read(this.estimators[i], 2), _3 = _a[0], curEstimator = _a[1];
            responses.push(curEstimator.predict(X));
        }
        return responses;
    };
    VotingRegressor.prototype.fitTransform = function (X, y) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fit(X, y)];
                    case 1: return [2 /*return*/, (_a.sent()).transform(X)];
                }
            });
        });
    };
    return VotingRegressor;
}(RegressorMixin));
export { VotingRegressor };
/**
 *
 * Helper function for make a VotingRegressor. Just pass your Estimators as function arguments.
 *
 * @example
 * ```typescript
 * import {makeVotingRegressor, DummyRegressor, LinearRegression} from 'scikitjs'
 *  const X = [
      [1, 2],
      [2, 1],
      [2, 2],
      [3, 1]
    ]
    const y = [3, 3, 4, 4]
    const voter = makeVotingRegressor(
      new DummyRegressor(),
      new LinearRegression({ fitIntercept: true })
    )

    await voter.fit(X, y)
    ```
 */
export function makeVotingRegressor() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var estimators = [];
    for (var i = 0; i < args.length; i++) {
        // eslint-disable-next-line prefer-rest-params
        var cur = args[i];
        estimators.push([cur.name, cur]);
    }
    return new VotingRegressor({ estimators: estimators });
}
