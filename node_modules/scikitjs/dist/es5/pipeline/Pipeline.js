var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
/* eslint-disable @typescript-eslint/no-explicit-any */
import { assert } from '../typesUtils';
import { Serialize } from '../simpleSerializer';
/** Construct a pipeline of transformations, with the final one being an estimator.
 * Usually this is used to perform some cleaning of the data in the early stages of the pipeline
 * (ie. StandardScaling, or SimpleImputer), and then ending with the fitted estimator.
 *
 * <!-- prettier-ignore-start -->
 * ```js
 * import { Pipeline } from 'scikitjs'
 *
 * const X = [
      [2, 2], // [1, .5]
      [2, NaN], // [1, 0]
      [NaN, 4], // [0, 1]
      [1, 0] // [.5, 0]
    ]
    const y = [5, 3, 4, 1.5]
    const pipeline = new Pipeline({
      steps: [
        [
          'simpleImputer',
          new SimpleImputer({ strategy: 'constant', fillValue: 0 })
        ],
        ['minmax', new MinMaxScaler()],
        ['lr', new LinearRegression({ fitIntercept: false })]
      ]
    })

    await pipeline.fit(X, y)
 * ```
 */
var Pipeline = /** @class */ (function (_super) {
    __extends(Pipeline, _super);
    function Pipeline(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.steps, steps = _c === void 0 ? [] : _c;
        var _this = _super.call(this) || this;
        /** Useful for pipelines and column transformers to have a default name for transforms */
        _this.name = 'Pipeline';
        _this.steps = steps;
        _this.validateSteps(_this.steps);
        return _this;
    }
    /** Checks if the input is a Transformer or the string "passthrough" */
    Pipeline.prototype.isTransformer = function (possibleTransformer) {
        if (possibleTransformer === 'passthrough') {
            return true;
        }
        if (typeof possibleTransformer.fit === 'function' &&
            typeof possibleTransformer.transform === 'function' &&
            typeof possibleTransformer.fitTransform === 'function') {
            return true;
        }
        return false;
    };
    /** Checks if the input is an Estimator or the string "passthrough" */
    Pipeline.prototype.isEstimator = function (possibleTransformer) {
        if (possibleTransformer === 'passthrough') {
            return true;
        }
        if (typeof possibleTransformer.fit === 'function') {
            return true;
        }
        return false;
    };
    /** Checks if the steps are valid. Each of the elements in the array (except for the last)
     * must be a Transformer. That means they need a "fit" and "transform" method. The only special case
     * is the string "passthrough" which leaves the input untouched. The sklearn pipeline uses that feature
     * a lot when it grid searches through everything.
     *
     * I call validateSteps in the constructor as well as every call to fit/predict. In the case of grid search
     * the steps can be changed at runtime and so you need to check on every call if your value for steps is still
     * valid
     */
    Pipeline.prototype.validateSteps = function (steps) {
        assert(Array.isArray(steps), "steps is not an array. It is ".concat(steps));
        if (steps.length === 0) {
            // Empty array is valid
            return;
        }
        for (var i = 0; i < steps.length - 1; i++) {
            var step = steps[i];
            assert(Array.isArray(step), "A single step in your pipeline must be an array containing a string as the first argument, and the transformer in the second. Something akin to ['minmaxscaler', new MinMaxScaler()]. Instead it is ".concat(step));
            assert(this.isTransformer(step[1]), "The ".concat(i, "th step in your pipeline isn't an array containing a name and a Transformer. Instead it is ").concat(steps[i], "."));
        }
        var lastEstimator = steps[steps.length - 1];
        assert(Array.isArray(lastEstimator), "The last element in your pipeline must be a 2-element array that contains a string as the first argument, and an estimator as the second. Instead it is ".concat(lastEstimator));
        assert(this.isEstimator(lastEstimator[1]), "The last element in your pipeline should be an Estimator. Instead it is ".concat(lastEstimator));
    };
    Pipeline.prototype.transformExceptLast = function (X) {
        var XT = X;
        for (var i = 0; i < this.steps.length - 1; i++) {
            var _a = __read(this.steps[i], 2), transformer = _a[1];
            if (transformer === 'passthrough') {
                continue;
            }
            XT = transformer.transform(XT);
        }
        return XT;
    };
    Pipeline.prototype.fitTransformExceptLast = function (X) {
        var XT = X;
        for (var i = 0; i < this.steps.length - 1; i++) {
            var _a = __read(this.steps[i], 2), transformer = _a[1];
            if (transformer === 'passthrough') {
                continue;
            }
            XT = transformer.fitTransform(XT);
        }
        return XT;
    };
    Pipeline.prototype.getLastEstimator = function () {
        if (this.steps.length === 0) {
            return null;
        }
        return this.steps[this.steps.length - 1][1];
    };
    Pipeline.prototype.assertEstimatorHasFunction = function (estimator, funcName) {
        assert(estimator !== null, "Your final Estimator is null and therefore you can't call ".concat(funcName));
        assert(typeof estimator[funcName] === 'function', "Estimator ".concat(estimator, " doesn't implement the function ").concat(funcName));
    };
    Pipeline.prototype.fit = function (X, y) {
        return __awaiter(this, void 0, void 0, function () {
            var lastEstimator, XT;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.validateSteps(this.steps);
                        lastEstimator = this.getLastEstimator();
                        this.assertEstimatorHasFunction(lastEstimator, 'fit');
                        XT = this.fitTransformExceptLast(X);
                        return [4 /*yield*/, lastEstimator.fit(XT, y)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this];
                }
            });
        });
    };
    Pipeline.prototype.transform = function (X) {
        this.validateSteps(this.steps);
        var lastEstimator = this.getLastEstimator();
        this.assertEstimatorHasFunction(lastEstimator, 'transform');
        var XT = this.transformExceptLast(X);
        return lastEstimator.transform(XT);
    };
    Pipeline.prototype.fitTransform = function (X, y) {
        this.validateSteps(this.steps);
        var lastEstimator = this.getLastEstimator();
        this.assertEstimatorHasFunction(lastEstimator, 'fitTransform');
        var XT = this.fitTransformExceptLast(X);
        return lastEstimator.fitTransform(XT);
    };
    Pipeline.prototype.predict = function (X) {
        this.validateSteps(this.steps);
        var lastEstimator = this.getLastEstimator();
        this.assertEstimatorHasFunction(lastEstimator, 'predict');
        var XT = this.transformExceptLast(X);
        return lastEstimator.predict(XT);
    };
    Pipeline.prototype.fitPredict = function (X, y) {
        return __awaiter(this, void 0, void 0, function () {
            var lastEstimator, XT;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.validateSteps(this.steps);
                        lastEstimator = this.getLastEstimator();
                        this.assertEstimatorHasFunction(lastEstimator, 'fitPredict');
                        XT = this.fitTransformExceptLast(X);
                        return [4 /*yield*/, lastEstimator.fitPredict(XT, y)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Pipeline;
}(Serialize));
export { Pipeline };
/**
 *
 * Shorthand for making a Pipeline class. Just pass your Estimators as function arguments.
 *
 * @example
 * ```typescript
 * import {makePipeline, SimpleImputer, MinMaxScaler, LinearRegression} from 'scikitjs'
 *  const X = [
      [2, 2],
      [2, NaN],
      [NaN, 4],
      [1, 0]
    ]
    const y = [5, 3, 4, 1.5]
    const pipeline = makePipeline(
      new SimpleImputer({ strategy: 'constant', fillValue: 0 }),
      new MinMaxScaler(),
      new LinearRegression({ fitIntercept: false })
    )

    await pipeline.fit(X, y)
    ```
 */
export function makePipeline() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var pipelineSteps = [];
    for (var i = 0; i < args.length; i++) {
        // eslint-disable-next-line prefer-rest-params
        var cur = args[i];
        pipelineSteps.push([cur.name, cur]);
    }
    return new Pipeline({ steps: pipelineSteps });
}
