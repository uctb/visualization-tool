var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { encode, decode } from 'base64-arraybuffer';
import { getBackend } from './tf-singleton';
var EstimatorList = [
    'KNeighborsRegressor',
    'LinearRegression',
    'LassoRegression',
    'RidgeRegression',
    'ElasticNet',
    'LogisticRegression',
    'DummyRegressor',
    'DummyClassifier',
    'MinMaxScaler',
    'StandardScaler',
    'MaxAbsScaler',
    'SimpleImputer',
    'OneHotEncoder',
    'LabelEncoder',
    'OrdinalEncoder',
    'Normalizer',
    'Pipeline',
    'ColumnTransformer',
    'RobustScaler',
    'KMeans',
    'VotingRegressor',
    'VotingClassifier',
    'LinearSVC',
    'LinearSVR',
    'GaussianNB',
    'DecisionTreeClassifier',
    'DecisionTreeRegressor',
    'ClassificationCriterion',
    'RegressionCriterion',
    'Splitter',
    'DecisionTreeBase',
    'DecisionTree'
];
var letters = 'abcdefghijklmnopqrstuvwxy';
function randomString(numLetters) {
    var curLetter = '';
    for (var i = 0; i < numLetters; i++) {
        var index = Math.floor(Math.random() * letters.length);
        curLetter += letters[index];
    }
    return curLetter;
}
/**
 * 1. Make a list called EstimatorList
 * 2. Do a dynamic import here
 */
var JSONHandler = /** @class */ (function () {
    function JSONHandler(artifacts) {
        this.savedArtifacts = artifacts || null;
    }
    JSONHandler.prototype.save = function (artifacts) {
        return __awaiter(this, void 0, void 0, function () {
            var mapping, i, curWeightSpec, randomName, _loop_1, i;
            return __generator(this, function (_a) {
                // Base 64 encoding
                artifacts.weightData = encode(artifacts.weightData);
                mapping = {};
                for (i = 0; i < artifacts.modelTopology.config.layers.length; i++) {
                    curWeightSpec = artifacts.modelTopology.config.layers[i];
                    randomName = randomString(6);
                    mapping[curWeightSpec.config.name] = randomName;
                    curWeightSpec.config.name = randomName;
                }
                _loop_1 = function (i) {
                    var cur = artifacts.weightSpecs[i];
                    var allMaps = Object.keys(mapping);
                    allMaps.forEach(function (el) {
                        if (cur.name.includes(el)) {
                            cur.name = cur.name.replace(el, mapping[el]);
                        }
                    });
                };
                for (i = 0; i < artifacts.weightSpecs.length; i++) {
                    _loop_1(i);
                }
                this.savedArtifacts = artifacts;
                return [2 /*return*/, {
                        modelArtifactsInfo: {
                            dateSaved: new Date(),
                            modelTopologyType: 'JSON',
                            modelTopologyBytes: JSON.stringify(artifacts.modelTopology).length,
                            weightSpecsBytes: JSON.stringify(artifacts.weightSpecs).length,
                            weightDataBytes: artifacts.weightData.byteLength
                        }
                    }];
            });
        });
    };
    JSONHandler.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // Base64 decode
                this.savedArtifacts.weightData = decode(this.savedArtifacts.weightData);
                return [2 /*return*/, this.savedArtifacts];
            });
        });
    };
    return JSONHandler;
}());
export function toObjectInner(val, ignoreKeys) {
    if (ignoreKeys === void 0) { ignoreKeys = []; }
    return __awaiter(this, void 0, void 0, function () {
        var tf, mem, response, _a, _b, key, _c, _d, e_1_1;
        var e_1, _e;
        var _this = this;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    tf = getBackend();
                    if (['number', 'string', 'undefined', 'boolean'].includes(typeof val)) {
                        return [2 /*return*/, val];
                    }
                    if (typeof val === 'function') {
                        console.warn("warning: Serializing function ".concat(val, ". Not going to be able to deserialize this later."));
                        if (val.name) {
                            return [2 /*return*/, val.name];
                        }
                    }
                    if (!(typeof val === 'object')) return [3 /*break*/, 13];
                    // Null case
                    if (val === null) {
                        return [2 /*return*/, null];
                    }
                    if (!Array.isArray(val)) return [3 /*break*/, 2];
                    return [4 /*yield*/, Promise.all(val.map(function (el) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, toObjectInner(el, ignoreKeys)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); }))];
                case 1: return [2 /*return*/, _f.sent()];
                case 2:
                    // Serialize a Tensor
                    if (val instanceof tf.Tensor) {
                        return [2 /*return*/, {
                                name: 'Tensor',
                                value: val.arraySync()
                            }];
                    }
                    // Int32Array serialization. Used for DecisionTrees
                    if (val instanceof Int32Array) {
                        return [2 /*return*/, {
                                name: 'Int32Array',
                                value: Array.from(val)
                            }];
                    }
                    if (val instanceof Float32Array) {
                        return [2 /*return*/, {
                                name: 'Float32Array',
                                value: Array.from(val)
                            }];
                    }
                    if (!(val instanceof tf.Sequential)) return [3 /*break*/, 4];
                    mem = new JSONHandler();
                    return [4 /*yield*/, val.save(mem)];
                case 3:
                    _f.sent();
                    return [2 /*return*/, {
                            name: 'Sequential',
                            artifacts: mem.savedArtifacts
                        }];
                case 4:
                    // The tf object
                    if (val.ENV && val.AdadeltaOptimizer && val.version) {
                        return [2 /*return*/, {
                                name: 'TF',
                                version: val.version.tfjs
                            }];
                    }
                    response = {};
                    _f.label = 5;
                case 5:
                    _f.trys.push([5, 10, 11, 12]);
                    _a = __values(Object.keys(val)), _b = _a.next();
                    _f.label = 6;
                case 6:
                    if (!!_b.done) return [3 /*break*/, 9];
                    key = _b.value;
                    // Ignore all the keys that we choose to
                    if (ignoreKeys.includes(key)) {
                        return [3 /*break*/, 8];
                    }
                    _c = response;
                    _d = key;
                    return [4 /*yield*/, toObjectInner(val[key], ignoreKeys)];
                case 7:
                    _c[_d] = _f.sent();
                    _f.label = 8;
                case 8:
                    _b = _a.next();
                    return [3 /*break*/, 6];
                case 9: return [3 /*break*/, 12];
                case 10:
                    e_1_1 = _f.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 12];
                case 11:
                    try {
                        if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 12: return [2 /*return*/, response];
                case 13: return [2 /*return*/];
            }
        });
    });
}
export function fromObjectInner(val) {
    return __awaiter(this, void 0, void 0, function () {
        var tf, newMem, _a, _b, key, _c, _d, e_2_1, module_1, model, resultObj, _e, _f, key;
        var e_2, _g, e_3, _h;
        var _this = this;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    tf = getBackend();
                    // Ignores all types that aren't objects
                    if (typeof val !== 'object') {
                        return [2 /*return*/, val];
                    }
                    // Null case
                    if (val === null) {
                        return [2 /*return*/, null];
                    }
                    // Make a Tensor
                    if (val.name === 'Tensor') {
                        return [2 /*return*/, tf.tensor(val.value)];
                    }
                    if (!(val.name === 'Sequential')) return [3 /*break*/, 2];
                    newMem = new JSONHandler(val.artifacts);
                    return [4 /*yield*/, tf.loadLayersModel(newMem)];
                case 1: return [2 /*return*/, _j.sent()];
                case 2:
                    if (val.name === 'Int32Array') {
                        return [2 /*return*/, new Int32Array(val.value)];
                    }
                    if (val.name === 'Float32Array') {
                        return [2 /*return*/, new Float32Array(val.value)];
                    }
                    if (val.name === 'TF') {
                        return [2 /*return*/, tf];
                    }
                    if (!Array.isArray(val)) return [3 /*break*/, 4];
                    return [4 /*yield*/, Promise.all(val.map(function (el) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, fromObjectInner(el)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); }))];
                case 3: return [2 /*return*/, _j.sent()];
                case 4:
                    _j.trys.push([4, 9, 10, 11]);
                    _a = __values(Object.keys(val)), _b = _a.next();
                    _j.label = 5;
                case 5:
                    if (!!_b.done) return [3 /*break*/, 8];
                    key = _b.value;
                    _c = val;
                    _d = key;
                    return [4 /*yield*/, fromObjectInner(val[key])];
                case 6:
                    _c[_d] = _j.sent();
                    _j.label = 7;
                case 7:
                    _b = _a.next();
                    return [3 /*break*/, 5];
                case 8: return [3 /*break*/, 11];
                case 9:
                    e_2_1 = _j.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 11];
                case 10:
                    try {
                        if (_b && !_b.done && (_g = _a.return)) _g.call(_a);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 11:
                    if (!EstimatorList.includes(val.name)) return [3 /*break*/, 13];
                    return [4 /*yield*/, import('./index')];
                case 12:
                    module_1 = _j.sent();
                    model = module_1[val.name];
                    resultObj = new model(val);
                    try {
                        for (_e = __values(Object.keys(val)), _f = _e.next(); !_f.done; _f = _e.next()) {
                            key = _f.value;
                            resultObj[key] = val[key];
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_h = _e.return)) _h.call(_e);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    return [2 /*return*/, resultObj];
                case 13: return [2 /*return*/, val];
            }
        });
    });
}
export function fromObject(val) {
    return __awaiter(this, void 0, void 0, function () {
        var e_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fromObjectInner(val)];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    e_4 = _a.sent();
                    console.error(e_4);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
export function fromJSON(val) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fromObject(JSON.parse(val))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
var ignoredKeysForSGDRegressor = [
    'modelCompileArgs',
    'modelFitArgs',
    'denseLayerArgs'
];
var Serialize = /** @class */ (function () {
    function Serialize() {
    }
    Serialize.prototype.toObject = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, toObjectInner(this, ignoredKeysForSGDRegressor)
                        // } catch (e) {
                        //   console.error(e)
                        // }
                    ];
                    case 1: 
                    // try {
                    return [2 /*return*/, _a.sent()
                        // } catch (e) {
                        //   console.error(e)
                        // }
                    ];
                }
            });
        });
    };
    Serialize.prototype.toJSON = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = JSON).stringify;
                        return [4 /*yield*/, this.toObject()];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    return Serialize;
}());
export { Serialize };
