var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
*  @license
* Copyright 2022, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
import { BaseNaiveBayes } from './BaseNaiveBayes';
import { getBackend } from '../tf-singleton';
/**
 * Gaussian Naive Bayes classifier
 *
 * @example
 * ```js
 * import { GaussianNB } from 'scikitjs'
 *
 * const clf = new GaussianNB({ priors: [0.5, 0.5] })
   const X = [
     [0.1, 0.9],
     [0.3, 0.7],
     [0.9, 0.1],
     [0.8, 0.2],
     [0.81, 0.19]
   ]
   const y = [0, 0, 1, 1, 1]

   const model = new GaussianNB({})
   await model.fit(X, y)

   clf.predict([
     [0.1, 0.9],
     [0.01, 0.99]
   ]) // [0, 1]


 * ```
 *
 */
var GaussianNB = /** @class */ (function (_super) {
    __extends(GaussianNB, _super);
    function GaussianNB() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'GaussianNB';
        return _this;
    }
    GaussianNB.prototype.kernel = function (features, mean, variance) {
        var tf = getBackend();
        return tf.tidy(function () {
            return tf
                .sub(features, mean.expandDims(0))
                .pow(2)
                .div(variance.expandDims(0).mul(-2))
                .exp()
                .div(variance
                .mul(2 * Math.PI)
                .expandDims(0)
                .sqrt())
                .prod(1);
        });
    };
    return GaussianNB;
}(BaseNaiveBayes));
export { GaussianNB };
