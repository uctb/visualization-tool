var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
*  @license
* Copyright 2022, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
import { polyfillUnique } from '../tfUtils';
import { convertToNumericTensor2D, convertToTensor1D } from '../utils';
import { getBackend } from '../tf-singleton';
import { Serialize } from '../simpleSerializer';
var BaseNaiveBayes = /** @class */ (function (_super) {
    __extends(BaseNaiveBayes, _super);
    function BaseNaiveBayes(params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this) || this;
        _this.tf = getBackend();
        _this.classes = _this.tf.tensor1d([]);
        _this.means = [];
        _this.variances = [];
        if (params.priors) {
            _this.priors = convertToTensor1D(params.priors);
        }
        _this.varSmoothing = params.varSmoothing ? params.varSmoothing : 1e-9;
        return _this;
    }
    /**
     * Train the model by calculating the mean and variance of sample distribution.
     * @param X
     * @param y
     * @returns
     */
    BaseNaiveBayes.prototype.fit = function (X, y) {
        return __awaiter(this, void 0, void 0, function () {
            var features, labels, _a, values, meansByLabel, variancesByLabel;
            var _this = this;
            return __generator(this, function (_b) {
                features = convertToNumericTensor2D(X);
                labels = convertToTensor1D(y);
                _a = this.tf.tidy(function () {
                    polyfillUnique(_this.tf);
                    var meansByLabel = [];
                    var variancesByLabel = [];
                    // Get the list of unique labels
                    var values = _this.tf.unique(labels).values;
                    var variance = _this.tf.moments(features, 0).variance;
                    var epsilon = variance.max().mul(_this.varSmoothing);
                    _this.tf.unstack(values).forEach(function (c) {
                        var mask = _this.tf.equal(labels, c).toFloat();
                        var numInstances = _this.tf.sum(mask);
                        var mean = _this.tf
                            .mul(features, mask.expandDims(1))
                            .sum(0)
                            .div(numInstances);
                        var variance = _this.tf
                            .sub(features, mean)
                            .mul(mask.expandDims(1))
                            .pow(2)
                            .sum(0)
                            .div(numInstances)
                            .add(epsilon);
                        meansByLabel.push(mean);
                        variancesByLabel.push(variance);
                    });
                    return { values: values, meansByLabel: meansByLabel, variancesByLabel: variancesByLabel };
                }), values = _a.values, meansByLabel = _a.meansByLabel, variancesByLabel = _a.variancesByLabel;
                // Unique labels this model have learned
                this.classes = values;
                this.means = meansByLabel;
                this.variances = variancesByLabel;
                return [2 /*return*/, this];
            });
        });
    };
    /**
     * Predict the probability of samples assigned to each observed label.
     * @param X
     * @returns {this.tf.Tensor} Probabilities
     */
    BaseNaiveBayes.prototype.predictProba = function (X) {
        var _this = this;
        var features = convertToNumericTensor2D(X);
        var probabilities = this.tf.tidy(function () {
            var probs = [];
            _this.classes.unstack().forEach(function (_, idx) {
                // Get the mean for this label
                var mean = _this.means[idx];
                var variance = _this.variances[idx];
                var prob = _this.kernel(features, mean, variance);
                probs.push(prob);
            });
            var withoutPriors = _this.tf.stack(probs, 1);
            if (_this.priors) {
                return withoutPriors.mul(_this.priors);
            }
            else {
                return withoutPriors;
            }
        });
        return probabilities;
    };
    /**
     * Predict the labels assigned to each sample
     * @param X
     * @returns {this.tf.Tensor} Labels
     */
    BaseNaiveBayes.prototype.predict = function (X) {
        var probs = this.predictProba(X);
        return probs.argMax(1);
    };
    return BaseNaiveBayes;
}(Serialize));
export { BaseNaiveBayes };
