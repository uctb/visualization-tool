// /**
// *  @license
// * Copyright 2021, JsData. All rights reserved.
// *
// * This source code is licensed under the MIT license found in the
// * LICENSE file in the root directory of this source tree.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// * ==========================================================================
// */
import { SGDClassifier } from '../linear_model/SgdClassifier';
import { getBackend } from '../tf-singleton';
/** Builds a linear classification model with associated penalty and regularization
 *
 * @example
 * ```js
 * let X = [
      [1, -1],
      [2, 0],
      [2, 1],
      [2, -1],
      [3, 2],
      [0, 4],
      [1, 3],
      [1, 4],
      [1, 5],
      [2, 3],
    ]
    let y = [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1]

    let svc = new LinearSVC()
    await svc.fit(X, y)
 * ```
*/
var LinearSVC = /** @class */ (function (_super) {
    __extends(LinearSVC, _super);
    function LinearSVC(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.penalty, penalty = _c === void 0 ? 'l2' : _c, _d = _b.C, C = _d === void 0 ? 1 : _d, _e = _b.fitIntercept, fitIntercept = _e === void 0 ? true : _e;
        var _this = this;
        // Assume Binary classification
        // If we call fit, and it isn't binary then update args
        var tf = getBackend();
        _this = _super.call(this, {
            modelCompileArgs: {
                optimizer: tf.train.adam(0.1),
                loss: tf.losses.hingeLoss,
                metrics: ['accuracy']
            },
            modelFitArgs: {
                batchSize: 32,
                epochs: 1000,
                verbose: 0,
                callbacks: [
                    tf.callbacks.earlyStopping({ monitor: 'loss', patience: 50 })
                ]
            },
            denseLayerArgs: {
                units: 1,
                useBias: Boolean(fitIntercept),
                activation: 'softmax',
                kernelInitializer: tf.initializers.zeros(),
                biasInitializer: tf.initializers.zeros(),
                kernelRegularizer: penalty === 'l2'
                    ? tf.regularizers.l2({ l2: C })
                    : penalty === 'l1'
                        ? tf.regularizers.l1({ l1: C })
                        : undefined
            },
            isClassification: true,
            optimizerType: 'adam',
            lossType: 'hingeLoss'
        }) || this;
        /** Useful for pipelines and column transformers to have a default name for transforms */
        _this.name = 'LinearSVC';
        return _this;
    }
    return LinearSVC;
}(SGDClassifier));
export { LinearSVC };
