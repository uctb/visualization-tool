/**
*  @license
* Copyright 2022, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { assert } from '../typesUtils';
import { KFold } from './KFold';
import { isScikit1D } from '../typesUtils';
import { convertToTensor1D, convertToTensor2D } from '../utils';
import { getBackend } from '../tf-singleton';
export function crossValScore(estimator, X, y, params) {
    return __awaiter(this, void 0, void 0, function () {
        var tf, unsupervised, _a, _b, cv, groups, scoring, scores, result, _c, _d, _e, trainIndex, testIndex, score, X_train, X_test, y_train, y_test, e_1_1;
        var e_1, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    tf = getBackend();
                    unsupervised = y == null || (params == null && !isScikit1D(y));
                    if (unsupervised) {
                        params = params !== null && params !== void 0 ? params : y;
                    }
                    _a = params !== null && params !== void 0 ? params : {}, _b = _a.cv, cv = _b === void 0 ? new KFold() : _b, groups = _a.groups, scoring = _a.scoring;
                    if (scoring == null) {
                        assert('function' === typeof estimator.score, 'crossValScore(estimator,[X,y],params): Either params.scoring or estimator.score(X,y) must be defined.');
                        scoring = estimator.score;
                    }
                    scores = [];
                    scoring = scoring.bind(estimator);
                    result = undefined;
                    tf.engine().startScope();
                    _g.label = 1;
                case 1:
                    _g.trys.push([1, , 13, 14]);
                    X = convertToTensor2D(X);
                    if (!unsupervised) {
                        y = convertToTensor1D(y);
                    }
                    _g.label = 2;
                case 2:
                    _g.trys.push([2, 10, 11, 12]);
                    _c = __values(cv.split(X, y, groups)), _d = _c.next();
                    _g.label = 3;
                case 3:
                    if (!!_d.done) return [3 /*break*/, 9];
                    _e = _d.value, trainIndex = _e.trainIndex, testIndex = _e.testIndex;
                    score = void 0;
                    X_train = X.gather(trainIndex);
                    X_test = X.gather(testIndex);
                    if (!unsupervised) return [3 /*break*/, 5];
                    return [4 /*yield*/, estimator.fit(X_train)];
                case 4:
                    _g.sent();
                    score = scoring(X_test);
                    return [3 /*break*/, 7];
                case 5:
                    y_train = y.gather(trainIndex);
                    y_test = y.gather(testIndex);
                    return [4 /*yield*/, estimator.fit(X_train, y_train)];
                case 6:
                    _g.sent();
                    score = scoring(X_test, y_test);
                    y_train.dispose();
                    y_test.dispose();
                    _g.label = 7;
                case 7:
                    scores.push(score);
                    trainIndex.dispose();
                    testIndex.dispose();
                    X_train.dispose();
                    X_test.dispose();
                    _g.label = 8;
                case 8:
                    _d = _c.next();
                    return [3 /*break*/, 3];
                case 9: return [3 /*break*/, 12];
                case 10:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 12];
                case 11:
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 12: return [2 /*return*/, (result = tf.stack(scores))];
                case 13:
                    tf.engine().endScope(result);
                    return [7 /*endfinally*/];
                case 14: return [2 /*return*/];
            }
        });
    });
}
