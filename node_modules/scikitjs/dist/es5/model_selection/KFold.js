/**
*  @license
* Copyright 2022, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { assert } from '../typesUtils';
import * as randUtils from '../randUtils';
import { getLength } from '../utils';
import { getBackend } from '../tf-singleton';
/**
 * K-Fold cross-validator
 *
 * Generates train and test indices to split data in train/test subsets.
 * To generate these subsets, the dataset is split into k (about) evenly
 * sized chunks of consecutive elements. Each split takes another chunk
 * as test data and the remaining chunks are combined to be the training
 * data.
 *
 * Optionally, the indices can be shuffled before splitting it into chunks
 * (disabled by default).
 *
 * @example
 * ```js
 * import { KFold } from 'scikitjs'
 *
 * const kf = new KFold({ nSplits: 3 })
 *
 * const X = tf.range(0, 7).reshape([7, 1]) as Tensor2D
 *
 * console.log( 'nSplits:', kf.getNumSplits(X) )
 *
 * for (const { trainIndex, testIndex } of kf.split(X) )
 * {
 *   try {
 *     console.log( 'train:', trainIndex.toString() )
 *     console.log( 'test:',   testIndex.toString() )
 *   }
 *   finally {
 *     trainIndex.dispose()
 *      testIndex.dispose()
 *   }
 * }
 * ```
 */
var KFold = /** @class */ (function () {
    function KFold(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.nSplits, nSplits = _c === void 0 ? 5 : _c, _d = _b.shuffle, shuffle = _d === void 0 ? false : _d, randomState = _b.randomState;
        nSplits = Number(nSplits);
        assert(Number.isInteger(nSplits) && nSplits > 1, 'new KFold({nSplits}): nSplits must be an int greater than 1.');
        this.tf = getBackend();
        this.nSplits = nSplits;
        this.shuffle = Boolean(shuffle);
        this.randomState = randomState;
        this.name = 'KFold';
    }
    KFold.prototype.getNumSplits = function () {
        return this.nSplits;
    };
    KFold.prototype.split = function (X, y, groups) {
        var _a, nSplits, shuffle, randomState, nSamples, range, i, rng, chunkBase, remainder, offset, chunk, train, test_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = this, nSplits = _a.nSplits, shuffle = _a.shuffle, randomState = _a.randomState;
                    nSamples = getLength(X);
                    assert(nSplits <= nSamples, 'KFold({nSplits})::split(X): nSplits must not be greater than X.shape[0].');
                    if (y != null) {
                        assert(nSamples === getLength(y), 'KFold::split(X,y): X.shape[0] must equal y.shape[0].');
                    }
                    if (groups != null) {
                        assert(nSamples === getLength(groups), 'KFold::split(X,y,groups): X.shape[0] must equal groups.shape[0].');
                    }
                    range = new Int32Array(nSamples);
                    for (i = 0; i < range.length; i++) {
                        range[i] = i;
                    }
                    if (shuffle) {
                        rng = randUtils.createRng(randomState);
                        randUtils.shuffle(rng)(range);
                    }
                    chunkBase = Math.floor(nSamples / nSplits);
                    remainder = nSamples % nSplits;
                    offset = 0;
                    _b.label = 1;
                case 1:
                    if (!(offset < nSamples)) return [3 /*break*/, 3];
                    chunk = remainder-- > 0 ? chunkBase + 1 : chunkBase;
                    train = new Int32Array(nSamples - chunk);
                    train.set(range.subarray(0, offset), 0);
                    train.set(range.subarray(offset + chunk), offset);
                    test_1 = range.slice(offset, offset + chunk);
                    return [4 /*yield*/, {
                            trainIndex: this.tf.tensor1d(train, 'int32'),
                            testIndex: this.tf.tensor1d(test_1, 'int32')
                        }];
                case 2:
                    _b.sent();
                    offset += chunk;
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    return KFold;
}());
export { KFold };
