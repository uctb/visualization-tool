/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { KNeighborsBase } from './KNeighborsBase';
import { convertToNumericTensor2D, convertToTensor1D } from '../utils';
import { polyfillUnique } from '../tfUtils';
import { accuracy } from '../model_selection/scorers';
import { getBackend } from '../tf-singleton';
/**
 * K-Nearest neighbor regressor.
 *
 * @example
 * ```js
 * import {KNeighborsRegressor} from 'scikitjs'
 *
 * let X = [[0], [1], [2], [3]]
 * let y = [0, 0, 1, 1]
 *
 * let knn = new KNeighborsRegressor(nNeighbor)
 *
 * await knn.fit(X, y)
 *
 * knn.predict([[1.5]]).print()
 * ```
 */
var KNeighborsClassifier = /** @class */ (function (_super) {
    __extends(KNeighborsClassifier, _super);
    function KNeighborsClassifier() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.score = accuracy;
        _this.name = 'KNeighborsClassifier';
        return _this;
    }
    /**
     * Applies this mdodel to predict the class probabilities of each given sample.
     *
     * @param X The samples for which the targets are to be predicted,
     *          where `X[i,j]` is the (j+1)-th feature of the (i+1)-th
     *          sample.
     * @param Y The predicted class probabilities `Y` where `Y[i,j]` is the
     *          predicted probability of sample `X[i,:]` having the to belong
     *          to class with index `j`.
     */
    KNeighborsClassifier.prototype.predictProba = function (X) {
        var _a;
        var _b = this._getFitParams(), neighborhood = _b.neighborhood, y = _b.y, nNeighbors = _b.nNeighbors, weightsFn = _b.weightsFn;
        var _c = __read((_a = this.classes_) === null || _a === void 0 ? void 0 : _a.shape, 1), nClasses = _c[0];
        var tf = getBackend();
        return tf.tidy(function () {
            var _X = convertToNumericTensor2D(X);
            var nSamples = _X.shape[0];
            var _a = neighborhood.kNearest(nNeighbors, _X), distances = _a.distances, indices = _a.indices;
            var labels = y.gather(indices);
            var weight = weightsFn(distances);
            var oneHot = tf.oneHot(labels, nClasses);
            return tf
                .mul(oneHot.reshape([nSamples, nNeighbors, nClasses]), weight.reshape([nSamples, nNeighbors, 1]))
                .sum(1);
        });
    };
    /**
     * Applies this mdodel to predict the class of each given sample.
     *
     * @param X The samples for which the targets are to be predicted,
     *          where `X[i,j]` is the (j+1)-th feature of the (i+1)-th
     *          sample.
     * @param y The predicted targets `y` where `y[i]` is the prediction
     *          for sample `X[i,:]`
     */
    KNeighborsClassifier.prototype.predict = function (X) {
        var _this = this;
        var classes = this.classes_;
        var tf = getBackend();
        return tf.tidy(function () {
            var probs = _this.predictProba(X);
            var labels = probs.argMax(1);
            return classes.gather(labels);
        });
    };
    KNeighborsClassifier.prototype.fit = function (X, labels) {
        return __awaiter(this, void 0, void 0, function () {
            var tf, _a, values, indices;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        tf = getBackend();
                        _a = tf.tidy(function () {
                            var _labels = convertToTensor1D(labels);
                            polyfillUnique(tf);
                            return tf.unique(_labels);
                        }), values = _a.values, indices = _a.indices;
                        return [4 /*yield*/, _super.prototype.fit.call(this, X, indices)];
                    case 1:
                        _b.sent();
                        this.classes_ = values;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    return KNeighborsClassifier;
}(KNeighborsBase));
export { KNeighborsClassifier };
