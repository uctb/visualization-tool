/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { assert } from '../typesUtils';
import * as randUtils from '../randUtils';
import { alea } from '../randUtils';
import { CappedMaxHeap } from './CappedMaxHeap';
import { getBackend } from '../tf-singleton';
var child = function (parent) { return (parent << 1) + 1; };
var parent = function (child) { return (child - 1) >> 1; };
/**
 * Computes the smallest integral power of two
 * that is larger than or equal to a given number.
 * Returns at least one.
 *
 * @param int32 A number in the range [0, 2**30].
 * @returns An integeral power of 2 `x` such that `int32 <= x`.
 */
var ceilPow2 = function (int32) {
    assert(0 <= int32 && int32 <= 1073741824, 'ceilPow2(x): x must be in range [0, 1<<30].');
    int32 = Math.ceil(int32);
    int32 = Math.max(int32, 1);
    return 2147483648 >>> (-1 + Math.clz32(int32 - 1));
};
/**
 * A {@link Neighborhood} implementation using a kd-tree as data structure.
 * Instead of an object-oriented representation, the implementation uses an
 * inorder array-based representation of the tree, similar to binary heaps.
 * The tree is always balanced. It is constructed by recursively spliting
 * up the largest dimension of the axis-aligned bounding box of the remaining
 * set of points.
 */
var KdTree = /** @class */ (function () {
    function KdTree(nSamples, nFeatures, metric, points, bBoxes, offsets, indices) {
        this.tf = getBackend();
        this._nSamples = nSamples;
        this._nFeatures = nFeatures;
        this._metric = metric;
        this._points = points;
        this._bBoxes = bBoxes;
        this._offsets = offsets;
        this._indices = indices;
        Object.freeze(this);
    }
    /**
     * Asynchronously builds a {@link KdTree}.
     */
    KdTree.build = function (_a) {
        var metric = _a.metric, entries = _a.entries, _b = _a.leafSize, leafSize = _b === void 0 ? 16 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var _c, nSamples, nFeatures, indices, i, data, points, nLeafs, nNodes, leaf0, offsets, bBoxes, randInt, swapIndices, buildTree, swapData, perm, i, j, k;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        assert(1 < leafSize, 'new KdTree({leafSize=16}): leafSize must be a positive number.');
                        assert('function' === typeof metric.minDistToBBox, 'new KdTree({metric}): metric must implement `minDistToBBox` function.');
                        _c = __read(entries.shape, 2), nSamples = _c[0], nFeatures = _c[1];
                        indices = new Int32Array(nSamples);
                        for (i = 0; i < nSamples; i++) {
                            indices[i] = i;
                        }
                        return [4 /*yield*/, entries.data()];
                    case 1:
                        data = (_d.sent()).slice();
                        points = Array.from(indices, function (_, i) {
                            return data.subarray(nFeatures * i, nFeatures * ++i);
                        });
                        nLeafs = ceilPow2(nSamples / leafSize);
                        nNodes = nLeafs * 2 - 1;
                        leaf0 = nNodes - nLeafs;
                        offsets = new Int32Array(nLeafs + 1);
                        bBoxes = (function () {
                            // Make all bounding boxes use one ArrayBuffer to reduce cache misses.
                            var n = nFeatures * 2;
                            var flat = new Float32Array(nNodes * n);
                            var bBoxes = [];
                            for (var i = 0; i < nNodes;) {
                                bBoxes.push(flat.subarray(n * i, n * ++i));
                            }
                            return bBoxes;
                        })();
                        randInt = randUtils.randInt(alea("KdTree[".concat(nSamples, ",").concat(nFeatures, "]")));
                        swapIndices = function (i, j) {
                            var t = indices[i];
                            indices[i] = indices[j];
                            indices[j] = t;
                        };
                        buildTree = function (node, from, until) {
                            // COMPUTE BOUNDING BOX
                            // --------------------
                            var bBox = bBoxes[node];
                            for (var i = 0; i < bBox.length; i++) {
                                bBox[i] = i % 2 ? -Infinity : +Infinity;
                            }
                            for (var i = from; i < until; i++) {
                                var j = nFeatures * indices[i];
                                for (var k = 0; k < bBox.length;) {
                                    var djk = data[j + (k >>> 1)];
                                    bBox[k] = Math.min(bBox[k++], djk);
                                    bBox[k] = Math.max(bBox[k++], djk);
                                }
                            }
                            // 1: LEAF CASE
                            // ---------
                            if (leaf0 <= node) {
                                var leaf = node - leaf0;
                                offsets[leaf] = from;
                                offsets[leaf + 1] = until;
                                return;
                            }
                            // 2: BRANCH CASE
                            // --------------
                            // 2.1: Determine Split Axis
                            // -------------------------
                            // Choose largest side of bounding box as axis to split.
                            var axis = (function () {
                                var axis = 0;
                                var dMax = -Infinity;
                                for (var i = bBox.length; i > 0;) {
                                    var di = bBox[--i] - bBox[--i];
                                    if (di > dMax) {
                                        dMax = di;
                                        axis = i >>> 1;
                                    }
                                }
                                return axis;
                            })();
                            var mid = (from + until) >>> 1;
                            // 2.2: Split Along `axis`
                            // -----------------------
                            // Use quick-select to split `points` along `axis` in half
                            for (var pos = from, end = until;;) {
                                var threshold = data[nFeatures * indices[randInt(pos, end)] + axis];
                                var l = pos;
                                var r = pos;
                                for (var i = pos; i < end; i++) {
                                    var pi = data[nFeatures * indices[i] + axis];
                                    if (pi <= threshold) {
                                        swapIndices(i, r);
                                        if (pi < threshold) {
                                            swapIndices(l++, r);
                                        }
                                        r++;
                                    }
                                }
                                if (l > mid)
                                    end = l;
                                else if (r < mid)
                                    pos = r;
                                else
                                    break;
                            }
                            // 2.3: Recursion
                            // --------------
                            var c = child(node);
                            buildTree(c, from, mid);
                            buildTree(c + 1, mid, until);
                        };
                        buildTree(0, 0, nSamples);
                        swapData = function (i, j) {
                            i *= nFeatures;
                            j *= nFeatures;
                            for (var end = i + nFeatures; i < end; i++, j++) {
                                var d = data[i];
                                data[i] = data[j];
                                data[j] = d;
                            }
                        };
                        // apply permutations (given by indices) to data
                        for (perm = indices.slice(), i = 0; i < nSamples; i++) {
                            // permutation cycle
                            for (j = i;;) {
                                k = perm[j];
                                perm[j] = j;
                                if (k === i) {
                                    break;
                                }
                                swapData(j, (j = k));
                            }
                        }
                        return [2 /*return*/, new KdTree(nSamples, nFeatures, metric, points, bBoxes, offsets, indices)];
                }
            });
        });
    };
    KdTree.prototype.kNearest = function (k, queryPoints) {
        var _a = this, _nSamples = _a._nSamples, _nFeatures = _a._nFeatures, _metric = _a._metric, _points = _a._points, _bBoxes = _a._bBoxes, _offsets = _a._offsets, _indices = _a._indices;
        k = Math.min(k, _nSamples);
        var _b = __read(queryPoints.shape, 2), nQueries = _b[0], nDim = _b[1];
        assert(_nFeatures === nDim, 'KNeighbors: X_train.shape[1] must equal X_predict.shape[1].');
        // result data
        var dists = new Float32Array(nQueries * k);
        var indxs = new Int32Array(nQueries * k);
        // index of the left-most child
        var leaf0 = parent(_bBoxes.length - 1) + 1;
        if (0 < k && 0 < nQueries) {
            var query = queryPoints.dataSync();
            var heap_1;
            var queryPt_1;
            var knn_1 = function (node, minDist) {
                if (minDist >= heap_1.maxKey) {
                    // skip if heap contains k points guaranteed to be closer
                    return;
                }
                if (node < leaf0) {
                    // BRANCH CASE
                    // -----------
                    // Start searching in closer child.
                    var c = child(node);
                    var dist0 = _metric.minDistToBBox(queryPt_1, _bBoxes[c]);
                    var dist1 = _metric.minDistToBBox(queryPt_1, _bBoxes[c + 1]);
                    if (dist0 <= dist1) {
                        knn_1(c, dist0);
                        knn_1(c + 1, dist1);
                    }
                    else {
                        knn_1(c + 1, dist1);
                        knn_1(c, dist0);
                    }
                }
                else {
                    // LEAF CASE
                    // ---------
                    // Enqueue all nodes in heap.
                    node -= leaf0;
                    var from = _offsets[node];
                    var until = _offsets[node + 1];
                    for (var i = from; i < until; i++) {
                        var dist = _metric.distance(queryPt_1, _points[i]);
                        heap_1.add(dist, _indices[i]);
                    }
                }
            };
            for (var q = 0; q < nQueries; q++) {
                queryPt_1 = query.subarray(nDim * q, nDim * (q + 1));
                var off = k * q;
                var end = k + off;
                heap_1 = new CappedMaxHeap(dists.subarray(off, end), indxs.subarray(off, end));
                knn_1(0, _metric.minDistToBBox(queryPt_1, _bBoxes[0]));
            }
        }
        // Current implementation does not support backpropagation
        // through `dists`. This can easily supported by recomputing
        // the distances using `_metric.tensorDistance` in the end.
        // TODO: Add `distanceBackprop: true | false` option to
        // KNeighborsBaseParams and add backpropagation support
        // to KdTree.
        return {
            distances: this.tf.tensor2d(dists, [nQueries, k], 'float32'),
            indices: this.tf.tensor2d(indxs, [nQueries, k], 'int32')
        };
    };
    return KdTree;
}());
export { KdTree };
