/**
*  @license
* Copyright 2022, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import * as fc from 'fast-check';
import { alea } from '../randUtils';
import { setBackend } from '../tf-singleton';
import * as tf from '@tensorflow/tfjs';
import { lhs, shuffle } from '../randUtils';
import { minkowskiMetric } from './Metric';
import { polyfillUnique } from '../tfUtils';
import '../jestTensorMatchers';
setBackend(tf);
export function neighborhoodGenericTests(name, buildNeighborhood) {
    var _this = this;
    describe("".concat(name, " [generic tests]"), function () {
        var e_1, _a;
        var _loop_1 = function (p) {
            var numRuns = 128;
            var metric = minkowskiMetric(p);
            var anyFloat = function () { return fc.double(-(Math.pow(2, 16)), +(Math.pow(2, 16))); };
            it("kNearest(1, ...) returns distinct points as closest to themselves { metric: ".concat(metric.name, " }"), function () { return __awaiter(_this, void 0, void 0, function () {
                var anyDistinctPoints, testBody;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            anyDistinctPoints = function () {
                                return fc
                                    .tuple(fc.nat(256), fc.nat(4), fc.string(), anyFloat(), anyFloat())
                                    .chain(function (_a) {
                                    var _b = __read(_a, 5), nSamples = _b[0], nDim = _b[1], seed = _b[2], scale = _b[3], offset = _b[4];
                                    ++nSamples;
                                    ++nDim;
                                    var rng = alea(seed);
                                    var entries = lhs(rng)(nSamples, nDim).map(function (row) {
                                        return Array.from(row, function (x) { return (x - 0.5) * scale + offset; });
                                    });
                                    var idx = new Int32Array(nSamples);
                                    for (var i = 0; i < nSamples; i++) {
                                        idx[i] = i;
                                    }
                                    shuffle(rng)(idx);
                                    return fc
                                        .nat(nSamples)
                                        .map(function (nQueries) { return [
                                        tf.tensor2d(entries),
                                        tf.tensor1d(idx.subarray(0, ++nQueries))
                                    ]; });
                                });
                            };
                            testBody = function (_a) {
                                var _b = __read(_a, 2), entries = _b[0], queryIdx = _b[1];
                                return __awaiter(_this, void 0, void 0, function () {
                                    var queries, neighborhood, _c, distances, indices, nQueries;
                                    return __generator(this, function (_d) {
                                        switch (_d.label) {
                                            case 0:
                                                tf.engine().startScope();
                                                _d.label = 1;
                                            case 1:
                                                _d.trys.push([1, , 3, 4]);
                                                queries = entries.gather(queryIdx);
                                                return [4 /*yield*/, buildNeighborhood({ entries: entries, metric: metric })];
                                            case 2:
                                                neighborhood = _d.sent();
                                                _c = neighborhood.kNearest(1, queries), distances = _c.distances, indices = _c.indices;
                                                nQueries = queries.shape[0];
                                                expect(distances.abs().arraySync()).toEqual(new Array(nQueries).fill([0]));
                                                expect(indices.arraySync()).toEqual(queryIdx.reshape([nQueries, 1]).arraySync());
                                                return [3 /*break*/, 4];
                                            case 3:
                                                tf.engine().endScope();
                                                entries.dispose();
                                                queryIdx.dispose();
                                                return [7 /*endfinally*/];
                                            case 4: return [2 /*return*/];
                                        }
                                    });
                                });
                            };
                            tf.engine().startScope();
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, , 3, 4]);
                            return [4 /*yield*/, fc.assert(fc.asyncProperty(anyDistinctPoints(), testBody), {
                                    numRuns: numRuns
                                })];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            tf.engine().endScope();
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
            it("kNearest(k, ...) returns nearest k points { metric: ".concat(metric.name, " }"), function () { return __awaiter(_this, void 0, void 0, function () {
                var anyPoints, anyInput, testBody;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            anyPoints = function (nSamples, ndim) {
                                return fc
                                    .array(fc.array(anyFloat(), { minLength: ndim, maxLength: ndim }), { minLength: nSamples, maxLength: nSamples })
                                    .map(tf.tensor);
                            };
                            anyInput = function () {
                                return fc
                                    .tuple(fc.nat(256), fc.nat(8), fc.nat(4))
                                    .chain(function (_a) {
                                    var _b = __read(_a, 3), nSamples = _b[0], nQueries = _b[1], nDim = _b[2];
                                    ++nSamples;
                                    ++nQueries;
                                    ++nDim;
                                    return fc.tuple(anyPoints(nSamples, nDim), anyPoints(nQueries, nDim), fc.nat(nSamples - 1).map(function (k) { return ++k; }));
                                });
                            };
                            polyfillUnique(tf);
                            testBody = function (_a) {
                                var _b = __read(_a, 3), entries = _b[0], queries = _b[1], k = _b[2];
                                return __awaiter(_this, void 0, void 0, function () {
                                    var neighborhood, nSamples, nQueries, _c, distances, indices, dists, indxs, queryPts, i, allDist, mask, maxDist;
                                    return __generator(this, function (_d) {
                                        switch (_d.label) {
                                            case 0:
                                                tf.engine().startScope();
                                                _d.label = 1;
                                            case 1:
                                                _d.trys.push([1, , 3, 4]);
                                                return [4 /*yield*/, buildNeighborhood({ entries: entries, metric: metric })];
                                            case 2:
                                                neighborhood = _d.sent();
                                                nSamples = entries.shape[0];
                                                nQueries = queries.shape[0];
                                                _c = neighborhood.kNearest(k, queries), distances = _c.distances, indices = _c.indices;
                                                expect(distances.shape).toEqual([nQueries, k]);
                                                expect(indices.shape).toEqual([nQueries, k]);
                                                dists = distances.unstack();
                                                indxs = indices.unstack();
                                                queryPts = queries.unstack();
                                                for (i = 0; i < nQueries; i++) {
                                                    tf.engine().startScope();
                                                    try {
                                                        allDist = metric.tensorDistance(entries, queryPts[i]);
                                                        // make sure distances match indices
                                                        expect(dists[i]).toBeAllCloseTo(allDist.gather(indxs[i]), {
                                                            broadcast: false
                                                        });
                                                        // make sure no duplicate indices are returned
                                                        expect(tf.unique(indxs[i]).values).toBeAllCloseTo(indxs[i], {
                                                            rtol: 0,
                                                            atol: 0,
                                                            broadcast: false
                                                        });
                                                        mask = tf.scatterND(indxs[i].reshape([-1, 1]), tf.ones([k], 'bool'), [nSamples]);
                                                        maxDist = dists[i].max();
                                                        expect(allDist).toBeAllGreaterOrClose(tf.where(mask, 0, maxDist), { broadcast: false });
                                                    }
                                                    finally {
                                                        tf.engine().endScope();
                                                    }
                                                }
                                                return [3 /*break*/, 4];
                                            case 3:
                                                tf.engine().endScope();
                                                return [7 /*endfinally*/];
                                            case 4: return [2 /*return*/];
                                        }
                                    });
                                });
                            };
                            tf.engine().startScope();
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, , 3, 4]);
                            return [4 /*yield*/, fc.assert(fc.asyncProperty(anyInput(), testBody), { numRuns: numRuns })];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            tf.engine().endScope();
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
        };
        try {
            for (var _b = __values([1, 2, Infinity]), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                _loop_1(p);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
