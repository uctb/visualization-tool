/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { BruteNeighborhood } from './BruteNeighborhood';
import { minkowskiMetric } from './Metric';
import { convertToNumericTensor1D, convertToNumericTensor2D } from '../utils';
import { assert } from '../typesUtils';
import { KdTree } from './KdTree';
import { getBackend } from '../tf-singleton';
import { Serialize } from '../simpleSerializer';
var WEIGHTS_FUNCTIONS = {
    uniform: function (distances) {
        var tf = getBackend();
        var shape = distances.shape;
        return tf.fill(shape, 1 / shape[1]);
    },
    distance: function (distances) {
        var tf = getBackend();
        return tf.tidy(function () {
            // scale inverse distances by min. to avoid `1/tinyVal == Infinity`
            var min = distances.min(1, /*keepDims=*/ true);
            var invDist = tf.divNoNan(min.toFloat(), distances);
            var is0 = distances.lessEqual(0).toFloat();
            // avoid div by 0 by using `1/0 == 1` and `1/(x!=0) == 0` instead
            var weights = tf.where(min.lessEqual(0), is0, invDist);
            var wsum = weights.sum(1, /*keepDims=*/ true);
            return weights.div(wsum);
        });
    }
};
var METRICS = {
    minkowski: function (p) { return minkowskiMetric(p); },
    manhattan: function () { return minkowskiMetric(1); },
    euclidean: function () { return minkowskiMetric(2); },
    chebyshev: function () { return minkowskiMetric(Infinity); }
};
var ALGORITHMS = {
    kdTree: KdTree.build,
    brute: function (params) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, new BruteNeighborhood(params)];
    }); }); },
    auto: function (params) {
        return 'function' === typeof params.metric.minDistToBBox
            ? ALGORITHMS.kdTree(params)
            : ALGORITHMS.brute(params);
    }
};
/**
 * Common superclass for {@link KNeighborsRegressor} and {@link KNeighborsClassifier}.
 * Handles common constructor parameters and fitting.
 */
var KNeighborsBase = /** @class */ (function (_super) {
    __extends(KNeighborsBase, _super);
    function KNeighborsBase(params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this) || this;
        Object.assign(_this, params);
        return _this;
    }
    KNeighborsBase.prototype._getFitParams = function () {
        var _a = this, _neighborhood = _a._neighborhood, _y = _a._y, _b = _a.nNeighbors, nNeighbors = _b === void 0 ? 5 : _b, _c = _a.weights, weights = _c === void 0 ? 'uniform' : _c;
        assert(0 <= nNeighbors && nNeighbors % 1 === 0, 'KNeighbors({nNeighbors})::predict(X): nNeighbors must be a positive int.');
        assert(Object.keys(WEIGHTS_FUNCTIONS).includes(weights), 'KNeighbors({weights})::predict(X): invalid weights.');
        assert(undefined != _neighborhood && undefined != _y, 'KNeighbors::predict(X): model not trained yet. Call `await fit(x, y)` first.');
        var weightsFn = WEIGHTS_FUNCTIONS[weights];
        // make sure TypeScript knows that neighborhood and y are not undefined
        return {
            nNeighbors: nNeighbors,
            weightsFn: weightsFn,
            neighborhood: _neighborhood,
            y: _y
        };
    };
    /**
     * Async function. Trains this model using the given features and targets.
     *
     * @param X The features of each training sample, where `X[i,j]` is the
     *          (j+1)-th feature of (i+1)-th sample.
     * @param y The target of each training sample, where `y[i]` the the
     *          target of the (i+1)-th sample.
     */
    KNeighborsBase.prototype.fit = function (X, y) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, algorithm, _c, metric, _d, p, leafSize, metricFn, entries, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _a = this, _b = _a.algorithm, algorithm = _b === void 0 ? 'auto' : _b, _c = _a.metric, metric = _c === void 0 ? 'minkowski' : _c, _d = _a.p, p = _d === void 0 ? 2 : _d, leafSize = _a.leafSize;
                        assert(Object.keys(METRICS).includes(metric), 'KNeighbors({metric}).fit(X,y): invalid metric.');
                        assert(Object.keys(ALGORITHMS).includes(algorithm), 'KNeighbors({algorithm}).fit(X,y): invalid algorithm.');
                        metricFn = METRICS[metric](p);
                        entries = convertToNumericTensor2D(X);
                        _e = this;
                        return [4 /*yield*/, ALGORITHMS[algorithm]({
                                entries: entries,
                                metric: metricFn,
                                leafSize: leafSize
                            })];
                    case 1:
                        _e._neighborhood = _f.sent();
                        this._y = convertToNumericTensor1D(y);
                        return [2 /*return*/, this];
                }
            });
        });
    };
    KNeighborsBase.SUPPORTED_ALGORITHMS = Object.freeze(Object.keys(ALGORITHMS));
    return KNeighborsBase;
}(Serialize));
export { KNeighborsBase };
