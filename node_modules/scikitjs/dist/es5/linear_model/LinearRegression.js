/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { SGDRegressor } from './SgdRegressor';
import { getBackend } from '../tf-singleton';
/*
Next steps:
1. Pass next 5 tests scikit-learn
2. Write closed form solution (save that as linear regression, and move this to sgdregressor)
*/
/** Linear Least Squares
 * @example
 * ```js
 * import { LinearRegression } from 'scikitjs'
 *
 * let X = [
 *  [1, 2],
 *  [1, 4],
 *  [2, 6],
 *  [3, 5],
 *  [10, 20]
 * ]
 * let y = [3, 5, 8, 8, 30]
 * const lr = new LinearRegression({ fitIntercept: false })
  await lr.fit(X, y)
  lr.coef.print() // probably around [1, 1]
 * ```
 */
var LinearRegression = /** @class */ (function (_super) {
    __extends(LinearRegression, _super);
    function LinearRegression(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.fitIntercept, fitIntercept = _c === void 0 ? true : _c, modelFitOptions = _b.modelFitOptions;
        var _this = this;
        var tf = getBackend();
        _this = _super.call(this, {
            modelCompileArgs: {
                optimizer: tf.train.adam(0.1),
                loss: tf.losses.meanSquaredError,
                metrics: ['mse']
            },
            modelFitArgs: __assign({ batchSize: 32, epochs: 1000, verbose: 0, callbacks: [
                    tf.callbacks.earlyStopping({ monitor: 'mse', patience: 30 })
                ] }, modelFitOptions),
            denseLayerArgs: {
                units: 1,
                useBias: Boolean(fitIntercept)
            },
            optimizerType: 'adam',
            lossType: 'meanSquaredError'
        }) || this;
        /** Useful for pipelines and column transformers to have a default name for transforms */
        _this.name = 'LinearRegression';
        return _this;
    }
    return LinearRegression;
}(SGDRegressor));
export { LinearRegression };
