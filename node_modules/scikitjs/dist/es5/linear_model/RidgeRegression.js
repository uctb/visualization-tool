/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { SGDRegressor } from './SgdRegressor';
import { getBackend } from '../tf-singleton';
/** Linear least squares with l2 regularization. */
var RidgeRegression = /** @class */ (function (_super) {
    __extends(RidgeRegression, _super);
    function RidgeRegression(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.fitIntercept, fitIntercept = _c === void 0 ? true : _c, _d = _b.alpha, alpha = _d === void 0 ? 0.01 : _d;
        var _this = this;
        var tf = getBackend();
        _this = _super.call(this, {
            modelCompileArgs: {
                optimizer: tf.train.adam(0.1),
                loss: tf.losses.meanSquaredError,
                metrics: ['mse']
            },
            modelFitArgs: {
                batchSize: 32,
                epochs: 1000,
                verbose: 0,
                callbacks: [
                    tf.callbacks.earlyStopping({ monitor: 'mse', patience: 50 })
                ]
            },
            denseLayerArgs: {
                units: 1,
                kernelRegularizer: tf.regularizers.l2({ l2: alpha }),
                useBias: Boolean(fitIntercept)
            },
            optimizerType: 'adam',
            lossType: 'meanSquaredError'
        }) || this;
        /** Useful for pipelines and column transformers to have a default name for transforms */
        _this.name = 'RidgeRegression';
        return _this;
    }
    return RidgeRegression;
}(SGDRegressor));
export { RidgeRegression };
