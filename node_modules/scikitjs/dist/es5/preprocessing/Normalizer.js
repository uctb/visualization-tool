/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { convertToNumericTensor2D } from '../utils';
import { isScikit2D, assert, isDataFrameInterface } from '../typesUtils';
import { TransformerMixin } from '../mixins';
import { getBackend } from '../tf-singleton';
/**
 * A Normalizer scales each *sample* by the $l_1$, $l_2$ or $max$ value in that sample.
 * If you imagine the input matrix as a 2D grid, then this is effectively a "horizontal" scaling (per-sample scaling)
 * as opposed to a StandardScaler which is a "vertical" scaling (per-feature scaling).
 *
 * The only input is what kind of norm you wish to scale by.
 *
 * @example
 * ```js
 * import { Normalizer } from 'scikitjs'
 *
 * const data = [
      [-1, 1],
      [-6, 6],
      [0, 10],
      [10, 20]
    ]
    const scaler = new Normalizer({ norm: 'l1' })
    const expected = scaler.fitTransform(scaler)
    const expectedValueAbove = [
      [-0.5, 0.5],
      [-0.5, 0.5],
      [0, 1],
      [0.33, 0.66]
    ]
 * ```
 */
var Normalizer = /** @class */ (function (_super) {
    __extends(Normalizer, _super);
    function Normalizer(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.norm, norm = _c === void 0 ? 'l2' : _c;
        var _this = _super.call(this) || this;
        /** Useful for pipelines and column transformers to have a default name for transforms */
        _this.name = 'Normalizer';
        _this.tf = getBackend();
        _this.norm = norm;
        _this.nFeaturesIn = 0;
        _this.featureNamesIn = [];
        return _this;
    }
    /**
     * Fits a Normalizer to the data
     */
    Normalizer.prototype.fit = function (X) {
        assert(isScikit2D(X), 'Data can not be converted to a 2D matrix.');
        var tensorArray = convertToNumericTensor2D(X);
        this.nFeaturesIn = tensorArray.shape[1];
        if (isDataFrameInterface(X)) {
            this.featureNamesIn = __spreadArray([], __read(X.columns), false);
        }
        return this;
    };
    /**
     * Transform the data using the Normalizer
     * */
    Normalizer.prototype.transform = function (X) {
        assert(isScikit2D(X), 'Data can not be converted to a 2D matrix.');
        var tensorArray = convertToNumericTensor2D(X);
        if (this.norm === 'l1') {
            var means_1 = this.tf.abs(tensorArray).sum(1).reshape([-1, 1]);
            return tensorArray.divNoNan(means_1);
        }
        if (this.norm === 'l2') {
            var means_2 = tensorArray.square().sum(1).sqrt().reshape([-1, 1]);
            return tensorArray.divNoNan(means_2);
        }
        // max case
        var means = this.tf.abs(tensorArray).max(1).reshape([-1, 1]);
        return tensorArray.divNoNan(means);
    };
    return Normalizer;
}(TransformerMixin));
export { Normalizer };
