/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { convertToNumericTensor2D } from '../utils';
import { assert, isDataFrameInterface, isScikit2D } from '../typesUtils';
import { tensorMax, turnZerosToOnes } from '../math';
import { TransformerMixin } from '../mixins';
import { getBackend } from '../tf-singleton';
/*
Next steps:
0. Write the maxabsScale function (takes in 1D and 2D arrays)
1. Support maxAbs property on object
2. Support streaming with partialFit
3. getFeatureNamesOut
*/
/** MaxAbsScaler scales the data by dividing by the max absolute value that it finds per feature.
 * It's a useful scaling if you wish to keep sparsity in your dataset.
 *
 * @example
 * ```js
 * import { MaxAbsScaler } from 'scikitjs'
 *
 * const scaler = new MaxAbsScaler()
   const data = [
     [-1, 5],
     [-0.5, 5],
     [0, 10],
     [1, 10]
   ]

   const expected = scaler.fitTransform(data)
   const above = [
    [-1, 0.5],
    [-0.5, 0.5],
    [0, 1],
    [1, 1]
   ]
 *
 * ```
*/
var MaxAbsScaler = /** @class */ (function (_super) {
    __extends(MaxAbsScaler, _super);
    function MaxAbsScaler() {
        var _this = _super.call(this) || this;
        /** Useful for pipelines and column transformers to have a default name for transforms */
        _this.name = 'MaxAbsScaler';
        _this.tf = getBackend();
        _this.scale = _this.tf.tensor1d([]);
        _this.nFeaturesIn = 0;
        _this.nSamplesSeen = 0;
        _this.featureNamesIn = [];
        return _this;
    }
    /**
     * Fits a MinMaxScaler to the data
     */
    MaxAbsScaler.prototype.fit = function (X) {
        assert(isScikit2D(X), 'Data can not be converted to a 2D matrix.');
        var tensorArray = convertToNumericTensor2D(X);
        var scale = tensorMax(tensorArray.abs(), 0, true);
        // Deal with 0 scale values
        this.scale = turnZerosToOnes(scale);
        this.nSamplesSeen = tensorArray.shape[0];
        this.nFeaturesIn = tensorArray.shape[1];
        if (isDataFrameInterface(X)) {
            this.featureNamesIn = __spreadArray([], __read(X.columns), false);
        }
        return this;
    };
    /**
     * Transform the data using the fitted scaler
     */
    MaxAbsScaler.prototype.transform = function (X) {
        assert(isScikit2D(X), 'Data can not be converted to a 2D matrix.');
        var tensorArray = convertToNumericTensor2D(X);
        var outputData = tensorArray.div(this.scale);
        return outputData;
    };
    /**
     * Inverse transform the data using the fitted scaler
     */
    MaxAbsScaler.prototype.inverseTransform = function (X) {
        assert(isScikit2D(X), 'Data can not be converted to a 2D matrix.');
        var tensorArray = convertToNumericTensor2D(X);
        var outputData = tensorArray.mul(this.scale);
        return outputData;
    };
    return MaxAbsScaler;
}(TransformerMixin));
export { MaxAbsScaler };
