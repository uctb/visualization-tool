/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { convertToNumericTensor2D } from '../utils';
import { isScikit2D, assert, isDataFrameInterface } from '../typesUtils';
import { tensorMin, tensorMax, turnZerosToOnes } from '../math';
import { TransformerMixin } from '../mixins';
import { getBackend } from '../tf-singleton';
/**
 * Transform features by scaling each feature to a given range.
 * This estimator scales and translates each feature individually such
 * that it is in the given range on the training set, e.g. between the maximum and minimum value.
 *
 * @example
 * ```js
 * import { MinMaxScaler } from 'scikitjs'
 *
 * const data = [
      [-1, 2],
      [-0.5, 6],
      [0, 10],
      [1, 18]
    ]
    const scaler = new MinMaxScaler()
    const expected = scaler.fitTransform(data)
    // const expected = [
    //  [0, 0],
    //  [0.25, 0.25],
    //  [0.5, 0.5],
    //  [1, 1]
    //]
    ```
 */
var MinMaxScaler = /** @class */ (function (_super) {
    __extends(MinMaxScaler, _super);
    function MinMaxScaler(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.featureRange, featureRange = _c === void 0 ? [0, 1] : _c;
        var _this = _super.call(this) || this;
        /** Useful for pipelines and column transformers to have a default name for transforms */
        _this.name = 'MinMaxScaler';
        _this.tf = getBackend();
        _this.featureRange = featureRange;
        _this.scale = _this.tf.tensor1d([]);
        _this.min = _this.tf.tensor1d([]);
        _this.dataMin = _this.tf.tensor1d([]);
        _this.dataMax = _this.tf.tensor1d([]);
        _this.dataRange = _this.tf.tensor1d([]);
        _this.nFeaturesIn = 0;
        _this.nSamplesSeen = 0;
        _this.featureNamesIn = [];
        return _this;
    }
    MinMaxScaler.prototype.isNumber = function (value) {
        return typeof value === 'number' && isFinite(value);
    };
    /**
     * Fits a MinMaxScaler to the data
     */
    MinMaxScaler.prototype.fit = function (X) {
        assert(isScikit2D(X), 'Data can not be converted to a 2D matrix.');
        assert(this.isNumber(this.featureRange[0]) &&
            this.isNumber(this.featureRange[1]) &&
            this.featureRange[0] < this.featureRange[1], 'featureRange needs to contain exactly two numbers where the first is less than the second');
        var tensorArray = convertToNumericTensor2D(X);
        var max = tensorMax(tensorArray, 0, true);
        var min = tensorMin(tensorArray, 0, true);
        var range = max.sub(min);
        this.scale = this.tf.div(this.featureRange[1] - this.featureRange[0], turnZerosToOnes(range));
        this.min = this.tf.sub(this.featureRange[0], min.mul(this.scale));
        this.dataMin = min;
        this.dataMax = max;
        this.dataRange = range;
        this.nSamplesSeen = tensorArray.shape[0];
        this.nFeaturesIn = tensorArray.shape[1];
        if (isDataFrameInterface(X)) {
            this.featureNamesIn = __spreadArray([], __read(X.columns), false);
        }
        return this;
    };
    /**
     * Transform the data using the fitted scaler
     * */
    MinMaxScaler.prototype.transform = function (X) {
        assert(isScikit2D(X), 'Data can not be converted to a 2D matrix.');
        var tensorArray = convertToNumericTensor2D(X);
        var outputData = tensorArray.mul(this.scale).add(this.min);
        return outputData;
    };
    /**
     * Inverse transform the data using the fitted scaler
     * */
    MinMaxScaler.prototype.inverseTransform = function (X) {
        assert(isScikit2D(X), 'Data can not be converted to a 2D matrix.');
        var tensorArray = convertToNumericTensor2D(X);
        var outputData = tensorArray.sub(this.min).div(this.scale);
        return outputData;
    };
    return MinMaxScaler;
}(TransformerMixin));
export { MinMaxScaler };
