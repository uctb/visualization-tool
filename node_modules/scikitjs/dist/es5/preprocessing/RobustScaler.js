/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { convertToNumericTensor2D } from '../utils';
import { isScikit2D, assert, isDataFrameInterface } from '../typesUtils';
import { turnZerosToOnes } from '../math';
import { TransformerMixin } from '../mixins';
import { quantileSeq } from 'mathjs';
import { getBackend } from '../tf-singleton';
/**
 * Transform features by scaling each feature to a given range.
 * This estimator scales and translates each feature individually such
 * that it is in the given range on the training set, e.g. between the maximum and minimum value.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isEmpty(value) {
    return (value === undefined ||
        value === null ||
        (isNaN(value) && typeof value !== 'string'));
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function removeMissingValuesFromArray(arr) {
    var values = arr.filter(function (val) {
        return !isEmpty(val);
    });
    return values;
}
/**
 * Scales the data but is robust to outliers. While StandardScaler will subtract the mean, and
 * divide by the variance, both of those measures are not robust to outliers. So instead of the mean
 * we use the median, and instead of the variance we use the Interquartile Range (which is the distance
 * between the quantile .25, and quantile .75).
 *
 * @example
 * ```js
 * import { RobustScaler } from 'scikitjs'
 *
    const X = [
      [1, -2, 2],
      [-2, 1, 3],
      [4, 1, -2]
    ]

    const scaler = new RobustScaler()
    scaler.fitTransform(X)

    const result = [
      [0, -2, 0],
      [-1, 0, 0.4],
      [1, 0, -1.6]
    ]
 * ```
 */
var RobustScaler = /** @class */ (function (_super) {
    __extends(RobustScaler, _super);
    function RobustScaler(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.quantileRange, quantileRange = _c === void 0 ? [25.0, 75.0] : _c, _d = _b.withCentering, withCentering = _d === void 0 ? true : _d, _e = _b.withScaling, withScaling = _e === void 0 ? true : _e;
        var _this = _super.call(this) || this;
        /** Useful for pipelines and column transformers to have a default name for transforms */
        _this.name = 'RobustScaler';
        _this.tf = getBackend();
        _this.scale = _this.tf.tensor1d([]);
        _this.center = _this.tf.tensor1d([]);
        _this.quantileRange = quantileRange;
        _this.withScaling = withScaling;
        _this.withCentering = withCentering;
        _this.nFeaturesIn = 0;
        _this.featureNamesIn = [];
        return _this;
    }
    RobustScaler.prototype.isNumber = function (value) {
        return typeof value === 'number' && isFinite(value);
    };
    RobustScaler.prototype.fit = function (X) {
        assert(isScikit2D(X), 'Data can not be converted to a 2D matrix.');
        assert(this.isNumber(this.quantileRange[0]) &&
            this.isNumber(this.quantileRange[1]), 'quantileRange values must be numbers');
        var lowPercentile = this.quantileRange[0];
        var highPercentile = this.quantileRange[1];
        assert(lowPercentile < highPercentile &&
            0 <= lowPercentile &&
            lowPercentile <= 100 &&
            0 <= highPercentile &&
            highPercentile <= 100, 'quantileRange numbers must be between 0 and 100');
        var tensorArray = convertToNumericTensor2D(X);
        var rowOrientedArray = tensorArray.transpose().arraySync();
        if (this.withCentering) {
            var quantiles = rowOrientedArray.map(function (arr) {
                return quantileSeq(removeMissingValuesFromArray(arr), 0.5);
            });
            this.center = this.tf.tensor1d(quantiles);
        }
        if (this.withScaling) {
            var quantiles = rowOrientedArray.map(function (arr) {
                return quantileSeq(removeMissingValuesFromArray(arr), [
                    lowPercentile / 100,
                    highPercentile / 100
                ]);
            });
            var scale = this.tf.tensor1d(quantiles.map(function (el) { return el[1] - el[0]; }));
            // But what happens if max = min, ie.. we are dealing with a constant vector?
            // In the case above, scale = max - min = 0 and we'll divide by 0 which is no bueno.
            // The common practice in cases where the vector is constant is to change the 0 elements
            // in scale to 1, so that the division doesn't fail. We do that below
            this.scale = turnZerosToOnes(scale);
        }
        this.nFeaturesIn = tensorArray.shape[1];
        if (isDataFrameInterface(X)) {
            this.featureNamesIn = __spreadArray([], __read(X.columns), false);
        }
        return this;
    };
    RobustScaler.prototype.transform = function (X) {
        assert(isScikit2D(X), 'Data can not be converted to a 2D matrix.');
        var tensorArray = convertToNumericTensor2D(X);
        if (this.withCentering) {
            tensorArray = tensorArray.sub(this.center);
        }
        if (this.withScaling) {
            tensorArray = tensorArray.div(this.scale);
        }
        return tensorArray;
    };
    RobustScaler.prototype.inverseTransform = function (X) {
        assert(isScikit2D(X), 'Data can not be converted to a 2D matrix.');
        var tensorArray = convertToNumericTensor2D(X);
        if (this.withScaling) {
            tensorArray = tensorArray.mul(this.scale);
        }
        if (this.withCentering) {
            tensorArray = tensorArray.add(this.center);
        }
        return tensorArray;
    };
    return RobustScaler;
}(TransformerMixin));
export { RobustScaler };
