"use strict";
/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.LassoRegression = void 0;
const SgdRegressor_1 = require("./SgdRegressor");
const tf_singleton_1 = require("../tf-singleton");
/** Linear Model trained with L1 prior as regularizer (aka the Lasso). */
class LassoRegression extends SgdRegressor_1.SGDRegressor {
    constructor({ fitIntercept = true, alpha = 1.0 } = {}) {
        let tf = (0, tf_singleton_1.getBackend)();
        super({
            modelCompileArgs: {
                optimizer: tf.train.adam(0.1),
                loss: tf.losses.meanSquaredError,
                metrics: ['mse']
            },
            modelFitArgs: {
                batchSize: 32,
                epochs: 1000,
                verbose: 0,
                callbacks: [
                    tf.callbacks.earlyStopping({ monitor: 'mse', patience: 50 })
                ]
            },
            denseLayerArgs: {
                units: 1,
                kernelRegularizer: tf.regularizers.l1({ l1: alpha }),
                useBias: Boolean(fitIntercept)
            },
            optimizerType: 'adam',
            lossType: 'meanSquaredError'
        });
        /** Useful for pipelines and column transformers to have a default name for transforms */
        this.name = 'LassoRegression';
    }
}
exports.LassoRegression = LassoRegression;
