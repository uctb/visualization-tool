"use strict";
/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializer = exports.getLoss = exports.optimizer = exports.sampleWithoutReplacement = exports.getLength = exports.arrayTo2DColumn = exports.convertScikit1DToArray = exports.convertScikit2DToArray = exports.arrayEqual = exports.tensorEqual = exports.shapeEqual = exports.convertToTensor = exports.convertToNumericTensor1D_2D = exports.convertToNumericTensor2D = exports.convertToTensor1D_2D = exports.convertToTensor2D = exports.convertToNumericTensor1D = exports.convertToTensor1D = exports.is1DArray = exports.zeros = void 0;
const typesUtils_1 = require("./typesUtils");
const tf_singleton_1 = require("./tf-singleton");
/**
 * Generates an array of dim (row x column) with inner values set to zero
 * @param row
 * @param column
 */
const zeros = (row, column) => {
    const zeroData = [];
    for (let i = 0; i < row; i++) {
        const colData = Array(column);
        for (let j = 0; j < column; j++) {
            colData[j] = 0;
        }
        zeroData.push(colData);
    }
    return zeroData;
};
exports.zeros = zeros;
/**
 * Checks if array is 1D
 * @param arr The array
 */
const is1DArray = (arr) => {
    if (typeof arr[0] == 'number' ||
        typeof arr[0] == 'string' ||
        typeof arr[0] == 'boolean') {
        return true;
    }
    else {
        return false;
    }
};
exports.is1DArray = is1DArray;
/**
 *
 * @param data Scikit1D One dimensional array of data
 * @returns Tensor1D. If you pass in something that isn't 1D, then it will throw an error.
 * This is the case with 2D Tensors as well. If you really want to reshape them then use tf.reshape
 */
function convertToTensor1D(data, dtype) {
    let tf = (0, tf_singleton_1.getBackend)();
    if ((0, typesUtils_1.isSeriesInterface)(data)) {
        // Do type inference if no dtype is passed, otherwise try to parse as that dtype
        return dtype
            ? data.tensor.asType(dtype)
            : data.tensor;
    }
    if ((0, typesUtils_1.isTensor)(data)) {
        if (data.shape.length === 1) {
            if (!dtype || data.dtype == dtype) {
                return data;
            }
            return data.asType(dtype);
        }
        else {
            throw new Error('ParamError: if data is a Tensor it must be a Tensor1D. If you really meant to reshape this tensor than use tf.reshape');
        }
    }
    return dtype ? tf.tensor1d(data, dtype) : tf.tensor1d(data);
}
exports.convertToTensor1D = convertToTensor1D;
function convertToNumericTensor1D(data, dtype) {
    const newTensor = convertToTensor1D(data, dtype);
    if (newTensor.dtype === 'string') {
        throw new Error("ParamError: data has string dtype, can't convert to numeric Tensor");
    }
    return newTensor;
}
exports.convertToNumericTensor1D = convertToNumericTensor1D;
function convertToTensor2D(data, dtype) {
    let tf = (0, tf_singleton_1.getBackend)();
    if ((0, typesUtils_1.isDataFrameInterface)(data)) {
        return dtype
            ? data.tensor.asType(dtype)
            : data.tensor;
    }
    if ((0, typesUtils_1.isTensor)(data)) {
        if (data.shape.length === 2) {
            if (!dtype || data.dtype == dtype) {
                return data;
            }
            return data.asType(dtype);
        }
        else {
            throw new Error('ParamError: if data is a Tensor it must be a Tensor2D. If you really meant to reshape this tensor than use tf.reshape');
        }
    }
    if (Array.isArray(data) && (0, typesUtils_1.isTypedArray)(data[0])) {
        const shape = (0, typesUtils_1.inferShape)(data);
        const newData = data.map((el) => Array.from(el));
        return dtype
            ? tf.tensor2d(newData, shape, dtype)
            : tf.tensor2d(newData, shape);
    }
    return dtype
        ? tf.tensor2d(data, undefined, dtype)
        : tf.tensor2d(data, undefined);
}
exports.convertToTensor2D = convertToTensor2D;
function convertToTensor1D_2D(data, dtype) {
    try {
        const new1DTensor = convertToTensor1D(data, dtype);
        return new1DTensor;
    }
    catch (e) {
        try {
            const new2DTensor = convertToTensor2D(data, dtype);
            return new2DTensor;
        }
        catch (newE) {
            throw new Error('ParamError: Can"t convert data into 1D or 2D tensor');
        }
    }
}
exports.convertToTensor1D_2D = convertToTensor1D_2D;
function convertToNumericTensor2D(data, dtype) {
    const newTensor = convertToTensor2D(data, dtype);
    if (newTensor.dtype === 'string') {
        throw new Error("ParamError: data has string dtype, can't convert to numeric Tensor");
    }
    return newTensor;
}
exports.convertToNumericTensor2D = convertToNumericTensor2D;
function convertToNumericTensor1D_2D(data, dtype) {
    const newTensor = convertToTensor1D_2D(data, dtype);
    if (newTensor.dtype === 'string') {
        throw new Error("ParamError: data has string dtype, can't convert to numeric Tensor");
    }
    return newTensor;
}
exports.convertToNumericTensor1D_2D = convertToNumericTensor1D_2D;
function convertToTensor(data, shape, dtype) {
    let tf = (0, tf_singleton_1.getBackend)();
    if ((0, typesUtils_1.isDataFrameInterface)(data)) {
        return data.tensor;
    }
    if ((0, typesUtils_1.isSeriesInterface)(data)) {
        return data.tensor;
    }
    if ((0, typesUtils_1.isTensor)(data)) {
        let newData = data;
        if (shape) {
            newData = newData.reshape(shape);
        }
        if (dtype) {
            newData = newData.asType(dtype);
        }
        return newData;
    }
    return tf.tensor(data, shape, dtype);
}
exports.convertToTensor = convertToTensor;
/**
 * Check that if two tensor are of same shape
 * @param tensor1
 * @param tensor2
 * @returns
 */
const shapeEqual = (tensor1, tensor2) => {
    const shape1 = tensor1.shape;
    const shape2 = tensor2.shape;
    if (shape1.length != shape2.length) {
        return false;
    }
    for (let i = 0; i < shape1.length; i++) {
        if (shape1[i] !== shape2[i]) {
            return false;
        }
    }
    return true;
};
exports.shapeEqual = shapeEqual;
/**
 * Check that two tensors are equal to within some additive tolerance.
 * @param tensor1
 * @param tensor2
 * @param
 */
const tensorEqual = (tensor1, tensor2, tol = 0) => {
    if (!(0, exports.shapeEqual)(tensor1, tensor2)) {
        throw new Error('tensor1 and tensor2 not of same shape');
    }
    let tf = (0, tf_singleton_1.getBackend)();
    return Boolean(tf.lessEqual(tf.max(tf.abs(tf.sub(tensor1, tensor2))), tol).dataSync()[0]);
};
exports.tensorEqual = tensorEqual;
const arrayEqual = (array, array2, tol = 0) => {
    if (!Array.isArray(array) && !Array.isArray(array2)) {
        return Math.abs(array - array2) <= tol;
    }
    if (array.length !== array2.length) {
        return false;
    }
    for (let i = 0; i < array.length; i++) {
        if (!(0, exports.arrayEqual)(array[i], array2[i], tol)) {
            return false;
        }
    }
    return true;
};
exports.arrayEqual = arrayEqual;
function convertScikit2DToArray(data) {
    if ((0, typesUtils_1.isDataFrameInterface)(data)) {
        return data.values;
    }
    if ((0, typesUtils_1.isTensor)(data)) {
        return data.arraySync();
    }
    return data;
}
exports.convertScikit2DToArray = convertScikit2DToArray;
function convertScikit1DToArray(data) {
    if ((0, typesUtils_1.isSeriesInterface)(data)) {
        return data.values;
    }
    if ((0, typesUtils_1.isTensor)(data)) {
        return data.arraySync();
    }
    return data;
}
exports.convertScikit1DToArray = convertScikit1DToArray;
function arrayTo2DColumn(array) {
    let newArray = [];
    for (let i = 0; i < array.length; i++) {
        newArray.push([array[i]]);
    }
    return newArray;
}
exports.arrayTo2DColumn = arrayTo2DColumn;
function getLength(X) {
    (0, typesUtils_1.assert)((0, typesUtils_1.isScikitVecOrMatrix)(X), "X isn't a Scikit2D or Scikit1D object");
    if ((0, typesUtils_1.isTensor)(X)) {
        return X.shape[0];
    }
    if ((0, typesUtils_1.isDataFrameInterface)(X) || (0, typesUtils_1.isSeriesInterface)(X)) {
        return X.size;
    }
    return X.length;
}
exports.getLength = getLength;
/**
 * Modified Fisher-Yates algorithm which takes
 * a seed and selects n random numbers from a
 * set of integers going from 0 to size-1
 */
function sampleWithoutReplacement(size, n, seed) {
    let tf = (0, tf_singleton_1.getBackend)();
    let curMap = new Map();
    let finalNumbs = [];
    let randoms = tf.randomUniform([n], 0, size, 'float32', seed).dataSync();
    for (let i = 0; i < randoms.length; i++) {
        randoms[i] = (randoms[i] * (size - i)) / size;
        let randInt = Math.floor(randoms[i]);
        let lastIndex = size - i - 1;
        if (curMap.get(randInt) === undefined) {
            curMap.set(randInt, randInt);
        }
        if (curMap.get(lastIndex) === undefined) {
            curMap.set(lastIndex, lastIndex);
        }
        let holder = curMap.get(lastIndex);
        curMap.set(lastIndex, curMap.get(randInt));
        curMap.set(randInt, holder);
        finalNumbs.push(curMap.get(lastIndex));
    }
    return finalNumbs;
}
exports.sampleWithoutReplacement = sampleWithoutReplacement;
function optimizer(opt) {
    let tf = (0, tf_singleton_1.getBackend)();
    switch (opt) {
        case 'sgd':
            return tf.train.sgd(0.1);
        case 'momentum':
            return tf.train.momentum(0.1, 0.9);
        case 'adadelta':
            return tf.train.adadelta();
        case 'adagrad':
            return tf.train.adagrad(0.1);
        case 'rmsprop':
            return tf.train.rmsprop(0.1);
        case 'adamax':
            return tf.train.adamax();
        case 'adam':
            return tf.train.adam();
    }
}
exports.optimizer = optimizer;
function getLoss(loss) {
    let tf = (0, tf_singleton_1.getBackend)();
    switch (loss) {
        case 'meanSquaredError':
            return tf.losses.meanSquaredError;
        case 'sigmoidCrossEntropy':
            return tf.losses.sigmoidCrossEntropy;
        case 'softmaxCrossEntropy':
            return tf.losses.softmaxCrossEntropy;
        case 'logLoss':
            return tf.losses.logLoss;
        case 'huberLoss':
            return tf.losses.huberLoss;
        case 'hingeLoss':
            return tf.losses.hingeLoss;
        case 'cosineDistance':
            return tf.losses.cosineDistance;
        case 'computeWeightedLoss':
            return tf.losses.computeWeightedLoss;
        case 'absoluteDifference':
            return tf.losses.absoluteDifference;
        default:
            throw new Error(`${loss} loss not supported`);
    }
}
exports.getLoss = getLoss;
function initializer(init) {
    let tf = (0, tf_singleton_1.getBackend)();
    switch (init) {
        case 'Zeros':
            return tf.initializers.zeros();
        case 'Ones':
            return tf.initializers.ones();
        default:
            throw new Error(`${init} initializer not supported`);
            break;
    }
}
exports.initializer = initializer;
