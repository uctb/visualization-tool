"use strict";
/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaxAbsScaler = void 0;
const utils_1 = require("../utils");
const typesUtils_1 = require("../typesUtils");
const math_1 = require("../math");
const mixins_1 = require("../mixins");
const tf_singleton_1 = require("../tf-singleton");
/*
Next steps:
0. Write the maxabsScale function (takes in 1D and 2D arrays)
1. Support maxAbs property on object
2. Support streaming with partialFit
3. getFeatureNamesOut
*/
/** MaxAbsScaler scales the data by dividing by the max absolute value that it finds per feature.
 * It's a useful scaling if you wish to keep sparsity in your dataset.
 *
 * @example
 * ```js
 * import { MaxAbsScaler } from 'scikitjs'
 *
 * const scaler = new MaxAbsScaler()
   const data = [
     [-1, 5],
     [-0.5, 5],
     [0, 10],
     [1, 10]
   ]

   const expected = scaler.fitTransform(data)
   const above = [
    [-1, 0.5],
    [-0.5, 0.5],
    [0, 1],
    [1, 1]
   ]
 *
 * ```
*/
class MaxAbsScaler extends mixins_1.TransformerMixin {
    /** The per-feature scale that we see in the dataset. We divide by this number. */
    scale;
    /** The number of features seen during fit */
    nFeaturesIn;
    /** The number of samples processed by the Estimator. Will be reset on new calls to fit */
    nSamplesSeen;
    /** Names of features seen during fit. Only stores feature names if input is a DataFrame */
    featureNamesIn;
    /** Useful for pipelines and column transformers to have a default name for transforms */
    name = 'MaxAbsScaler';
    constructor() {
        super();
        this.tf = (0, tf_singleton_1.getBackend)();
        this.scale = this.tf.tensor1d([]);
        this.nFeaturesIn = 0;
        this.nSamplesSeen = 0;
        this.featureNamesIn = [];
    }
    /**
     * Fits a MinMaxScaler to the data
     */
    fit(X) {
        (0, typesUtils_1.assert)((0, typesUtils_1.isScikit2D)(X), 'Data can not be converted to a 2D matrix.');
        const tensorArray = (0, utils_1.convertToNumericTensor2D)(X);
        const scale = (0, math_1.tensorMax)(tensorArray.abs(), 0, true);
        // Deal with 0 scale values
        this.scale = (0, math_1.turnZerosToOnes)(scale);
        this.nSamplesSeen = tensorArray.shape[0];
        this.nFeaturesIn = tensorArray.shape[1];
        if ((0, typesUtils_1.isDataFrameInterface)(X)) {
            this.featureNamesIn = [...X.columns];
        }
        return this;
    }
    /**
     * Transform the data using the fitted scaler
     */
    transform(X) {
        (0, typesUtils_1.assert)((0, typesUtils_1.isScikit2D)(X), 'Data can not be converted to a 2D matrix.');
        const tensorArray = (0, utils_1.convertToNumericTensor2D)(X);
        const outputData = tensorArray.div(this.scale);
        return outputData;
    }
    /**
     * Inverse transform the data using the fitted scaler
     */
    inverseTransform(X) {
        (0, typesUtils_1.assert)((0, typesUtils_1.isScikit2D)(X), 'Data can not be converted to a 2D matrix.');
        const tensorArray = (0, utils_1.convertToNumericTensor2D)(X);
        const outputData = tensorArray.mul(this.scale);
        return outputData;
    }
}
exports.MaxAbsScaler = MaxAbsScaler;
