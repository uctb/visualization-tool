"use strict";
/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrdinalEncoder = void 0;
const utils_1 = require("../utils");
const mixins_1 = require("../mixins");
const tf_singleton_1 = require("../tf-singleton");
const typesUtils_1 = require("../typesUtils");
/**
 * Encode categorical features as an integer array.
 * The input to this transformer should be an array-like of integers or strings,
 * which represent categorical (discrete) features. The features are then converted to ordinal integers.

* @example
 * ```js
 *  const X = [
      ['Male', 1],
      ['Female', 2],
      ['Male', 4]
    ]
    const encode = new OrdinalEncoder()
    encode.fitTransform(X) // returns the expected object below
    const expected = [
      [0, 0],
      [1, 1],
      [0, 2]
    ]
 * ```
 */
class OrdinalEncoder extends mixins_1.TransformerMixin {
    categories;
    handleUnknown;
    unknownValue;
    /** This holds the categories parameter that is passed in the constructor. `this.categories`
     * holds the actual learned categories or the ones passed in from the constructor */
    categoriesParam;
    /** The number of features seen during fit */
    nFeaturesIn;
    /** Names of features seen during fit. Only stores feature names if input is a DataFrame */
    featureNamesIn;
    /** Useful for pipelines and column transformers to have a default name for transforms */
    name = 'OrdinalEncoder';
    constructor({ categories = 'auto', handleUnknown = 'error', unknownValue = NaN } = {}) {
        super();
        this.tf = (0, tf_singleton_1.getBackend)();
        this.categoriesParam = categories;
        this.categories = [];
        this.handleUnknown = handleUnknown;
        this.unknownValue = unknownValue;
        this.nFeaturesIn = 0;
        this.featureNamesIn = [];
    }
    classesToMapping(classes) {
        const labels = new Map();
        classes.forEach((value, index) => {
            labels.set(value, index);
        });
        return labels;
    }
    loopOver2DArrayToSetLabels(array2D) {
        for (let j = 0; j < array2D[0].length; j++) {
            let curSet = new Set();
            for (let i = 0; i < array2D.length; i++) {
                curSet.add(array2D[i][j]);
            }
            let results = Array.from(curSet);
            this.categories.push(results);
        }
    }
    /**
     * Fits a OrdinalEncoder to the data.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fit(X, y) {
        const array2D = (0, utils_1.convertScikit2DToArray)(X);
        if (this.categoriesParam === 'auto') {
            this.loopOver2DArrayToSetLabels(array2D);
            return this;
        }
        this.categories = this.categoriesParam;
        this.nFeaturesIn = array2D.length === 0 ? 0 : array2D[0].length || 0;
        if ((0, typesUtils_1.isDataFrameInterface)(X)) {
            this.featureNamesIn = [...X.columns];
        }
        return this;
    }
    loopOver2DArrayToUseLabels(array2D) {
        let labels = this.categories.map((el) => this.classesToMapping(el));
        let finalArray = [];
        for (let i = 0; i < array2D.length; i++) {
            let curArray = [];
            for (let j = 0; j < array2D[0].length; j++) {
                let curElem = array2D[i][j];
                let val = labels[j].get(curElem);
                if (val === undefined) {
                    if (this.handleUnknown === 'error') {
                        throw new Error(`Unknown value ${curElem} encountered while transforming. Not encountered in training data`);
                    }
                    else {
                        val = this.unknownValue;
                    }
                }
                curArray.push(val);
            }
            finalArray.push(curArray);
        }
        return finalArray;
    }
    /**
     * Encodes the data using the fitted OrdinalEncoder.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    transform(X, y) {
        const array2D = (0, utils_1.convertScikit2DToArray)(X);
        const result2D = this.loopOver2DArrayToUseLabels(array2D);
        return this.tf.tensor2d(result2D, undefined, 'int32');
    }
}
exports.OrdinalEncoder = OrdinalEncoder;
