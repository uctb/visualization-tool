"use strict";
/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.OneHotEncoder = void 0;
const utils_1 = require("../utils");
const mixins_1 = require("../mixins");
const tf_singleton_1 = require("../tf-singleton");
const typesUtils_1 = require("../typesUtils");
/**
 * Fits a OneHotEncoder to the data.
 *
 * @example
 * ```js
 * import { OneHotEncoder } from 'scikitjs'
 *
 *
 * const X = [
    ['Male', 1],
    ['Female', 2],
    ['Male', 4]
   ]
   const encode = new OneHotEncoder()
   encode.fitTransform(X) // returns the object below
   const expected = [
    [1, 0, 1, 0, 0],
    [0, 1, 0, 1, 0],
    [1, 0, 0, 0, 1]
   ]
 * ```
 */
class OneHotEncoder extends mixins_1.TransformerMixin {
    /** categories is a list of unique labels per feature */
    categories;
    handleUnknown;
    /** This holds the categories parameter that is passed in the constructor. `this.categories`
     * holds the actual learned categories or the ones passed in from the constructor */
    categoriesParam;
    drop;
    /** The number of features seen during fit */
    nFeaturesIn;
    /** Names of features seen during fit. Only stores feature names if input is a DataFrame */
    featureNamesIn;
    /** Useful for pipelines and column transformers to have a default name for transforms */
    name = 'OneHotEncoder';
    constructor({ categories = 'auto', handleUnknown = 'error', drop } = {}) {
        super();
        this.tf = (0, tf_singleton_1.getBackend)();
        this.categoriesParam = categories;
        this.categories = [];
        this.handleUnknown = handleUnknown;
        this.nFeaturesIn = 0;
        this.featureNamesIn = [];
        this.drop = drop;
    }
    classesToMapping(classes) {
        const labels = new Map();
        classes.forEach((value, index) => {
            labels.set(value, index);
        });
        return labels;
    }
    loopOver2DArrayToSetLabels(array2D) {
        for (let j = 0; j < array2D[0].length; j++) {
            let curSet = new Set();
            for (let i = 0; i < array2D.length; i++) {
                curSet.add(array2D[i][j]);
            }
            let results = Array.from(curSet);
            this.categories.push(results);
        }
    }
    /**
     * Fits a OneHotEncoder to the data.
     * @param data 1d array of labels, Tensor, or  Series to be encoded.
     * @returns OneHotEncoder
     * @example
     * ```js
     * const encoder = new OneHotEncoder()
     * encoder.fit(["a", "b", "c"])
     * ```
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fit(X, y) {
        const array2D = (0, utils_1.convertScikit2DToArray)(X);
        if (this.categoriesParam === 'auto') {
            this.loopOver2DArrayToSetLabels(array2D);
            return this;
        }
        this.categories = this.categoriesParam;
        this.nFeaturesIn = array2D.length === 0 ? 0 : array2D[0].length || 0;
        if ((0, typesUtils_1.isDataFrameInterface)(X)) {
            this.featureNamesIn = [...X.columns];
        }
        return this;
    }
    loopOver2DArrayToUseLabels(array2D) {
        let labels = this.categories.map((el) => this.classesToMapping(el));
        let finalArray = [];
        for (let i = 0; i < array2D.length; i++) {
            let curArray = [];
            for (let j = 0; j < array2D[0].length; j++) {
                let curElem = array2D[i][j];
                let val = labels[j].get(curElem);
                if (val === undefined) {
                    if (this.handleUnknown === 'error') {
                        throw new Error(`Unknown value ${curElem} encountered while transforming. Not encountered in training data`);
                    }
                    else {
                        val = -1; // When we one hot encode this it will come back as all zeros
                    }
                }
                if (this.drop === 'first') {
                    val -= 1;
                }
                curArray.push(val);
            }
            finalArray.push(curArray);
        }
        return finalArray;
    }
    /** Generalization of the tf.oneHot that can handle "one-hotting" with a single column
     * output.
     */
    convertToOneHot(tensor, numberOfOneHotColumns) {
        if (numberOfOneHotColumns >= 2) {
            return this.tf.oneHot(tensor, numberOfOneHotColumns);
        }
        if (numberOfOneHotColumns === 1) {
            // Every integer that isn't 0 becomes 0
            tensor = this.tf.where(tensor.equal(0), this.tf.ones(tensor.shape, 'int32'), this.tf.zeros(tensor.shape, 'int32'));
            return tensor.reshape([-1, 1]);
        }
        // Case where numberOfOneHotColumns = 0
        return this.tf.tensor2d([]);
    }
    /**
     * Encodes the data using the fitted OneHotEncoder.
     * @param data 1d array of labels, Tensor, or  Series to be encoded.
     * @example
     * ```js
     * const encoder = new OneHotEncoder()
     * encoder.fit(["a", "b", "c"])
     * encoder.transform(["a", "b", "c"])
     * ```
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    transform(X, y) {
        const array2D = (0, utils_1.convertScikit2DToArray)(X);
        const result2D = this.loopOver2DArrayToUseLabels(array2D);
        const newTensor = this.tf.tensor2d(result2D, undefined, 'int32');
        return this.tf.concat(newTensor.unstack(1).map((el, i) => {
            let categoryNumber = this.categories[i].length;
            let numberOfOneHotColumns = this.drop === 'first' ? categoryNumber - 1 : categoryNumber;
            let val = this.convertToOneHot(el, numberOfOneHotColumns);
            return val;
        }), 1);
    }
    /** Only works for single column OneHotEncoding */
    inverseTransform(X) {
        let labels = this.classesToMapping(this.categories[0]);
        const tensorLabels = X.argMax(1);
        const invMap = new Map(Array.from(labels, (a) => a.reverse()));
        const tempData = tensorLabels.arraySync().map((value) => {
            return invMap.get(value) === undefined ? null : invMap.get(value);
        });
        return tempData;
    }
}
exports.OneHotEncoder = OneHotEncoder;
