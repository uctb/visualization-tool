"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mixins = exports.ClassifierMixin = exports.RegressorMixin = exports.PredictorMixin = exports.TransformerMixin = void 0;
const metrics_1 = require("./metrics/metrics");
const simpleSerializer_1 = require("./simpleSerializer");
const typesUtils_1 = require("./typesUtils");
const utils_1 = require("./utils");
class TransformerMixin extends simpleSerializer_1.Serialize {
    fitTransform(X) {
        return this.fit(X).transform(X);
    }
}
exports.TransformerMixin = TransformerMixin;
class PredictorMixin {
    fitPredict(X, y) {
        return this.fit(X, y).predict(X);
    }
}
exports.PredictorMixin = PredictorMixin;
class RegressorMixin extends simpleSerializer_1.Serialize {
    EstimatorType = 'regressor';
    score(X, y) {
        const yPred = this.predict(X);
        return (0, metrics_1.r2Score)(y, yPred);
    }
}
exports.RegressorMixin = RegressorMixin;
class ClassifierMixin extends simpleSerializer_1.Serialize {
    EstimatorType = 'classifier';
    score(X, y) {
        const yPred = this.predict(X);
        const yTrue = (0, utils_1.convertToNumericTensor1D_2D)(y);
        (0, typesUtils_1.assert)(yPred.shape.length === yTrue.shape.length, "The shape of the model output doesn't match the shape of the actual y values");
        if ((0, typesUtils_1.isScikit2D)(y)) {
            return (0, metrics_1.accuracyScore)(yTrue.argMax(1), yPred.argMax(1));
        }
        return (0, metrics_1.accuracyScore)(y, yPred);
    }
}
exports.ClassifierMixin = ClassifierMixin;
const mixins = (baseClass, ...mixins) => {
    class base extends baseClass {
        constructor(...args) {
            super(...args);
            mixins.forEach((mixin) => {
                copyProps(this, new mixin());
            });
        }
    }
    let copyProps = (target, source) => {
        // this function copies all properties and symbols, filtering out some special ones
        Object.getOwnPropertyNames(source)
            .concat(Object.getOwnPropertySymbols(source))
            .forEach((prop) => {
            if (!prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))
                Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop));
        });
    };
    mixins.forEach((mixin) => {
        // outside contructor() to allow aggregation(A,B,C).staticFunction() to be called etc.
        copyProps(base.prototype, mixin.prototype);
        copyProps(base, mixin);
    });
    return base;
};
exports.mixins = mixins;
