/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
import { Layer } from '../../engine/topology';
import { serialization, tidy } from '@tensorflow/tfjs-core';
import { greater, greaterEqual, max, min } from '@tensorflow/tfjs-core';
import { getExactlyOneShape, getExactlyOneTensor } from '../../utils/types_utils';
import { ValueError } from '../../errors';
import * as K from '../../backend/tfjs_backend';
import * as utils from './preprocessing_utils';
export class CategoryEncoding extends Layer {
    constructor(args) {
        super(args);
        this.numTokens = args.numTokens;
        if (args.outputMode) {
            this.outputMode = args.outputMode;
        }
        else {
            this.outputMode = 'multiHot';
        }
    }
    getConfig() {
        const config = {
            'numTokens': this.numTokens,
            'outputMode': this.outputMode,
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
    computeOutputShape(inputShape) {
        inputShape = getExactlyOneShape(inputShape);
        if (inputShape == null) {
            return [this.numTokens];
        }
        if (this.outputMode === 'oneHot' && inputShape[inputShape.length - 1] !== 1) {
            inputShape.push(this.numTokens);
            return inputShape;
        }
        inputShape[inputShape.length - 1] = this.numTokens;
        return inputShape;
    }
    call(inputs, kwargs) {
        return tidy(() => {
            inputs = getExactlyOneTensor(inputs);
            if (inputs.dtype !== 'int32') {
                inputs = K.cast(inputs, 'int32');
            }
            let countWeights;
            if ((typeof kwargs['countWeights']) !== 'undefined') {
                if (this.outputMode !== 'count') {
                    throw new ValueError(`countWeights is not used when outputMode !== count.
              Received countWeights=${kwargs['countWeights']}`);
                }
                countWeights
                    = getExactlyOneTensor(kwargs['countWeights']);
            }
            const maxValue = max(inputs);
            const minValue = min(inputs);
            const greaterEqualMax = greater(this.numTokens, maxValue)
                .bufferSync().get(0);
            const greaterMin = greaterEqual(minValue, 0).bufferSync().get(0);
            if (!(greaterEqualMax && greaterMin)) {
                throw new ValueError('Input values must be between 0 < values <='
                    + ` numTokens with numTokens=${this.numTokens}`);
            }
            return utils.encodeCategoricalInputs(inputs, this.outputMode, this.numTokens, countWeights);
        });
    }
}
/** @nocollapse */
CategoryEncoding.className = 'CategoryEncoding';
serialization.registerClass(CategoryEncoding);
//# sourceMappingURL=data:application/json;base64,