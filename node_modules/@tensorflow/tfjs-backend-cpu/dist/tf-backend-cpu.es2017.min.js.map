{"version":3,"file":"tf-backend-cpu.es2017.min.js","sources":["../../../../tfjs-backend-cpu/src/cpu_util.ts","../../../../tfjs-backend-cpu/src/backend_cpu.ts","../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Complex.ts","../../../../tfjs-backend-cpu/src/utils/zeros_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Identity.ts","../../../../tfjs-backend-cpu/src/kernels/Real.ts","../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../tfjs-backend-cpu/src/utils/binary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose.ts","../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedRange_impl.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-cpu/src/base.ts","../../../../tfjs-backend-cpu/src/kernels/Elu.ts","../../../../tfjs-backend-cpu/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-cpu/src/kernels/Prelu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu6.ts","../../../../tfjs-backend-cpu/src/utils/fused_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Reshape.ts","../../../../tfjs-backend-cpu/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/Acos.ts","../../../../tfjs-backend-cpu/src/kernels/Acosh.ts","../../../../tfjs-backend-cpu/src/kernels/AddN.ts","../../../../tfjs-backend-cpu/src/kernels/All.ts","../../../../tfjs-backend-cpu/src/kernels/Any.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMax.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMin.ts","../../../../tfjs-backend-cpu/src/kernels/Asin.ts","../../../../tfjs-backend-cpu/src/kernels/Asinh.ts","../../../../tfjs-backend-cpu/src/kernels/Atan.ts","../../../../tfjs-backend-cpu/src/kernels/Atan2.ts","../../../../tfjs-backend-cpu/src/kernels/Atanh.ts","../../../../tfjs-backend-cpu/src/utils/pool_utils.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/BatchNorm.ts","../../../../tfjs-backend-cpu/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount.ts","../../../../tfjs-backend-cpu/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-cpu/src/kernels/ClipByValue.ts","../../../../tfjs-backend-cpu/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-cpu/src/kernels/Imag.ts","../../../../tfjs-backend-cpu/src/kernels/Concat.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-cpu/src/kernels/Cos.ts","../../../../tfjs-backend-cpu/src/kernels/Cosh.ts","../../../../tfjs-backend-cpu/src/kernels/CropAndResize.ts","../../../../tfjs-backend-cpu/src/kernels/Cumprod.ts","../../../../tfjs-backend-cpu/src/kernels/Cumsum.ts","../../../../tfjs-backend-cpu/src/kernels/DenseBincount.ts","../../../../tfjs-backend-cpu/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Diag.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2D.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Sum.ts","../../../../tfjs-backend-cpu/src/kernels/Einsum.ts","../../../../tfjs-backend-cpu/src/kernels/EluGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Erf.ts","../../../../tfjs-backend-cpu/src/kernels/ExpandDims.ts","../../../../tfjs-backend-cpu/src/kernels/RealDiv.ts","../../../../tfjs-backend-cpu/src/utils/fft_utils.ts","../../../../tfjs-backend-cpu/src/kernels/FFT.ts","../../../../tfjs-backend-cpu/src/kernels/Fill.ts","../../../../tfjs-backend-cpu/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts","../../../../tfjs-backend-cpu/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2.ts","../../../../tfjs-backend-cpu/src/kernels/IFFT.ts","../../../../tfjs-backend-cpu/src/kernels/IsFinite.ts","../../../../tfjs-backend-cpu/src/kernels/IsInf.ts","../../../../tfjs-backend-cpu/src/kernels/IsNaN.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace.ts","../../../../tfjs-backend-cpu/src/kernels/Log1p.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalNot.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalOr.ts","../../../../tfjs-backend-cpu/src/kernels/LRN.ts","../../../../tfjs-backend-cpu/src/kernels/LRNGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Max.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Mean.ts","../../../../tfjs-backend-cpu/src/kernels/Min.ts","../../../../tfjs-backend-cpu/src/kernels/MirrorPad.ts","../../../../tfjs-backend-cpu/src/kernels/Mod.ts","../../../../tfjs-backend-cpu/src/kernels/Softmax.ts","../../../../tfjs-backend-cpu/src/kernels/Multinomial.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-cpu/src/kernels/OneHot.ts","../../../../tfjs-backend-cpu/src/kernels/ZerosLike.ts","../../../../tfjs-backend-cpu/src/kernels/OnesLike.ts","../../../../tfjs-backend-cpu/src/kernels/Pack.ts","../../../../tfjs-backend-cpu/src/kernels/PadV2.ts","../../../../tfjs-backend-cpu/src/kernels/Pow.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedGather.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedRange.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor.ts","../../../../tfjs-backend-cpu/src/kernels/Range.ts","../../../../tfjs-backend-cpu/src/kernels/Reciprocal.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Reverse.ts","../../../../tfjs-backend-cpu/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-cpu/src/kernels/Round.ts","../../../../tfjs-backend-cpu/src/kernels/ScatterNd.ts","../../../../tfjs-backend-cpu/src/kernels/SearchSorted_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SearchSorted.ts","../../../../tfjs-backend-cpu/src/kernels/Select.ts","../../../../tfjs-backend-cpu/src/kernels/Selu.ts","../../../../tfjs-backend-cpu/src/kernels/Sign.ts","../../../../tfjs-backend-cpu/src/kernels/Sin.ts","../../../../tfjs-backend-cpu/src/kernels/Sinh.ts","../../../../tfjs-backend-cpu/src/kernels/Softplus.ts","../../../../tfjs-backend-cpu/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-cpu/src/kernels/SparseToDense.ts","../../../../tfjs-backend-cpu/src/kernels/SplitV.ts","../../../../tfjs-backend-cpu/src/kernels/Square.ts","../../../../tfjs-backend-cpu/src/kernels/Step.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-cpu/src/kernels/Tan.ts","../../../../tfjs-backend-cpu/src/kernels/Tanh.ts","../../../../tfjs-backend-cpu/src/kernels/Tile.ts","../../../../tfjs-backend-cpu/src/kernels/TopK.ts","../../../../tfjs-backend-cpu/src/kernels/Transform.ts","../../../../tfjs-backend-cpu/src/kernels/Unique.ts","../../../../tfjs-backend-cpu/src/kernels/Unpack.ts","../../../../tfjs-backend-cpu/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-cpu/src/register_all_kernels.ts","../../../../tfjs-backend-cpu/src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  override write(\n      values: backend_util.BackendValues, shape: number[],\n      dtype: DataType): DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi, looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, visit https://github.com/tensorflow/tfjs-node for more details. ' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as unknown as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  override incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  override move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  override numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  override async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  override readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n    return util.convertBackendValuesAndArrayBuffer(\n        this.data.get(dataId).values, dtype);\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  override async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  override memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  override dispose() {}\n\n  override floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  override epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst INT32_MAX = 2147483647;\n\nexport function raggedRangeImpl(\n    starts: TypedArray, startsShape: number[], startsDType: DataType,\n    limits: TypedArray, limitsShape: number[], deltas: TypedArray,\n    deltasShape: number[]): [TypedArray, TypedArray] {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes: number[] = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits =\n      util.getArrayFromDType('int32', nRows + 1) as TypedArray;\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size: number;  // The number of elements in the specified range.\n    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n\n  const nVals = rtNestedSplits[nRows];\n\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues =\n      util.getArrayFromDType(startsDType, nVals) as TypedArray;\n\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n\n  return [rtNestedSplits, rtDenseValues];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');\n\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, broadcast_util, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    const batchIndexA = bi % batchDimA;\n    const batchIndexB = bi % batchDimB;\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      // for when blockSize doesn't evenly divide the input\n      const iBlock = Math.min(i0 + blockSize, leftDim);\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        const jBlock = Math.min(j0 + blockSize, rightDim);\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const aVal =\n                    // tslint:disable-next-line: max-line-length\n                    a3dValues[batchIndexA * aBatch + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    // tslint:disable-next-line: max-line-length\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchIndexB * bBatch];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue as number, bValue as number));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] = poolType === 'avg' ?\n                avgValue / Math.max(count, 1) :\n                minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendCPU,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.data.get(s0.dataId).values as TypedArray;\n  const s1Vals = backend.data.get(s1.dataId).values as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'cpu',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clipByValue = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as unknown as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clipByValue,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumprod(\n    args: {inputs: CumprodInputs, backend: MathBackendCPU,\n           attrs: CumprodAttrs}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumprod');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumprod in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeOnesTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 1 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] * vals[prevIdx] :\n                                aVals[idx] * vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'cpu',\n  kernelFunc: cumprod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as unknown as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as unknown as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as unknown as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as unknown as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as unknown as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coordX = Math.round(imageWidth - col - 1);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    // For NCHW format, if bias is a 1-D tensor, it is supposed to be aligned\n    // to the channel of the conv2d's result; if the bias is a scalar, the\n    // bias_add is computed as if the bias was broadcasted to the shape of the\n    // conv2d's result.\n    if (dataFormat === 'NCHW' && bias.shape.length === 1 &&\n        bias.shape[0] !== 1) {\n      const reshapedBias = reshape(\n          {inputs: {x: bias}, backend, attrs: {shape: [bias.shape[0], 1, 1]}});\n      result =\n          add({inputs: {a: result, b: reshapedBias}, backend}) as TensorInfo;\n      backend.disposeIntermediateTensorInfo(reshapedBias);\n    } else {\n      // This condition handles NHWC and NCHW (scalar case). The only other case\n      // for NCHW (1D case) is handled above.\n      result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    // For NCHW format, if PReLu activation weights is a 1-D tensor, it is\n    // supposed to be aligned with the channel of the conv2d's result. For other\n    // cases, whether NCHW or NHWC data format, the conv2d result is\n    // already aligned with the activation weights.\n    if (dataFormat === 'NCHW' && activation === 'prelu' &&\n        preluActivationWeights.shape.length === 1 &&\n        preluActivationWeights.shape[0] !== 1) {\n      const reshapedAlpha = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: [preluActivationWeights.shape[0], 1, 1]}\n      });\n      result = applyActivation(\n          backend, result, activation, reshapedAlpha, leakyreluAlpha);\n      backend.disposeIntermediateTensorInfo(reshapedAlpha);\n    } else {\n      result = applyActivation(\n          backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  // Throw error when any index is out of bound.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.data.get(indices.dataId).values as TypedArray;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n            `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as unknown as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], dtype, res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedGatherImpl} from './RaggedGather_impl';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits = paramsNestedSplits.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.data.get(paramsDenseValues.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImpl(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedRange, RaggedRangeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedRangeImpl} from './RaggedRange_impl';\n\nexport function raggedRange(\n    args: {inputs: RaggedRangeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {starts, limits, deltas} = inputs;\n\n  const $starts = backend.data.get(starts.dataId).values as TypedArray;\n  const $limits = backend.data.get(limits.dataId).values as TypedArray;\n  const $deltas = backend.data.get(deltas.dataId).values as TypedArray;\n\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImpl(\n      $starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas,\n      deltas.shape);\n\n  const rtNestedSplits = backend.makeTensorInfo(\n      [rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo(\n      [rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n\n  return [rtNestedSplits, rtDenseValues];\n}\n\nexport const raggedRangeConfig: KernelConfig = {\n  kernelName: RaggedRange,\n  backendName: 'cpu',\n  kernelFunc: raggedRange as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedTensorToTensorImpl} from './RaggedTensorToTensor_impl';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.data.get(shape.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values as TypedArray;\n  const $rowPartitionValues = rowPartitionTensors.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImpl(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'cpu',\n  kernelFunc: raggedTensorToTensor as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} =\n      attrs as unknown as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(indices);\n  const updatesBuf = backend.bufferSync<Rank, 'int32'|'float32'>(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction lowerBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] < value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nfunction upperBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] <= value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nexport function searchSortedImpl(\n    sortedInputs: TypedArray, values: TypedArray, batchSize: number,\n    numInputs: number, numValues: number, side: 'left'|'right'): TypedArray {\n  const output =\n      util.getArrayFromDType('int32', batchSize * numValues) as TypedArray;\n  for (let b = 0; b < batchSize; ++b) {\n    const sortedInputsSlice =\n        sortedInputs.slice(b * numInputs, (b + 1) * numInputs);\n    const outputOffset = b * numValues;\n    for (let i = 0; i < numValues; ++i) {\n      output[outputOffset + i] = side === 'left' ?\n          lowerBound(sortedInputsSlice, values[i + outputOffset]) :\n          upperBound(sortedInputsSlice, values[i + outputOffset]);\n    }\n  }\n  return output;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {searchSortedImpl} from './SearchSorted_impl';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendCPU,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const $sortedSequence =\n      backend.data.get(sortedSequence.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n\n  const output = searchSortedImpl(\n      $sortedSequence, $values, sortedSequence.shape[0],\n      sortedSequence.shape[1], values.shape[1], side);\n  return backend.makeTensorInfo(values.shape, 'int32', output);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'cpu',\n  kernelFunc: searchSorted as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n\n  let outBuf;\n  switch (sparseValues.dtype) {\n    case 'bool': {\n      const updatesBuf = backend.bufferSync<Rank, 'bool'>(sparseValues);\n      const $defaultValue =\n          Boolean(backend.data.get(defaultValue.dataId).values[0]);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'float32': {\n      const updatesBuf = backend.bufferSync<Rank, 'float32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'int32': {\n      const updatesBuf = backend.bufferSync<Rank, 'int32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'string': {\n      const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n      const $defaultValue = util.decodeString(\n          backend.data.get(defaultValue.dataId).values[0] as Uint8Array);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    default:\n      throw new Error(`Unsupported type ${sparseValues.dtype}`);\n  }\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as unknown as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringSplitImpl} from './StringSplit_impl';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendCPU,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n  const $delimiter = backend.data.get(delimiter.dataId).values[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const inStrides = util.computeStrides(image.shape);\n  const batchInStride = inStrides[0];\n  const rowInStride = inStrides[1];\n  const colInStride = inStrides[2];\n\n  const outStrides = util.computeStrides(outShape);\n  const batchOutStride = outStrides[0];\n  const rowOutStride = outStrides[1];\n  const colOutStride = outStrides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchInStride,\n                  rowInStride, colInStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchInStride,\n                  rowInStride, colInStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchOutStride + outY * rowOutStride +\n              outX * colOutStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as unknown as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(\n      i as unknown as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {dilation2DBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2DBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {raggedGatherConfig} from './kernels/RaggedGather';\nimport {raggedRangeConfig} from './kernels/RaggedRange';\nimport {raggedTensorToTensorConfig} from './kernels/RaggedTensorToTensor';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  dilation2DBackpropFilterConfig,\n  dilation2DBackpropInputConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  raggedGatherConfig,\n  raggedRangeConfig,\n  raggedTensorToTensorConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '4.2.0';\nexport {version};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","MathBackendCPU","KernelBackend","constructor","super","this","data","DataStorage","engine","nextDataId","write","values","shape","firstUse","env","get","backend_util","warn","dataId","id","set","refCount","makeTensorInfo","outId","length","isString","encodedValues","map","d","encodeString","has","incRef","decRef","move","numDataIds","async","readSync","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","convertBackendValuesAndArrayBuffer","bufferSync","strings","decodeString","buffer","Error","makeOutput","makeTensorFromTensorInfo","disposeData","force","delete","disposeIntermediateTensorInfo","tensorInfo","f","start","now","kernelMs","memory","unreliable","reasons","where","condition","condVals","dispose","floatPrecision","epsilon","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","inputs","cpuBackend","backend","sizeFromShape","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","realVals","imagVals","complexInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","identityConfig","Identity","input","realVal","realConfig","Real","castImpl","inputType","Int32Array","from","zero","toTypedArray","resultData","resultShape","a","b","cast","attrs","zerosTensorInfo","floatX","realPart","hasEncodingLoss","resultType","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","add","Add","addConfig","bincountImpl","xVals","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","Ceil","ceilConfig","concatImpl","outShape","simplyConcat","offset","colOffset","decodedData","tIdx","row","resIdx","col","equalImpl","equal","Equal","equalConfig","expImpl","exp","Exp","expConfig","expm1Impl","expm1","Expm1","expm1Config","floorImpl","floor","Floor","floorConfig","gatherNdImpl","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","strides","paramsShape","paramsSize","index","flattenIndex","dim","push","k","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greater","Greater","greaterConfig","greaterEqualImpl","greaterEqual","GreaterEqual","greaterEqualConfig","lessImpl","less","Less","lessConfig","lessEqualImpl","lessEqual","LessEqual","lessEqualConfig","linSpaceImpl","stop","num","step","logImpl","log","Log","logConfig","maxImpl","reduceSize","max","Number","isNaN","maximumImpl","aValue","bValue","maximum","Maximum","maximumConfig","minimumImpl","min","minimum","Minimum","minimumConfig","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqual","NotEqual","notEqualConfig","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","getInnerMostAxes","expandShapeToKeepDim","makeSplits","indices","indicesShape","paramsNestedSplits","numParamsDenseValues","valueSlices","numValues","numSplits","outSplits","fill","splits","lastSplit","validateSplits","nrows","rowLength","limit","outDim","outSplitsOutDim","delta","computeFlatOuterDims","orig","numOutDims","outDims","inDim","getValues","paramsDenseValues","paramsDenseValuesShape","paramsDenseValuesDType","valuesShape","valuesOut","numElements","valueSize","denseM","valuesM","outPos","writeValueSlices","raggedGatherImpl","paramsNestedSplitsShapes","outputRaggedRank","numParams","locString","join","validateIndices","outputNestedSplits","splitsOut","getSplits","outputDenseValues","INT32_MAX","raggedRangeImpl","starts","startsShape","startsDType","limits","limitsShape","deltas","deltasShape","broadcastStarts","broadcastLimits","broadcastDeltas","inSizes","nRows","rtNestedSplits","nVals","rtDenseValues","valueIndex","rowSize","RowPartitionType","RaggedTensorToTensorOp","shapeShape","valuesDType","defaultValue","defaultValueShape","rowPartitionValues","rowPartitionValuesShapes","rowPartitionTypeStrings","rowPartitionTypes","getRowPartitionTypesHelper","raggedRank","getRaggedRank","getRowPartitionTypeByDimension","dimension","FIRST_DIM_SIZE","getRowPartitionTensor","getMaxWidth","rowPartitionTensor","VALUE_ROWIDS","getMaxWidthValueRowID","ROW_SPLITS","getMaxWidthRowSplit","static","rowSplit","tensorLength","maxWidth","currentWidth","valueRowIds","indexLength","firstEqualIndex","firstEqualIndexValue","tensorShapeFromTensor","tShape","isPartial","makeShape","calculateOutputSize","firstDim","valueShape","validateDefaultValueShape","combineRaggedTensorToTensorShapes","calculateFirstParentOutputIndex","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","calculateOutputIndexRowSplit","parentOutputIndex","outputSize","rowSplitSize","realLength","parentOutputIndexCurrent","calculateOutputIndexValueRowID","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","calculateOutputIndex","partitionType","getFirstDimensionSize","firstPartitionTensor","firstPartitionType","compute","multiplier","outputShape","outputTensor","outputIndex","setOutput","valuesBase","outputBase","elementShape","valueElementSize","outputIndexSize","srcShape","tidy","defaultValueTensor","reshape","bCastDefault","broadcastTo","dataSync","srcStart","dstStart","dstEnd","srcI","dstI","src","subarray","copyArray","dst","out","raggedTensorToTensorImpl","shapesShape","rangeImpl","rsqrtImpl","sqrt","rsqrt","Rsqrt","rsqrtConfig","scatterImpl","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","rank","sigmoidImpl","sigmoid","Sigmoid","sigmoidConfig","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","parseSliceParams","assertParamsValid","sliceConfig","Slice","sparseFillEmptyRowsImpl","indicesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","sparseSegmentReductionImpl","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","output","end","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","sqrtImpl","Sqrt","sqrtConfig","squaredDifferenceImpl","diff","squaredDifference","SquaredDifference","squaredDifferenceConfig","stridedSliceImpl","StringNGramsOp","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","nGrams","outputStartIdx","dataLength","stringNGramsImpl","dataSplits","split","delimiters","skipEmpty","delimiter","indexOf","token","tokenStart","stringSplitImpl","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","stringToHashBucketFastImpl","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","subImpl","subComplexImpl","sub","Sub","subConfig","tileImpl","reps","comparePair","valueDiff","select","array","left","right","z","s","sd","sign","swap","topKImpl","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","uniqueImpl","$axis","uniqueElements","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","applyActivation","activation","preluActivationWeights","leakyreluAlpha","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","batchIndexA","batchIndexB","i0","iBlock","j0","jBlock","k0","kBlock","sum","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","bias","current","addRes","activationRes","intermediates","acos","Acos","acosConfig","acosh","Acosh","acoshConfig","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asin","Asin","asinConfig","asinh","Asinh","asinhConfig","atan","Atan","atanConfig","atan2Impl","atan2","Atan2","atan2Config","atanh","Atanh","atanhConfig","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","initialValue","NEGATIVE_INFINITY","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","broadcastArgsConfig","BroadcastArgs","s0","s1","s0Vals","s1Vals","broadcastShape","clipByValue","ClipByValue","clipAttrs","clipValueMax","clipValueMin","clipByValueConfig","complexAbsConfig","ComplexAbs","complexVals","hypot","imagVal","imagConfig","Imag","shapes","assertParamsConsistent","computeOutShape","$inputs","filter","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cos","Cos","cosConfig","cosh","Cosh","coshConfig","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","cumprodConfig","Cumprod","exclusive","reverse","permutedAxis","resultDtype","makeOnesTypedArray","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","cumsumConfig","Cumsum","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2DConfig","Dilation2D","filterVals","filterRank","computeDilation2DInfo","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2DBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2DBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","oldResult","sumConfig","Sum","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","splice","eluGradConfig","EluGrad","v","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","erfConfig","$dim","expandDimsConfig","ExpandDims","realDivImpl","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","fftImpl","getComplexWithIndex","$realInfo","$imagInfo","inputSize","fftRadix2","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","e","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","coordX","outIdx","outputValue","floorDivImpl","floorDiv","FloorDiv","floorDivConfig","fusedConv2DConfig","FusedConv2D","resultOld","reshapedBias","reshapedAlpha","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","params","prepareAndValidate","gatherV2Config","GatherV2","batchDims","parsedAxis","indicesVals","axisDim","$batchDims","indicesSize","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","ifftConfig","IFFT","isFinite","IsFinite","isFiniteConfig","isInf","IsInf","Infinity","isInfConfig","IsNan","isNaNConfig","linSpaceConfig","LinSpace","log1p","Log1p","log1pConfig","logicalAndImpl","logicalAnd","LogicalAnd","logicalAndConfig","logicalNot","LogicalNot","logicalNotConfig","logicalOrImpl","logicalOr","LogicalOr","logicalOrConfig","LRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","pow","LRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","pooled","indexes","maxPools","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","meanConfig","Mean","toDispose","reduceSizeScalar","minConfig","Min","mirrorPadConfig","MirrorPad","paddings","mode","coords","inIndex","modImpl","rem","mod","Mod","modConfig","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom","alea","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powImpl","Pow","powConfig","raggedGatherConfig","RaggedGather","$paramsNestedSplits","$paramsNestedSplitsShapes","$paramsDenseValues","$indices","outputDenseValuesShape","outputNestedSplitsTensors","outputDenseValuesTensor","raggedRangeConfig","RaggedRange","$starts","$limits","$deltas","rtNestedSplitsData","rtDenseValuesData","raggedTensorToTensorConfig","RaggedTensorToTensor","rowPartitionTensors","$values","$defaultValue","$rowPartitionValues","rangeConfig","Range","reciprocal","Reciprocal","reciprocalConfig","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","getImageCenter","sinFactor","sin","cosFactor","coordY","Round","base","roundConfig","scatterNdConfig","ScatterNd","calculateShapes","lowerBound","mid","upperBound","searchSortedConfig","SearchSorted","sortedSequence","side","sortedInputs","numInputs","sortedInputsSlice","searchSortedImpl","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","selu","Selu","seluConfig","Sign","signConfig","Sin","sinConfig","sinh","Sinh","sinhConfig","threshold","softplus","Softplus","tooLarge","tooSmall","expX","softplusConfig","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$denseShape","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputData","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","Boolean","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","squareConfig","Square","Step","stepAttrs","NaN","stepConfig","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","sliced","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tan","Tan","tanConfig","tanh","Tanh","tanhConfig","tileConfig","Tile","topKConfig","TopK","transformConfig","Transform","transforms","interpolation","fillMode","inStrides","batchInStride","rowInStride","colInStride","outStrides","batchOutStride","rowOutStride","colOutStride","transformVals","transform","outY","outX","projection","inX","inY","mapCoord","nearestInterpolation","bilinearInterpolation","outCoord","len","inCoord","sz2","clamp","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","batchStride","rowStride","colStride","yFloor","xFloor","yCeil","xCeil","uniqueConfig","Unique","unpackConfig","Unpack","valueRank","tempRes","unsortedSegmentSumConfig","UnsortedSegmentSum","numSegments","numIters","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfigs","kernelConfig","registerKernel"],"mappings":"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rB,MAAMnvD,EAASg8C,GAAK,CAACh9C,OAAQuO,EAAKrO,UAASyD,MAAO,CAACmM,KAAM,KAIzD,OAFAyc,EAAchyB,SAAQC,GAAK0F,EAAQ/B,8BAA8B3D,KAE1DwG,CACT,GC8GMovD,GAAgC,CACpCnkC,GACAxsB,EACAitB,GACAG,GACAxmB,EACAymB,GACAI,GACAQ,GACAG,GACAI,GACAK,GACAG,GACAG,GACAI,GACAG,GACAkF,GACAW,GACAI,GACAoB,GACAzK,GACAkL,GACAkB,GACAgB,GACAG,GACAr1B,EACAiE,EACAgyB,GACA73B,EACA83B,GACAsB,GACAgC,GACAE,GACAU,GACAW,GACAW,GACAmB,GACAU,GACAG,GACAC,GACA6C,GACAY,GACAE,GACAE,GACAoB,GACAE,GACAG,GACAE,GACAE,GACAiB,GACAS,GACAO,GACA5hB,GACAijB,GACA5hC,EACA6iC,GACAziC,EACA2iC,GACAviC,EACAunC,GACAO,GACAE,GACA5nC,EACAsoC,GACAC,GACAK,GACAE,GACAI,GACAxnC,EACAI,GACAhJ,EACAkxC,GACApZ,GACAwZ,GACAI,GACAE,GACAxsB,GACAhc,GACAI,GACAqoC,GACA7nC,GACAioC,GACAI,GACAG,GACAI,GACAC,GACAW,GACAU,GACAvpC,GACAypC,GACAE,GACAE,GACAK,GACAE,GACAQ,GACAI,GACA3qC,GACA6qC,GACAU,GACAW,GACA7rC,GACAM,GACAusC,GACAU,GACAK,GACAhtC,GACAwtC,GACAU,GACAM,GACAE,GACAM,GACAx1B,GACAvY,GACAguC,GACAS,GACAO,GACAM,GACAp8C,EACAspC,GACAkT,GACA/2B,GACAG,GACAS,GACAo2B,GACA6B,GACA4B,GACAM,GACAe,GACAI,GACAc,GACA3qC,GACA4qC,GACAM,GACAQ,GACAU,GACAzrC,GACA2rC,GACAE,GACAG,GACA/qC,GACAk9B,GACAoO,GACAC,GACAQ,GACAI,GACAI,GACAM,GACAE,GACAK,GACAnpC,GACAypC,GACAppC,GACAypC,GACAC,GACAgB,GACAG,GACAI,GACAjnC,GACAukB,GACA8iB,GACAG,GACAC,GACAE,GACAE,GACAx9C,GACAigD,GACAE,GACAI,GACA/S,IAGF,IAAK,MAAM0T,KAAgBD,GACzBE,iBAAeD,gDCxWD"}