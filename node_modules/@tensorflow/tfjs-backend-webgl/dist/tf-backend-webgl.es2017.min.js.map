{"version":3,"file":"tf-backend-webgl.es2017.min.js","sources":["../../../../tfjs-backend-webgl/src/canvas_util.ts","../../../../tfjs-backend-webgl/src/tex_util.ts","../../../../tfjs-backend-webgl/src/webgl_util.ts","../../../../tfjs-backend-webgl/src/flags_webgl.ts","../../../../tfjs-backend-webgl/src/glsl_version.ts","../../../../tfjs-backend-webgl/src/shader_compiler_util.ts","../../../../tfjs-backend-webgl/src/shader_compiler.ts","../../../../tfjs-backend-webgl/src/gpgpu_math.ts","../../../../tfjs-backend-webgl/src/decode_matrix_gpu.ts","../../../../tfjs-backend-webgl/src/decode_matrix_packed_gpu.ts","../../../../tfjs-backend-webgl/src/encode_float_gpu.ts","../../../../tfjs-backend-webgl/src/encode_float_packed_gpu.ts","../../../../tfjs-backend-webgl/src/encode_matrix_gpu.ts","../../../../tfjs-backend-webgl/src/encode_matrix_packed_gpu.ts","../../../../tfjs-backend-webgl/src/gpgpu_util.ts","../../../../tfjs-backend-webgl/src/gpgpu_context.ts","../../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedRange_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-webgl/src/kernel_utils/shared.ts","../../../../tfjs-backend-webgl/src/packing_util.ts","../../../../tfjs-backend-webgl/src/pack_gpu.ts","../../../../tfjs-backend-webgl/src/reshape_packed_gpu.ts","../../../../tfjs-backend-webgl/src/texture_manager.ts","../../../../tfjs-backend-webgl/src/unaryop_gpu.ts","../../../../tfjs-backend-webgl/src/unaryop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/unpack_gpu.ts","../../../../tfjs-backend-webgl/src/backend_webgl.ts","../../../../tfjs-backend-webgl/src/webgl.ts","../../../../tfjs-backend-webgl/src/base.ts","../../../../tfjs-backend-webgl/src/binaryop_gpu.ts","../../../../tfjs-backend-webgl/src/binaryop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Identity.ts","../../../../tfjs-backend-webgl/src/kernels/Complex.ts","../../../../tfjs-backend-webgl/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-webgl/src/kernels/Prelu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/kernel_funcs_utils.ts","../../../../tfjs-backend-webgl/src/mulmat_packed_gpu.ts","../../../../tfjs-backend-webgl/src/binaryop_complex_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Multiply.ts","../../../../tfjs-backend-webgl/src/kernels/Reshape.ts","../../../../tfjs-backend-webgl/src/kernel_utils/reshape.ts","../../../../tfjs-backend-webgl/src/mean_gpu.ts","../../../../tfjs-backend-webgl/src/reduce_gpu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/reduce.ts","../../../../tfjs-backend-webgl/src/transpose_gpu.ts","../../../../tfjs-backend-webgl/src/transpose_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Sum.ts","../../../../tfjs-backend-webgl/src/kernels/Sum_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Transpose.ts","../../../../tfjs-backend-webgl/src/kernels/BatchMatMul_impl.ts","../../../../tfjs-backend-webgl/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-webgl/src/kernels/Abs.ts","../../../../tfjs-backend-webgl/src/kernels/Acos.ts","../../../../tfjs-backend-webgl/src/kernels/Acosh.ts","../../../../tfjs-backend-webgl/src/kernels/Add.ts","../../../../tfjs-backend-webgl/src/addn_gpu.ts","../../../../tfjs-backend-webgl/src/addn_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AddN.ts","../../../../tfjs-backend-webgl/src/kernels/All.ts","../../../../tfjs-backend-webgl/src/kernels/Any.ts","../../../../tfjs-backend-webgl/src/argminmax_gpu.ts","../../../../tfjs-backend-webgl/src/argminmax_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/arg_min_max.ts","../../../../tfjs-backend-webgl/src/kernels/ArgMax.ts","../../../../tfjs-backend-webgl/src/kernels/ArgMin.ts","../../../../tfjs-backend-webgl/src/kernels/Asin.ts","../../../../tfjs-backend-webgl/src/kernels/Asinh.ts","../../../../tfjs-backend-webgl/src/kernels/Atan.ts","../../../../tfjs-backend-webgl/src/kernels/Atan2.ts","../../../../tfjs-backend-webgl/src/kernels/Atanh.ts","../../../../tfjs-backend-webgl/src/pool_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-webgl/src/avg_pool_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-webgl/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-webgl/src/batchnorm_gpu.ts","../../../../tfjs-backend-webgl/src/batchnorm_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/BatchNorm.ts","../../../../tfjs-backend-webgl/src/slice_gpu.ts","../../../../tfjs-backend-webgl/src/slice_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Slice.ts","../../../../tfjs-backend-webgl/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-webgl/src/kernels/Bincount.ts","../../../../tfjs-backend-webgl/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-webgl/src/kernels/NotEqual.ts","../../../../tfjs-backend-webgl/src/kernels/Real.ts","../../../../tfjs-backend-webgl/src/kernels/Cast.ts","../../../../tfjs-backend-webgl/src/kernel_utils/int.ts","../../../../tfjs-backend-webgl/src/kernels/Ceil.ts","../../../../tfjs-backend-webgl/src/clip_gpu.ts","../../../../tfjs-backend-webgl/src/clip_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ClipByValue.ts","../../../../tfjs-backend-webgl/src/complex_abs_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-webgl/src/concat_gpu.ts","../../../../tfjs-backend-webgl/src/concat_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Imag.ts","../../../../tfjs-backend-webgl/src/kernels/Concat_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Concat.ts","../../../../tfjs-backend-webgl/src/conv_gpu.ts","../../../../tfjs-backend-webgl/src/conv_packed_gpu.ts","../../../../tfjs-backend-webgl/src/im2col_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2D_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2D.ts","../../../../tfjs-backend-webgl/src/conv_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3D.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-webgl/src/kernels/Cos.ts","../../../../tfjs-backend-webgl/src/kernels/Cosh.ts","../../../../tfjs-backend-webgl/src/crop_and_resize_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/CropAndResize.ts","../../../../tfjs-backend-webgl/src/cum_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Cum_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Cumprod.ts","../../../../tfjs-backend-webgl/src/kernels/Cumsum.ts","../../../../tfjs-backend-webgl/src/kernels/DenseBincount.ts","../../../../tfjs-backend-webgl/src/depth_to_space_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-webgl/src/conv_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/conv_packed_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-webgl/src/conv_backprop_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-webgl/src/diag_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Diag.ts","../../../../tfjs-backend-webgl/src/dilation_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Dilation2D.ts","../../../../tfjs-backend-webgl/src/kernels/Einsum.ts","../../../../tfjs-backend-webgl/src/kernels/Elu.ts","../../../../tfjs-backend-webgl/src/kernels/EluGrad.ts","../../../../tfjs-backend-webgl/src/kernels/Equal.ts","../../../../tfjs-backend-webgl/src/kernels/Erf.ts","../../../../tfjs-backend-webgl/src/kernels/Exp.ts","../../../../tfjs-backend-webgl/src/kernels/ExpandDims.ts","../../../../tfjs-backend-webgl/src/kernels/Expm1.ts","../../../../tfjs-backend-webgl/src/fft_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FFT_impl.ts","../../../../tfjs-backend-webgl/src/kernels/FFT.ts","../../../../tfjs-backend-webgl/src/fill_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Fill.ts","../../../../tfjs-backend-webgl/src/flip_left_right_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-webgl/src/kernels/Floor.ts","../../../../tfjs-backend-webgl/src/kernels/FloorDiv.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels.ts","../../../../tfjs-backend-webgl/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-webgl/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-webgl/src/gather_nd_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/GatherNd.ts","../../../../tfjs-backend-webgl/src/gather_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/GatherV2.ts","../../../../tfjs-backend-webgl/src/kernels/Greater.ts","../../../../tfjs-backend-webgl/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-webgl/src/kernels/IFFT.ts","../../../../tfjs-backend-webgl/src/kernels/IsFinite.ts","../../../../tfjs-backend-webgl/src/kernels/IsInf.ts","../../../../tfjs-backend-webgl/src/kernels/IsNaN.ts","../../../../tfjs-backend-webgl/src/kernels/Less.ts","../../../../tfjs-backend-webgl/src/kernels/LessEqual.ts","../../../../tfjs-backend-webgl/src/kernels/LinSpace.ts","../../../../tfjs-backend-webgl/src/kernels/Log.ts","../../../../tfjs-backend-webgl/src/kernels/Log1p.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalNot.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalOr.ts","../../../../tfjs-backend-webgl/src/lrn_gpu.ts","../../../../tfjs-backend-webgl/src/lrn_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/LRN.ts","../../../../tfjs-backend-webgl/src/lrn_grad_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/LRNGrad.ts","../../../../tfjs-backend-webgl/src/kernels/Max.ts","../../../../tfjs-backend-webgl/src/kernels/Max_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Maximum.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-webgl/src/max_pool_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Mean.ts","../../../../tfjs-backend-webgl/src/kernels/Mean_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Min.ts","../../../../tfjs-backend-webgl/src/kernels/Minimum.ts","../../../../tfjs-backend-webgl/src/mirror_pad_gpu.ts","../../../../tfjs-backend-webgl/src/mirror_pad_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/MirrorPad.ts","../../../../tfjs-backend-webgl/src/kernels/Mod.ts","../../../../tfjs-backend-webgl/src/multinomial_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/RealDiv.ts","../../../../tfjs-backend-webgl/src/kernels/Sub.ts","../../../../tfjs-backend-webgl/src/kernels/Softmax.ts","../../../../tfjs-backend-webgl/src/kernels/Multinomial.ts","../../../../tfjs-backend-webgl/src/kernels/Neg.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-webgl/src/onehot_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/OneHot.ts","../../../../tfjs-backend-webgl/src/kernels/ZerosLike.ts","../../../../tfjs-backend-webgl/src/kernels/OnesLike.ts","../../../../tfjs-backend-webgl/src/kernels/Pack.ts","../../../../tfjs-backend-webgl/src/pad_gpu.ts","../../../../tfjs-backend-webgl/src/pad_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/PadV2.ts","../../../../tfjs-backend-webgl/src/kernels/Pow.ts","../../../../tfjs-backend-webgl/src/kernels/Prod.ts","../../../../tfjs-backend-webgl/src/kernels/RaggedGather.ts","../../../../tfjs-backend-webgl/src/kernels/RaggedRange.ts","../../../../tfjs-backend-webgl/src/kernels/RaggedTensorToTensor.ts","../../../../tfjs-backend-webgl/src/kernels/Range.ts","../../../../tfjs-backend-webgl/src/kernels/Reciprocal.ts","../../../../tfjs-backend-webgl/src/kernels/Relu.ts","../../../../tfjs-backend-webgl/src/kernels/Relu6.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_gpu.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_gpu.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-webgl/src/reverse_gpu.ts","../../../../tfjs-backend-webgl/src/reverse_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Reverse.ts","../../../../tfjs-backend-webgl/src/rotate_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-webgl/src/kernels/Round.ts","../../../../tfjs-backend-webgl/src/kernels/Rsqrt.ts","../../../../tfjs-backend-webgl/src/scatter_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ScatterNd.ts","../../../../tfjs-backend-webgl/src/search_sorted_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/SearchSorted.ts","../../../../tfjs-backend-webgl/src/select_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Select.ts","../../../../tfjs-backend-webgl/src/kernels/Selu.ts","../../../../tfjs-backend-webgl/src/kernels/Sigmoid.ts","../../../../tfjs-backend-webgl/src/kernels/Sign.ts","../../../../tfjs-backend-webgl/src/kernels/Sin.ts","../../../../tfjs-backend-webgl/src/kernels/Sinh.ts","../../../../tfjs-backend-webgl/src/kernels/Softplus.ts","../../../../tfjs-backend-webgl/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-webgl/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-webgl/src/kernels/SparseReshape.ts","../../../../tfjs-backend-webgl/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-webgl/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-webgl/src/kernels/SparseToDense.ts","../../../../tfjs-backend-webgl/src/kernels/SplitV.ts","../../../../tfjs-backend-webgl/src/kernels/Sqrt.ts","../../../../tfjs-backend-webgl/src/kernels/Square.ts","../../../../tfjs-backend-webgl/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-webgl/src/kernels/Step.ts","../../../../tfjs-backend-webgl/src/strided_slice_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/StridedSlice.ts","../../../../tfjs-backend-webgl/src/kernels/StringNGrams.ts","../../../../tfjs-backend-webgl/src/kernels/StringSplit.ts","../../../../tfjs-backend-webgl/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-webgl/src/kernels/Tan.ts","../../../../tfjs-backend-webgl/src/kernels/Tanh.ts","../../../../tfjs-backend-webgl/src/tile_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Tile.ts","../../../../tfjs-backend-webgl/src/top_k_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/TopK.ts","../../../../tfjs-backend-webgl/src/transform_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Transform.ts","../../../../tfjs-backend-webgl/src/kernels/Unique.ts","../../../../tfjs-backend-webgl/src/kernels/Unpack.ts","../../../../tfjs-backend-webgl/src/segment_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-webgl/src/register_all_kernels.ts","../../../../tfjs-backend-webgl/src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas =\n      customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n\n  if (env().getBool('SOFTWARE_WEBGL_ENABLED')) {\n    WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;\n  }\n\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n      (canvas as HTMLCanvasElement)\n        .getContext('experimental-webgl', WEBGL_ATTRIBUTES));\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface Texture {\n  texture: WebGLTexture;\n  texShape: [number, number];\n}\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: Texture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n    downloadTextureFormat = glany.RGBA8;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n    downloadTextureFormat = gl.RGBA;\n  }\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return fragmentShader;\n  }\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nexport function logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return;\n  }\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\n/// validateProgram is effectively \"If we `useProgram(program); drawArrays();`,\n/// give feedback in log about perf/correctness warnings or errors that would\n/// occur.\"\n/// So make sure we set up all vertex/texture/sampler/uniform data before\n/// calling validateProgram!\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  let maxSizeForNarrowTex =\n      env().getNumber('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE');\n  if (maxSizeForNarrowTex === Infinity &&\n      env().getBool('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE')) {\n    maxSizeForNarrowTex = maxTexSize / 2;\n  }\n\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n    maxSizeForNarrowTex = maxSizeForNarrowTex * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  let textureShape: [number, number] = null;\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    textureShape = [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    textureShape = logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  }\n\n  // true if one edge length is 1 (1 or 2, if packed), while another edge\n  // length exceeds maxSizeForNarrowTex.\n  const isLongNarrowTex = textureShape != null &&\n      Math.max(...textureShape) > maxSizeForNarrowTex &&\n      Math.min(...textureShape) <= (isPacked ? 2 : 1) &&\n      Math.min(...textureShape) > 0;\n\n  if (textureShape == null || isLongNarrowTex) {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      textureShape =\n          util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    } else {\n      textureShape = util.sizeToSquarishShape(size);\n    }\n  }\n\n  return textureShape;\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() ? 1 : -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n\n/** Whether we will use the experimental conv op. */\nENV.registerFlag('WEBGL_EXP_CONV', () => false);\n\n/**\n * If the device performance is low or if no hardware GPU is available, whether\n * software WebGL will be used.\n */\nENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));\n\n/**\n * For narrow texture (physical height or physical width is 1), if the length of\n * any texture edges exceed the threshold, the texture will be reshaped to be\n * more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);\n\n/**\n * If the flag is set to true, the max size of the narrow texture will be auto\n * computed and it will be considerred as a threshold to reshape the narrow\n * texture to be more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);\n\n/**\n * Whether to use the customized isnan. It's only useful for webgl2 since webgl1\n * doesn't have the builtin isnan.\n */\nENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);\n\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly. Since WebGL2 supports uint type and\n    // floatBitsToUinT built-in function, we could implment isnan following\n    // IEEE 754 rules.\n    // NaN defination in IEEE 754-1985 is :\n    //   - sign = either 0 or 1.\n    //   - biased exponent = all 1 bits.\n    //   - fraction = anything except all 0 bits (since all 0 bits represents\n    //   infinity).\n    // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n    defineSpecialNaN = env().getBool('WEBGL2_ISNAN_CUSTOM') ? `\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ` :\n                                                              '';\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], variableName: string, index = 'index'): string {\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport function getFlatIndexFrom3DOutput(): string {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext, GPGPUContextProgram} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\nimport {createFragmentShader} from './webgl_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: GPGPUContextProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  source: string;\n  fragmentShader: WebGLShader;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface GPGPUBinaryLocations {\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader);\n\n  if (!env().get('ENGINE_COMPILE_ONLY')) {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      ...getUniformLocations(gpgpu, program, webGLProgram)\n    };\n  } else {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      uniformLocations: null,\n      customUniformLocations: null,\n      infLoc: null,\n      nanLoc: null,\n      inShapesLocations: null,\n      inTexShapesLocations: null,\n      outShapeLocation: null,\n      outShapeStridesLocation: null,\n      outTexShapeLocation: null\n    };\n  }\n}\n\nexport function getUniformLocations(\n    gpgpu: GPGPUContext, program: GPGPUProgram,\n    webGLProgram: WebGLProgram): GPGPUBinaryLocations {\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inTexShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  let infLoc: WebGLUniformLocation = null;\n  let nanLoc: WebGLUniformLocation = null;\n\n  // Add special uniforms (NAN, INFINITY)\n  nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] =\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n\n  return {\n    uniformLocations,\n    customUniformLocations,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n  });\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape, keptDims} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne =\n          program.packedInputs || uniformShape.length > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${\n          useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${\n          broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${\n          rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nconst CHANNEL_CHAR_TO_INDEX_MAP: Record<string, number> = {\n  'R': 0,\n  'G': 1,\n  'B': 2,\n  'A': 3\n};\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false,\n      usedChannels = 'RGBA') {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    let mainLoop = '';\n    for (let usedChannelIndex = 0; usedChannelIndex < usedChannels.length;\n         usedChannelIndex++) {\n      const curChannel = usedChannels[usedChannelIndex];\n      mainLoop += `\n          if(offset == ${usedChannelIndex}) {\n            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[curChannel]}];\n          }`;\n    }\n\n    this.userCode = `\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${usedChannels.length});\n\n        flatIndex = idiv(flatIndex, ${usedChannels.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${glsl.texture2D}(A, uv);\n          ${mainLoop}\n        }\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${\n            this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${\n            this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n\n    this.userCode = `\n        ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): Texture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            tex2d, 0, internalFormat, width, height, 0, textureFormat,\n            textureType, null));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => (gl as WebGL2RenderingContext)\n                  .texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n\n  return {texture, texShape: [height, width]};\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texSubImage2D(\n            gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType,\n            dataForUpload));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n            texelDataType, dataForUpload));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA,\n              gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0,\n              gl.RGBA, gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n              (pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n               HTMLVideoElement | ImageBitmap)));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n              pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                  HTMLVideoElement | ImageBitmap));\n    }\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGLParallelCompilationExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\ntype WebGLVao = WebGLVertexArrayObject | WebGLVertexArrayObjectOES;\n\nexport interface GPGPUContextProgram extends WebGLProgram {\n  vao: WebGLVao;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  parallelCompilationExtension: WebGLParallelCompilationExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: GPGPUContextProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  createVertexArray: () => WebGLVao | null;\n  bindVertexArray: (vao: WebGLVao | null) => void;\n  deleteVertexArray: (vao: WebGLVao | null) => void;\n  getVertexArray: () => WebGLVao | null;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      const gl2 = gl as WebGL2RenderingContext;\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.createVertexArray());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.bindVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.deleteVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));\n      };\n    } else if (gl != null) {\n      const ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error(\n            'All WebGL1 implementations are expected to offer' +\n            ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl,\n          () => ext.createVertexArrayOES());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl,\n          () => ext.bindVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl,\n          () => ext.deleteVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(gl,\n          () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));\n      };\n    }\n\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension =\n        this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  public createProgram(fragmentShader: WebGLShader): GPGPUContextProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n\n    let program2: GPGPUContextProgram;\n    {\n      program2 = Object.assign(program, {\n        vao: this.createVertexArray(),\n      });\n      this.bindVertexArray(program2.vao);\n      // Bind index buffer, and vertex buffers based on program attrib\n      // locations.\n      webgl_util.callAndCheck(\n          gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));\n      console.assert(\n        gpgpu_util.bindVertexProgramAttributeStreams(gl, program2,\n                                                     this.vertexBuffer),\n        'gpgpu_util.bindVertexProgramAttributeStreams not fully successful.');\n\n      if (this.debug) {\n        webgl_util.validateProgram(gl, program2);\n      }\n    }\n    this.setProgram(program2);\n\n    return program2;\n  }\n\n  public deleteProgram(program: GPGPUContextProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n      this.deleteVertexArray(program.vao);\n    }\n  }\n\n  public setProgram(program: GPGPUContextProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n\n    if (this.program != null) {\n      this.bindVertexArray(this.program.vao);\n\n      if (this.debug) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      const boundVao = this.getVertexArray();\n      console.assert(boundVao === this.program.vao,\n                     'VAO changed between setProgram and executeProgram!');\n\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst INT32_MAX = 2147483647;\n\nexport function raggedRangeImpl(\n    starts: TypedArray, startsShape: number[], startsDType: DataType,\n    limits: TypedArray, limitsShape: number[], deltas: TypedArray,\n    deltasShape: number[]): [TypedArray, TypedArray] {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes: number[] = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits =\n      util.getArrayFromDType('int32', nRows + 1) as TypedArray;\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size: number;  // The number of elements in the specified range.\n    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n\n  const nVals = rtNestedSplits[nRows];\n\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues =\n      util.getArrayFromDType(startsDType, nVals) as TypedArray;\n\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n\n  return [rtNestedSplits, rtDenseValues];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  raggedGatherImpl: raggedGatherImplCPU,\n  raggedRangeImpl: raggedRangeImplCPU,\n  raggedTensorToTensorImpl: raggedTensorToTensorImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  raggedGatherImplCPU,\n  raggedRangeImplCPU,\n  raggedTensorToTensorImplCPU,\n  scatterImplCPU,\n  sigmoidImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  sqrtImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  rank: number;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  private getSourceCoordsArr(dims: string[]): string[] {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n\n  private getOutOfBoundsCondition(dims: string[]): string {\n    if (this.rank === 1) {\n      return `rc > ${\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${\n          this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  private getSetup(dims: string[]): string {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :\n                                           this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :\n                                           this.outputShape[this.rank - 2];\n\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  private getOutput(dims: string[]): string {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape =\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'inputShape', type: 'ivec3' as const }];\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(\n    shape: [number, number, number], enableShapeUniforms: boolean): string {\n  const coordsFromIndexSnippet = enableShapeUniforms ?\n      shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n          ['r', 'c', 'd'], 'inputShape') :\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, Texture, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  private _numBytesFree = 0;  // How many bytes that have been allocated\n                              // are available for reuse.\n  private freeTextures: {[shape: string]: Texture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: Texture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): Texture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: Texture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: Texture, shape: [number, number], logicalTexType: TextureUsage,\n      isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture.texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  } else if (internalFormat === glany.RGBA8) {\n    return 4;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataToGPUWebGLOption, DataType, engine, env, GPUData, kernel_impls, KernelBackend, MemoryInfo, nextFrame, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util, WebGLData} from '@tensorflow/tfjs-core';\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {getUniformLocations, GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpuResource?: GPGPUContext|HTMLCanvasElement|OffscreenCanvas) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl =\n            getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  override numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  // Writes a new entry to the data store with a WebGL texture, and registers it\n  // to the texture manager.\n  writeTexture(\n      texture: WebGLTexture, shape: number[], dtype: DataType,\n      texHeight: number, texWidth: number, channels: string): DataId {\n    // Temporarily create an tensor info to make the texture compatible with\n    // the runWebGLProgram's input.\n    const input = this.makeTensorInfo(shape, dtype);\n    const inData = this.texData.get(input.dataId);\n    // Even though the input texture could be unpacked or dense packed, it is\n    // always considered as unpacked for EncodeMatrixProgram.\n    inData.isPacked = false;\n\n    // Bind texture to the input tensor.\n    inData.texture = {texture, texShape: [texHeight, texWidth]};\n    inData.texShape = [texHeight, texWidth];\n\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    const program =\n        new EncodeMatrixProgram(shapeAs3D, false /* isByteArray */, channels);\n    const output =\n        this.runWebGLProgram(program, [input], dtype, [[texHeight, texWidth]]);\n    output.shape = shape;\n\n    // Unbind the texture from the input tensor to avoid the texture being\n    // released.\n    inData.texture = null;\n    this.disposeIntermediateTensorInfo(input);\n\n    return output.dataId;\n  }\n\n  override write(values: BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  override incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  override move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  override readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  override async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n          env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\n            `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n            `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  override readToGPU(dataId: DataId, options: DataToGPUWebGLOption = {}):\n      GPUData {\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, isPacked, texture} = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return {tensorRef, ...tmpData.texture};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals =\n          this.gpgpu\n              .downloadMatrixFromPackedTexture(\n                  tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n              .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu\n                     .downloadByteEncodedFloatMatrixFromOutputTexture(\n                         tmpData.texture.texture, tmpData.texShape[0],\n                         tmpData.texShape[1])\n                     .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  override timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  override time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n          0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () =>\n            kernelMs\n                .map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  override memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as unknown as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId, customTexShape?: [number, number]):\n      TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(\n          size <= texSize,\n          () => 'customTexShape is too small. ' +\n              'Row * Column * 4 should be equal or larger than the ' +\n              'size of the tensor data.');\n    }\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues =\n        [customTexShape != null ? customTexShape :\n                                  tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput, customTexShape);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][], preventEagerUnpackingOfOutput = false,\n      customTexShape?: [number, number]): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ?\n          customTexShape :\n          tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(\n          this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  override dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  override floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  override epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray =\n          values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape: [number, number] =\n          isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle =\n          this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData =\n          this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): Texture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n\n  async checkCompileCompletionAsync(): Promise<boolean[]> {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p: Promise<boolean> = new Promise((resolve) => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n\n  private async checkCompletionAsync_(binary: GPGPUBinary): Promise<boolean> {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram,\n            this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n\n  private checkCompletion_(binary: GPGPUBinary): boolean {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(\n              binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(\n            binary.source,\n            this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n\n  getUniformLocations() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      const {\n        uniformLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        inShapesLocations,\n        inTexShapesLocations,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.uniformLocations = uniformLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.inShapesLocations = inShapesLocations;\n      binary.inTexShapesLocations = inTexShapesLocations;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n\n  /**\n   * Create a TF.js tensor out of an existing WebGL texture. A new texture will\n   * be created.\n   */\n  override createTensorFromGPUData(\n      values: WebGLData, shape: number[], dtype: DataType): Tensor {\n    values.channels = values.channels || 'RGBA';\n    const {texture, height, width, channels} = values;\n    const backend = engine().backend as MathBackendWebGL;\n\n    // Have to throw an error, otherwise WebGL just warns and returns wrong\n    // values.\n    if (!backend.gpgpu.gl.isTexture(texture)) {\n      throw new Error(\n          `The texture is invalid. Also, please make sure the texture and ` +\n          `the TFJS WebGL backend are using the same canvas. If you want to ` +\n          `use your own custom canvas, you have to create and use the custom ` +\n          `TFJS WebGL backend created from the canvas through ` +\n          `'new tf.MathBackendWebGL(customCanvas)'.`);\n    }\n\n    const dataId =\n        backend.writeTexture(texture, shape, dtype, height, width, channels);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, backend);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET_PACKED = `\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as unknown as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n      new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], 'float32');\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webglBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values as TypedArray;\n      const bVals = webglBackend.texData.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, addBias = false, activation: string = null,\n      hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `imod(rc.x, ${aShape[0]})`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `imod(rc.x, ${bShape[0]})`;\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${batchASnippet};\n        int batchB = ${batchBSnippet};\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const customValues = [input3DShape];\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, customValues,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {sumImpl} from './Sum_impl';\n\nexport function sum(\n    args: {inputs: SumInputs, attrs: SumAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return sumImpl(x, axis, keepDims, backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const acos = unaryKernelFunc({opSnippet: ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos,\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\n\nexport const acosh = unaryKernelFunc({opSnippet: ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nconst ADD = 'return a + b;';\n\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendWebGL, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: xUnPacked}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args:\n        {inputs: ArgMinInputs, backend: MathBackendWebGL, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const asin = unaryKernelFunc({opSnippet: ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const asinh = unaryKernelFunc({opSnippet: ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const atan = unaryKernelFunc({opSnippet: ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const atan2 =\n    binaryKernelFunc({opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const atanh = unaryKernelFunc({opSnippet: ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      // Use `max(count, 1.0)` instead of `count` in case count === 0.0.\n      // If count === 0.0, `avgValue` is always 0.0 and we change `count`'s\n      // value to avoid dividing zero.\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_gpu';\nimport {SlicePackedProgram} from '../slice_packed_gpu';\n\nfunction shallowSlice(\n    x: TensorInfo, begin: number[], size: number[], backend: MathBackendWebGL) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset =\n      slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendWebGL, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTexData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  const {isPacked} = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new SlicePackedProgram($size) :\n        new SliceProgram($size);\n    const customValues = [$begin];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU} from '../kernel_utils/shared';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendWebGL,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n  const outVals =\n      bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.readSync(s0.dataId) as TypedArray;\n  const s1Vals = backend.readSync(s1.dataId) as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgl',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NotEqual} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU} from '../kernel_utils/shared';\n\nconst NOT_EQUAL = `return float(a != b);`;\n\nexport const notEqual = binaryKernelFunc(\n    {opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool'});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {castImplCPU} from '../kernel_utils/shared';\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const values = backend.texData.get(x.dataId).values as TypedArray;\n    const [resultShape, resultType, resultData] =\n        castImplCPU(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nconst TO_INT = `return float(int(x));`;\n\nexport function int(input: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\n\nconst CEIL = `return ceil(x);`;\n\nexport const ceil = unaryKernelFunc(\n    {opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ClipProgram} from '../clip_gpu';\nimport {ClipPackedProgram} from '../clip_packed_gpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: MathBackendWebGL,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customValues = [[clipValueMin], [clipValueMax]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\nimport {CLONE, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n\n  const shouldPack: boolean = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      $inputs[0].shape.length > 1;\n\n  if ($inputs.length === 1) {\n    // Clone tensor.\n    const program = shouldPack ?\n        new UnaryOpProgram(inputs[0].shape, CLONE) :\n        new UnaryOpPackedProgram(inputs[0].shape, CLONE);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n  if ($inputs.length > maxTexturesInShader) {\n    const reducedInputs = [];\n    for (let i = 0; i < $inputs.length; i += maxTexturesInShader) {\n      const subArray = $inputs.slice(i, i + maxTexturesInShader);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeIntermediateTensorInfo(i);\n    }\n\n    return result;\n  }\n\n  if (shouldPack) {\n    const program = new ConcatPackedProgram($inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, $inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D($inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n import {backend_util, util} from '@tensorflow/tfjs-core';\n\n import {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\n export class Conv2DPackedProgram implements GPGPUProgram {\n   variableNames = ['x', 'W'];\n   packedInputs = true;\n   packedOutput = true;\n   outputShape: number[];\n   userCode: string;\n   enableShapeUniforms: boolean;\n   customUniforms = [\n     {name: 'pads', type: 'ivec2' as const },\n     {name: 'strides', type: 'ivec2' as const },\n     {name: 'dilations', type: 'ivec2' as const },\n     {name: 'inDims', type: 'ivec2' as const },\n   ];\n\n   constructor(\n       convInfo: backend_util.Conv2DInfo, addBias = false,\n       activation: string = null, hasPreluActivation = false,\n       hasLeakyReluAlpha = false) {\n     this.outputShape = convInfo.outShape;\n     this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n     const padLeft = convInfo.padInfo.left;\n     const strideWidth = convInfo.strideWidth;\n     const dilationWidth = convInfo.dilationWidth;\n     const filterHeight = convInfo.filterHeight;\n     const filterWidth = convInfo.filterWidth;\n     const texelsAcross = filterWidth;\n\n     let mainLoop = `\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;`;\n\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           vec4 xTexelC${c * 2};\n           int xTexelC${c * 2}Ready;\n           vec4 xTexelC${c * 2 + 1};\n           int xTexelC${c * 2 + 1}Ready;\n           vec4 xC${c};`;\n     }\n\n     /**\n      * This vectorized implementation works by gathering the values needed for\n      * each output channel's dot product into vec4's and then multiplying them\n      * all together (this happens in the final double for-loop below). Most of\n      * the main loop consists of constructing these vec4's with the minimum\n      * number of texture2D calls, which means making use of all four returned\n      * values from a texture2D call at once.\n      */\n     mainLoop += `\n     for (int r = 0; r < ${filterHeight}; r++) {\n      for (int d1 = 0; d1 < ${convInfo.inChannels}; d1 += 2) {\n       `;\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           xTexelC${c * 2} = vec4(0.0);\n           xTexelC${c * 2}Ready = 0;\n           xTexelC${c * 2 + 1} = vec4(0.0);\n           xTexelC${c * 2 + 1}Ready = 0;\n           xC${c} = vec4(0.0);`;\n     }\n     mainLoop += `\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       `;\n\n     for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n       const colIndex = texelC * 2;\n\n       mainLoop += `\n           xC = xCCorner + ${colIndex * dilationWidth};\n           `;\n\n       if (strideWidth === 1) {\n         if (colIndex < filterWidth) {\n           // If padding is odd, the outer texels have to be composed.\n           if (padLeft % 2 === 1) {\n             // TODO: Ensure vec4 previous does not result in redundant sample,\n             // and avoid setting xTexelRC's that exceed the boundary in the\n             // first place rather than resetting them to vec4(0)).\n\n             // To compute xCOffset:\n             // - If padding is odd, we must add 1 to ensure we ask for an\n             // even-numbered row.\n             // - We subtract 2 to access the previous texel.\n\n             mainLoop += `\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n               `;\n             // This texel has been read in previous iteration if the dilation\n             // is 1.\n             if (dilationWidth === 1 && colIndex > 0) {\n               mainLoop += `\n                 xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                   colIndex}.xy);\n                 `;\n             } else {\n               mainLoop += `\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                   } else {\n                     xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                   }\n                   `;\n             }\n           } else {\n             // Padding is even, so xRC corresponds to a single texel.\n             mainLoop += `\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xC${colIndex} = xTexelC${colIndex};\n                 `;\n           }\n\n           if (colIndex + 1 < filterWidth) {\n             // If dilation is even, the second entry should match the first\n             // (either both are composed or both are single samples). But if\n             // dilation is odd, then the second entry should be the opposite\n             // of the first (if the first is composed, the second is a single\n             // sample, and vice versa.)\n\n             const nextTexelOffset = padLeft % 2 === 0 ?\n                 util.nearestLargerEven(dilationWidth) :\n                 dilationWidth;\n\n             if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                 (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n               mainLoop += `\n                   xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                   colIndex + 1}Ready == 0) {\n                     xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${colIndex + 1}.zw = vec2(0.0);\n                     }\n                     xTexelC${colIndex + 1}Ready = 1;\n                   }\n                   `;\n\n               // If dilation > 1 then the xRC's will not be able to share any\n               // values, so each xRC will require two unique calls to getX.\n               if (dilationWidth > 1) {\n                 mainLoop += `\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                        colIndex + 1}.xy);\n                     } else {\n                      xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                        colIndex + 1}.xy);\n                     }\n                     `;\n               } else {\n                 mainLoop += `\n                     xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                     colIndex + 1}.xy);\n                     `;\n               }\n\n             } else {\n               // If dilation is 1 and padding is odd, we have already read the\n               // texel when constructing the previous x value. Here we can\n               // simply skip the texture read.\n               if (nextTexelOffset === 1) {\n                 mainLoop += `\n                     xC${colIndex + 1} = xTexelC${colIndex};\n                     `;\n               } else {\n                 mainLoop += `\n                     xCOffset = xC + ${nextTexelOffset};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                     colIndex + 1}Ready == 0) {\n                       xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${colIndex + 1}.zw = vec2(0.0);\n                       }\n                       xTexelC${colIndex + 1}Ready = 1;\n                     }\n\n                     xC${colIndex + 1} = xTexelC${colIndex + 1};\n                     `;\n               }\n             }\n           }\n         }\n       } else {  // stride === 2\n         if (colIndex < filterWidth) {\n           // Depending on whether padLeft is even or odd, we want either the\n           // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n           // even, xC${colIndex +1} is simply the zw channels of texels we've\n           // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n           // need to come from the xy channels of a new texel, hence the `\n           // vec4\n           // final` initialized below.\n           if (padLeft % 2 === 1) {\n             mainLoop += `\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                 colIndex + 1}.zw);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                 `;\n             }\n           } else {\n             mainLoop += `\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(\n                   xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                   colIndex + 1}.zw);\n                 `;\n             }\n           }\n         }\n       }\n\n       // localize the dotProd accumulation within the loop, the theory is for\n       // GPU with limited cache, accumulate sum across large amount of\n       // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n       // 50 variables)\n       if (colIndex < filterWidth) {\n         mainLoop += `\n             wTexel = getW(r, ${colIndex}, d1, d2);\n             dotProd += xC${colIndex}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${convInfo.inChannels}) {\n               dotProd += xC${colIndex}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `;\n\n         if (colIndex + 1 < filterWidth) {\n           mainLoop += `\n               wTexel = getW(r, ${colIndex + 1}, d1, d2);\n               dotProd += xC${colIndex + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${convInfo.inChannels}) {\n                 dotProd += xC${colIndex + 1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `;\n         }\n       }\n     }\n     mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n\n     let activationSnippet = '', applyActivationSnippet = '';\n     if (activation) {\n       if (hasPreluActivation) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${activation}\n         }`;\n       } else if (hasLeakyReluAlpha) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${activation}\n         }`;\n       } else {\n         activationSnippet = `vec4 activation(vec4 x) {\n           ${activation}\n         }`;\n       }\n\n       applyActivationSnippet = `result = activation(result);`;\n     }\n\n     const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n     if (addBias) {\n       this.variableNames.push('bias');\n     }\n\n     if (hasPreluActivation) {\n       this.variableNames.push('preluActivationWeights');\n     }\n     if (hasLeakyReluAlpha) {\n       this.variableNames.push('leakyreluAlpha');\n     }\n\n     this.userCode = `\n       ${activationSnippet}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${mainLoop}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${addBiasSnippet}\n         ${applyActivationSnippet}\n         setOutput(result);\n       }\n     `;\n   }\n }\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'inputShape', type: 'ivec4' as const },\n    {name: 'pad', type: 'ivec2' as const },\n    {name: 'stride', type: 'ivec2' as const },\n    {name: 'dilation', type: 'ivec2' as const },\n    {name: 'inChannels', type: 'int' as const },\n    {name: 'itemsPerBlockRow', type: 'int' as const },\n    {name: 'outWidth', type: 'int' as const },\n  ];\n\n  constructor(outputShape: number[], convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {dataFormat} = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n\n    const boundsCheckingSnippet = this.enableShapeUniforms ?\n        'if(blockIndex < outShape[2] && pos < outShape[1]) {' :\n        `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\n// import {assertAndGetBroadcastShape} from\n// '../../../tfjs-core/src/ops/broadcast_util';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// Both conv2dByMatMul and conv2dWithIm2Row fuse height and width into one\n// dimension to compute batchMatMul, so bias and activation weights are also\n// supposed to fuse the two dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\n//\n// Even though the bias is not supposed to be a 3-D or a 4-D (including\n// batch) tensor and PReLU activiation weights is not supposed to be a 4-D\n// tensor, we still need to support them, because we haven't disabled\n// them for NHWC format.\n// https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/conv2d.ts#L181-L196\nfunction getShapeForBatchMatMul(\n    shape: number[], isChannelsLast: boolean): number[] {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ?\n        [\n          ...shape.slice(0, -3) /* batch */,\n          shape[length - 3] * shape[length - 2] /* height * width */,\n          shape[length - 1] /* channel */\n        ] :\n        [\n          ...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */,\n          shape[length - 2] * shape[length - 1] /* height * width */\n        ];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n\n  // The algorithm in the if condition assumes (1) the output will be packed,\n  // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n  // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n  // for xTexData.shape and xShape.\n  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked &&\n      isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 &&\n      util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n\n  if (canOptimize) {\n    // We avoid expensive packed 2x2 reshape by padding col count to next,\n    // even number. When col is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for next even col. We make the odd-cols tensor to look like\n    // even-cols tensor before the operation and, after the batchMatMul,\n    // fix the even-cols result to have odd number of cols.\n    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing col count, after batchMatMul->...->compileProgram leads to\n    // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even col count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  } else {\n    const numCols = convInfo.outHeight * convInfo.outWidth;\n    const xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: isChannelsLast ?\n            [convInfo.batchSize, numCols, convInfo.inChannels] :\n            [convInfo.batchSize, convInfo.inChannels, numCols]\n      }\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: isChannelsLast ? xReshaped : filterReshaped,\n      b: isChannelsLast ? filterReshaped : xReshaped,\n      transposeA: !isChannelsLast,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    out = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [convInfo.batchSize, sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n  intermediates.push(w2Row);\n\n  const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n  const customValues = [\n    x.shape, [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels],\n    [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]\n  ];\n  const im2Col =\n      backend.runWebGLProgram(im2ColProgram, [x], 'float32', customValues);\n  const im2ColReshaped =\n      reshape({inputs: {x: im2Col}, backend, attrs: {shape: x2ColShape}});\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      isChannelsLast ? im2ColReshaped.shape as [number, number, number] :\n                       w2Row.shape as [number, number, number],\n      isChannelsLast ? w2Row.shape as [number, number, number] :\n                       im2ColReshaped.shape as [number, number, number],\n      isChannelsLast ? [convInfo.batchSize, numCols, convInfo.outChannels] :\n                       [convInfo.batchSize, convInfo.outChannels, numCols],\n      transposeA, transposeB, hasBias, fusedActivation,\n      hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] =\n      isChannelsLast ? [im2ColReshaped, w2Row] : [w2Row, im2ColReshaped];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n  const out = reshape(\n      {inputs: {x: product}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {Conv2DPackedProgram} from '../conv_packed_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n    && env().getBool('WEBGL_EXP_CONV')\n    ) {\n    const program = new Conv2DPackedProgram(convInfo);\n    const customValues = [\n      [convInfo.padInfo.top, convInfo.padInfo.left],\n      [convInfo.strideHeight, convInfo.strideWidth],\n      [convInfo.dilationHeight, convInfo.dilationWidth],\n      [convInfo.inHeight, convInfo.inWidth]\n    ];\n    out =\n        backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  attrs: Conv2DBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const program = new Conv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DProgram} from '../conv_gpu';\n\nexport function conv3D(\n    args:\n        {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropInput(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv3DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nexport const cos = unaryKernelFunc({opSnippet: COS});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const cosh = unaryKernelFunc({opSnippet: COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  userCode: string;\n  customUniforms = [{name: 'index', type: 'float' as UniformType}];\n\n  constructor(\n      public op: CumOpType, public outputShape: number[], exclusive: boolean,\n      reverse: boolean) {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val =\n        exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords', this.op)};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords', this.op)} = idx;\n          val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType, CumProgram} from '../cum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumImpl(\n    op: CumOpType, x: TensorInfo, backend: MathBackendWebGL, axis: number,\n    exclusive: boolean, reverse: boolean): TensorInfo {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumprod shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const customValues = [[i]];\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumprod(args: {\n  inputs: CumprodInputs,\n  backend: MathBackendWebGL,\n  attrs: CumprodAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgl',\n  kernelFunc: cumprod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n    }\n    mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n\n      mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n\n            mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                  colIndex}.xy);\n                `;\n            } else {\n              mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n          }\n\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n\n            const nextTexelOffset = padLeft % 2 === 0 ?\n                util.nearestLargerEven(dilationWidth) :\n                dilationWidth;\n\n            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n              mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                       colIndex + 1}.xy);\n                    } else {\n                     xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                       colIndex + 1}.xy);\n                    }\n                    `;\n              } else {\n                mainLoop += `\n                    xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                    colIndex + 1}.xy);\n                    `;\n              }\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n              } else {\n                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                    colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n              }\n            }\n          }\n        }\n      } else {  // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                colIndex + 1}.zw);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n            }\n          } else {\n            mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.zw);\n                `;\n            }\n          }\n        }\n      }\n\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n        }\n      }\n    }\n    mainLoop += `\n    }\n  `;\n    mainLoop += `\n      }\n    `;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Dilation2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n\n    const {top: padTop, left: padLeft} = padInfo;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args:\n        {inputs: EinsumInputs, backend: MathBackendWebGL, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nconst elu = unaryKernelFunc({opSnippet: ELU, packedOpSnippet: ELU_PACKED});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nconst ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: MathBackendWebGL}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n          new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n          new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n      return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU} from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nconst EQUAL = `return float(a == b);`;\n\nexport const equal = binaryKernelFunc({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: equalImplCPU,\n});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const erf = unaryKernelFunc({opSnippet: ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\n\nexport const EXP = CHECK_NAN_SNIPPET_UNARY + `\n  return exp(x);\n`;\n\nconst EXP_PACKED = `\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const exp = unaryKernelFunc({\n  opSnippet: EXP,\n  packedOpSnippet: EXP_PACKED,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32',\n});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\n\nconst EXPM1 = `return exp(x) - 1.0;`;\n\nexport const expm1 = unaryKernelFunc(\n    {opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FillProgram} from '../fill_gpu';\n\nexport function fill(args: {backend: MathBackendWebGL, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value as number);\n    const customValues = [[value as number]];\n    return backend.runWebGLProgram(program, [], dtype, customValues);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\n\nconst FLOOR = `return floor(x);`;\n\nexport const floor = unaryKernelFunc(\n    {opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const floorDiv = binaryKernelFunc(\n    {opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as unknown as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    const newWillReadFrequently =\n        env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n    if (fromPixels2DContext == null ||\n        newWillReadFrequently !== willReadFrequently) {\n      willReadFrequently = newWillReadFrequently;\n      fromPixels2DContext =\n          document.createElement('canvas').getContext(\n              '2d', {willReadFrequently});\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap, 0, 0,\n        width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {Conv2DPackedProgram} from '../conv_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  const prepareInputs = (): TensorInfo[] => {\n    const inputs: TensorInfo[] = [x, filter];\n\n    // If the input is a 1-D tensor, align it with the channels.\n    //\n    // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n    // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n    // scalar inputs are originally aligned, but the 1-D tensor inputs are\n    // supposed to be aligned with the channels (only bias and PReLU activation\n    // weights could be a 1-D tensor).\n    const alignInputWithDataFormat =\n        (input: TensorInfo, dataFormat: 'NHWC'|'NCHW'): TensorInfo => {\n          if (dataFormat === 'NCHW' && input.shape.length === 1 &&\n              input.shape[0] !== 1) {\n            const alignedInput = reshape({\n              inputs: {x: input},\n              backend,\n              attrs: {shape: [input.shape[0], 1, 1]}\n            });\n            intermediates.push(alignedInput);\n            return alignedInput;\n          }\n          return input;\n        };\n\n    if (hasBias) {\n      inputs.push(alignInputWithDataFormat(bias, dataFormat));\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n    }\n\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    return inputs;\n  };\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n    && env().getBool('WEBGL_EXP_CONV')\n    ) {\n      const fusedActivation =\n          activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new Conv2DPackedProgram(\n      convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n      hasLeakyreluAlpha);\n    const customValues = [\n      [convInfo.padInfo.top, convInfo.padInfo.left],\n      [convInfo.strideHeight, convInfo.strideWidth],\n      [convInfo.dilationHeight, convInfo.dilationWidth],\n      [convInfo.inHeight, convInfo.inWidth]\n    ];\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  const result =\n      backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[],\n      private paramsShape: number[]) {\n    this.outputShape = shape;\n    const dtype = getCoordsDataType(shape.length);\n\n    let mainLoop = `\n    int index;`;\n    for (let j = 0; j < this.sliceDim; j++) {\n      mainLoop += `\n          index = round(getIndices(coords[0], ${j}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[j]};\n          flattenIndex += index * ${this.strides[j]};`;\n    }\n\n    this.userCode = `\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${mainLoop}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], \n        params.shape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport type GatherShape = [number, number, number, number];\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: GatherShape, outputShape: GatherShape) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: GatherShape, axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('index');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util, env} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram, GatherShape} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId) as TypedArray;\n    const axisDim = x.shape[parsedAxis];\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n          `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape as GatherShape,\n                                    flattenOutputShape as GatherShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU} from '../kernel_utils/shared';\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU} from '../kernel_utils/shared';\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool',\n  cpuKernelImpl: greaterEqualImplCPU\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const isFinite = unaryKernelFunc({opSnippet: IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_INF = `return float(isinf(x));`;\n\nexport const isInf = unaryKernelFunc({opSnippet: IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_NAN = `return float(isnan(x));`;\n\nexport const isNaN = unaryKernelFunc({opSnippet: IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Less} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU} from '../kernel_utils/shared';\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU} from '../kernel_utils/shared';\n\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const lessEqual = binaryKernelFunc({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {linSpaceImplCPU} from '../kernel_utils/shared';\n\nexport function linSpace(\n    args: {backend: MathBackendWebGL, attrs: LinSpaceAttrs}): TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Log} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\n\n// Windows chrome return 0 if the input is negative value. We will specifically\n// return NaN if the input is 0 to solve compatiblity issue.\nconst LOG = CHECK_NAN_SNIPPET_UNARY + `\n  return x < 0.0 ? 0./0. : log(x);\n`;\n\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n`;\n\nexport const log = unaryKernelFunc(\n    {opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOG1P = CHECK_NAN_SNIPPET_UNARY + `\n  return log(1.0 + x);\n`;\n\nexport const log1p = unaryKernelFunc({opSnippet: LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const logicalNot = unaryKernelFunc({opSnippet: LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const logicalOr = binaryKernelFunc(\n    {opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool'});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNProgram} from '../lrn_gpu';\nimport {LRNPackedProgram} from '../lrn_packed_gpu';\n\nexport const lrn =\n    (args: {inputs: LRNInputs, backend: MathBackendWebGL, attrs: LRNAttrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {depthRadius, bias, alpha, beta} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n              new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n              new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n          return backend.runWebGLProgram(program, [x], x.dtype);\n        };\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNGradProgram} from '../lrn_grad_gpu';\n\nexport const lrnGrad = (args: {\n  inputs: LRNGradInputs,\n  backend: MathBackendWebGL,\n  attrs: LRNGradAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Maximum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU} from '../kernel_utils/shared';\n\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\n\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as unknown as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as unknown as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function meanImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendWebGL, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Minimum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU} from '../kernel_utils/shared';\n\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\n\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MirrorPadProgram} from '../mirror_pad_gpu';\nimport {MirrorPadPackedProgram} from '../mirror_pad_packed_gpu';\n\nexport const mirrorPadKernelFunc: (params: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendWebGL,\n  attrs: MirrorPadAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new MirrorPadPackedProgram(x.shape, paddings, mode) :\n      new MirrorPadProgram(x.shape, paddings, mode);\n\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n};\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mod} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED,\n});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'seed', type: 'float' as UniformType}];\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const realDiv = binaryKernelFunc(\n    {opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nconst SUB = 'return a - b;';\n\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\n\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {OneHotProgram} from '../onehot_gpu';\nimport {reshape} from './Reshape';\n\nexport const oneHot = (args: {\n  inputs: OneHotInputs,\n  backend: MathBackendWebGL,\n  attrs: OneHotAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n  const result = backend.runWebGLProgram(program, [reshaped], dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          if (util.sizeFromShape(x.shape) === 0) {\n            // Short-circuit the computation, since x doesn't have value, only\n            // the shape is used to compute output shape to pad.\n            const outputShape = paddings.map(\n                (p, i) =>\n                    p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n            return fill({\n              backend,\n              attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n            });\n          }\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pow} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\n\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const pow =\n    binaryKernelFunc({opSnippet: POW, packedOpSnippet: POW_PACKED});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedGatherImplCPU} from '../kernel_utils/shared';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits =\n      paramsNestedSplits.map(t => backend.readSync(t.dataId) as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.readSync(paramsDenseValues.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImplCPU(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'webgl',\n  kernelFunc: raggedGather as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedRange, RaggedRangeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedRangeImplCPU} from '../kernel_utils/shared';\n\nexport function raggedRange(\n    args: {inputs: RaggedRangeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {starts, limits, deltas} = inputs;\n\n  const $starts = backend.readSync(starts.dataId) as TypedArray;\n  const $limits = backend.readSync(limits.dataId) as TypedArray;\n  const $deltas = backend.readSync(deltas.dataId) as TypedArray;\n\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImplCPU(\n      $starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas,\n      deltas.shape);\n\n  const rtNestedSplits = backend.makeTensorInfo(\n      [rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo(\n      [rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n\n  return [rtNestedSplits, rtDenseValues];\n}\n\nexport const raggedRangeConfig: KernelConfig = {\n  kernelName: RaggedRange,\n  backendName: 'webgl',\n  kernelFunc: raggedRange as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedTensorToTensorImplCPU} from '../kernel_utils/shared';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.readSync(shape.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $defaultValue = backend.readSync(defaultValue.dataId) as TypedArray;\n  const $rowPartitionValues =\n      rowPartitionTensors.map(t => backend.readSync(t.dataId) as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImplCPU(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'webgl',\n  kernelFunc: raggedTensorToTensor as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: MathBackendWebGL, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst RECIPROCAL = `return 1.0 / x;`;\n\nexport const reciprocal = unaryKernelFunc({opSnippet: RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu =\n    unaryKernelFunc({opSnippet: RELU, packedOpSnippet: RELU_PACKED});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu6 =\n    unaryKernelFunc({opSnippet: RELU6, packedOpSnippet: RELU6_PACKED});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_gpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeBilinearBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_gpu';\nimport {ResizeNearestNeighborPackedProgram} from '../resize_nearest_neighbor_packed_gpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeNearestNeighborPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeNearestNeighborProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_gpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'params', type: 'vec4' as UniformType}];\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} =\n        attrs as unknown as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customValues =\n        [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n    const output = webglBackend.runWebGLProgram(\n        program, [image], image.dtype, customValues);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const round = unaryKernelFunc({opSnippet: ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\n\nconst RSQRT = `return inversesqrt(x);`;\n\nexport const rsqrt =\n    unaryKernelFunc({opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class SearchSortedProgram implements GPGPUProgram {\n  variableNames = ['sortedSequence', 'values'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'numInputs', type: 'int' as UniformType}];\n\n  constructor(\n      batchSize: number, numInputs: number, numValues: number,\n      side: 'left'|'right') {\n    this.outputShape = [batchSize, numValues];\n\n    const webGL2LoopHead = 'while (left < right) {';\n    // WebGL1 doesn't accept non constant loop conditions, so upper bound loop\n    // iterations.\n    const webGL1LoopHead = `for (int i = 0; i < ${\n        Math.ceil(Math.log2(numInputs + 1))}; ++i) { if (left >= right) break;`;\n    const loopHead = env().getNumber('WEBGL_VERSION') === 2 ? webGL2LoopHead :\n                                                              webGL1LoopHead;\n\n    // left corresponds to lower bound and right to upper bound.\n    const boundComparator = side === 'left' ? '<' : '<=';\n    this.userCode = `\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${loopHead}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${boundComparator} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SearchSortedProgram} from '../search_sorted_gpu';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendWebGL,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const program = new SearchSortedProgram(\n      sortedSequence.shape[0], sortedSequence.shape[1], values.shape[1], side);\n  const customValues = [[sortedSequence.shape[1]]];\n  return backend.runWebGLProgram(\n      program, [sortedSequence, values], 'int32', customValues);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'webgl',\n  kernelFunc: searchSorted as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SelectProgram} from '../select_gpu';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport const selu = unaryKernelFunc({opSnippet: SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sigmoidImplCPU} from '../kernel_utils/shared';\n\nconst SIGMOID = CHECK_NAN_SNIPPET_UNARY + `\n  return 1.0 / (1.0 + exp(-1.0 * x));\n`;\n\nconst SIGMOID_PACKED = `\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const sigmoid = unaryKernelFunc({\n  opSnippet: SIGMOID,\n  packedOpSnippet: SIGMOID_PACKED,\n  cpuKernelImpl: sigmoidImplCPU\n});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const sign = unaryKernelFunc({opSnippet: SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nexport const sin = unaryKernelFunc({opSnippet: SIN});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const sinh = unaryKernelFunc({opSnippet: SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const softplus = unaryKernelFunc({opSnippet: SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseFillEmptyRowsImplCPU} from '../kernel_utils/shared';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendWebGL\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $denseShape = backend.readSync(denseShape.dataId) as TypedArray;\n  const $defaultValue =\n      backend.readSync(defaultValue.dataId)[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImplCPU(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'webgl',\n  kernelFunc: sparseFillEmptyRows as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args:\n        {inputs: SplitVInputs, backend: MathBackendWebGL, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sqrtImplCPU} from '../kernel_utils/shared';\n\nconst SQRT = `return sqrt(x);`;\n\nexport const sqrt = unaryKernelFunc(\n    {opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const square = unaryKernelFunc({opSnippet: SQUARE});\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifference = binaryKernelFunc(\n    {opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const values = backend.readSync(x.dataId) as TypedArray;\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program =\n          new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: finalShape}});\n\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringToHashBucketFastImplCPU} from '../kernel_utils/shared';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendWebGL,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'webgl',\n  kernelFunc: stringToHashBucketFast as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tan = unaryKernelFunc({opSnippet: TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const tanh = unaryKernelFunc({opSnippet: TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK.\n  // |firstPass|indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'negativeInf', type: 'float' as UniformType},\n    {name: 'dir', type: 'int' as UniformType},\n    {name: 'inc', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n}\n\nexport class MergeProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK\n  // |firstPass| indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |k| Top k elements desired\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'k', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_gpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: MathBackendWebGL, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendWebGL, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  // Empirically determined constant used to determine last dim threshold for\n  // handing off execution to the CPU.\n  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD =\n      env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n\n  // Empirically determined constant used to determine k threshold for handing\n  // off execution to the CPU.\n  const TOPK_K_CPU_HANDOFF_THRESHOLD =\n      env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x]) ||\n      lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||\n      k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Eagerly unpack x input since it is passed in to all the shaders which\n  // require unpacked inputs.\n  const xtexData = backend.texData.get(x.dataId);\n  const xIsPacked = xtexData !== null && xtexData.isPacked;\n  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape(\n      {inputs: {x: xUnPacked}, attrs: {shape: [batch, lastDim]}, backend});\n\n  if (xIsPacked) {\n    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n  }\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const fistPass = indices === null ? 1 : 0;\n    const customValues =\n        [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n    const prevIndices = indices;\n    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [firstPass], [kPow2]];\n    const prevIndices = indices;\n    indices =\n        backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputConfig} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {raggedGatherConfig} from './kernels/RaggedGather';\nimport {raggedRangeConfig} from './kernels/RaggedRange';\nimport {raggedTensorToTensorConfig} from './kernels/RaggedTensorToTensor';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fromPixelsConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  raggedGatherConfig,\n  raggedRangeConfig,\n  raggedTensorToTensorConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '4.2.0';\nexport {version};\n"],"names":["contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","customCanvas","newCtx","Error","canvas","OffscreenCanvas","document","createElement","createCanvas","addEventListener","ev","preventDefault","env","getBool","getContext","getWebGLRenderingContext","console","log","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","PackingScheme","TextureUsage","PhysicalTextureType","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getDenseTexShape","shape","size","util","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","max","getTextureConfig","textureHalfFloatExtension","glany","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA8","RGBA","HALF_FLOAT_OES","callAndCheck","func","returnValue","error","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","canBeRepresented","num","abs","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","get","logShaderSourceAndInfoLog","lineNumberRegex","shaderInfoLog","lineNumberRegexResult","exec","lineNumber","shaderLines","split","pad","length","toString","linesWithLineNumbers","map","line","rightPad","maxLineLength","i","beforeErrorLines","slice","errorLine","afterErrorLines","join","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","width","height","maxTextureSize","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","loc","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","maxSizeForNarrowTex","Infinity","d","nearestLargerEven","squeezeResult","squeezeShape","newShape","textureShape","isLongNarrowTex","min","batchDim","cols","isEven","n","isReshapeFree","shape1","shape2","arraysEqual","shape1Cols","shape2Cols","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","getWebGLDisjointQueryTimerVersion","queryTimerVersion","hasExtension","isWebGLVersionEnabled","e","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","COLOR_BUFFER_HALF_FLOAT","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","assertNotComplex","tensor","opName","Array","isArray","forEach","t","assert","dtype","viewport","scissor","ENV","getGlslDifferences","version","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","index","strides","computeStrides","stride","getOutputLogicalCoordinatesFromFlatIndexByUniform","_","getLogicalCoordinatesFromFlatIndexByUniform","variableName","indicesArr","numCoords","symbolicallyComputeStrides","getFlatIndexFrom3D","registerFlag","device_util","isMobile","threshold","ENCODE_FLOAT_SNIPPET","getBroadcastDims","backend_util","makeShader","inputsInfo","outputShape","prefixSnippets","x","shapeInfo","logicalShape","isUniform","push","name","enableShapeUniforms","uniformShape","getUniformInfoFromShape","packedInputs","texShape","customUniforms","type","arrayIndex","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","usesPackedTextures","res","getPackedSamplerFromInInfo","getSamplerFromInInfo","inShape","outShape","inputInfo","texName","texFuncSnippet","charAt","toUpperCase","funcName","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","isInputScalar","isOutputScalar","indexOf","getPackedSamplerAtOutputCoords","outTexShape","inTexShape","flatOffset","getSamplerAtOutputCoords","getInputSamplingSnippet","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","getOutputScalarCoords","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","getOutputPacked3DCoords","texelsInBatchN","batches","b","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform","coordsFromIndexSnippet","shader_util.getLogicalCoordinatesFromFlatIndex","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","userCode","texNumR","texNumC","offset","getFlatOffsetUniformName","tNumR","tNumC","getSamplerScalar","getUniformSampler","getSampler1D","keptDims","squeezedShape","params","squeezeInputInfo","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","stride2Str","stride1Str","stride0Str","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSamplerScalar","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","rank","getPackedSamplerND","inSize","useSqueezePackedShape","useSqueezeShape","newInputInfo","JSON","parse","stringify","getUniformLocations","gpgpu","webGLProgram","uniformLocations","inShapesLocations","inTexShapesLocations","customUniformLocations","outShapeLocation","outTexShapeLocation","outShapeStridesLocation","infLoc","nanLoc","shouldThrow","variableNames","varName","validateBinaryAndProgram","shapeInfos","inputs","shapeA","input","shapeB","texShapeA","texShapeB","texData","useShapeUniforms","DecodeMatrixProgram","constructor","this","DENSE","DecodeMatrixPackedProgram","EncodeFloatProgram","DOWNLOAD","EncodeFloatPackedProgram","CHANNEL_CHAR_TO_INDEX_MAP","R","G","B","A","EncodeMatrixProgram","inputIsUnsignedByte","usedChannels","mainLoop","usedChannelIndex","curChannel","shader_util.getFlatIndexFrom3D","EncodeMatrixPackedProgram","row","col","channel","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","Float32Array","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texStorage2D","getInternalFormatForFloat32MatrixTexture","textureConfig","createFloat32MatrixTexture","tex_util.getUnpackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16MatrixTexture","createFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","createPackedMatrixTexture","tex_util.getPackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16PackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","Uint8Array","set","texSubImage2D","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","downloadPackedMatrixFromBuffer","batch","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","GPGPUContext","glVersion","createVertexArray","bindVertexArray","vao","deleteVertexArray","getVertexArray","VERTEX_ARRAY_BINDING","ext","createVertexArrayOES","bindVertexArrayOES","deleteVertexArrayOES","VERTEX_ARRAY_BINDING_OES","COLOR_BUFFER_FLOAT","parallelCompilationExtension","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","debug","dispose","disposed","warn","outputTexture","finish","deleteBuffer","throwIfDisposed","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","deleteMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","createBufferFromTexture","bindTextureToFrameBuffer","result","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","createAndWaitForFence","fenceContext","createFence","pollFence","query","isFencePassed","sync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","downloadMatrixFromPackedTexture","gpgpu_util.downloadMatrixFromPackedOutputTexture","gpgpu_util.createVertexShader","webgl_util.createProgram","program2","attachShader","webgl_util.linkProgram","Object","assign","gpgpu_util.bindVertexProgramAttributeStreams","webgl_util.validateProgram","setProgram","deleteProgram","useProgram","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","getAttributeLocation","getUniformLocationNoThrow","setInputMatrixTexture","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","setOutputMatrixTexture","outputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","outputPackedMatrixTexture","setOutputMatrixWriteRegion","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","webgl_util.validateFramebuffer","executeProgram","boundVao","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","async","repeatedTry","getQueryTime","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","pollItems","arr","linearSearchLastTrue","itemsToPoll","isDoneFn","resolveFn","scheduleFn","platform","setTimeoutCustom","bind","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","y","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","assertAndGetBroadcastShape","resultRank","resultStrides","resultSize","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","bBroadcastDims","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","addImpl","a","createSimpleUnaryImpl","values","attrs","newValues","ceilImpl","xi","equalImpl","expImpl","exp","expm1Impl","expm1","floorImpl","floor","greaterImpl","greaterEqualImpl","lessImpl","lessEqualImpl","logImpl","maximumImpl","aValue","bValue","minimumImpl","multiplyImpl","notEqualImpl","makeSplits","indices","indicesShape","paramsNestedSplits","numParamsDenseValues","valueSlices","numValues","numSplits","outSplits","fill","dim","splits","lastSplit","validateSplits","nrows","rowLength","start","limit","outDim","outSplitsOutDim","delta","j","computeFlatOuterDims","orig","numOutDims","outDims","inDim","getValues","paramsDenseValues","paramsDenseValuesShape","paramsDenseValuesDType","valuesShape","valuesOut","getArrayFromDType","numElements","valueSize","denseM","valuesM","outPos","writeValueSlices","INT32_MAX","RowPartitionType","RaggedTensorToTensorOp","shapeShape","valuesDType","defaultValue","defaultValueShape","rowPartitionValues","rowPartitionValuesShapes","rowPartitionTypeStrings","rowPartitionTypes","getRowPartitionTypesHelper","raggedRank","getRaggedRank","getRowPartitionTypeByDimension","dimension","FIRST_DIM_SIZE","getRowPartitionTensor","getMaxWidth","rowPartitionTensor","VALUE_ROWIDS","getMaxWidthValueRowID","ROW_SPLITS","getMaxWidthRowSplit","static","rowSplit","tensorLength","maxWidth","currentWidth","valueRowIds","indexLength","firstEqualIndex","firstEqualIndexValue","value","tensorShapeFromTensor","tShape","isPartial","makeShape","calculateOutputSize","firstDim","valueShape","validateDefaultValueShape","combineRaggedTensorToTensorShapes","calculateFirstParentOutputIndex","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","calculateOutputIndexRowSplit","parentOutputIndex","outputSize","rowSplitSize","realLength","parentOutputIndexCurrent","calculateOutputIndexValueRowID","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","calculateOutputIndex","partitionType","getFirstDimensionSize","firstPartitionTensor","firstPartitionType","compute","multiplier","outputTensor","outputIndex","setOutput","valuesBase","outputBase","elementShape","valueElementSize","outputIndexSize","srcShape","tidy","defaultValueTensor","reshape","bCastDefault","broadcastTo","dataSync","srcStart","dstStart","dstEnd","srcI","dstI","src","subarray","copyArray","dst","out","rsqrtImpl","sqrt","sigmoidImpl","sqrtImpl","squaredDifferenceImpl","diff","StringNGramsOp","separator","nGramWidths","leftPad","padWidth","preserveShortSequences","encodeString","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","nGram","nextNGramIndex","appendToNGram","str","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","nGrams","outputStartIdx","dataLength","delimiters","skipEmpty","delimiter","f","token","tokenStart","subImpl","comparePair","valueDiff","select","array","k","left","right","z","sd","sign","swap","vals","resultValues","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","makeZerosTypedArray","xBuf","weightsBuf","binaryOutput","numCols","outBuf","inputType","Int32Array","from","zero","toTypedArray","resultData","resultShape","simplyConcat","colOffset","decodedData","fromUint8ToStringArray","tIdx","resIdx","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","paramsShape","paramsSize","flattenIndex","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","stop","step","reduceSize","Number","isNaN","xShape","xDtype","minusOne","createScalarValue","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","paramsNestedSplitsShapes","outputRaggedRank","numParams","locString","validateIndices","outputNestedSplits","splitsOut","getSplits","outputDenseValues","starts","startsShape","startsDType","limits","limitsShape","deltas","deltasShape","broadcastStarts","broadcastLimits","broadcastDeltas","inSizes","nRows","rtNestedSplits","nVals","rtDenseValues","valueIndex","rowSize","shapesShape","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","begin","isContinous","slice_util","isSliceContinous","xStrides","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","indicesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","id","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","end","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","newLoc","dataSplits","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","reps","sorted","lastDim","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","perm","xRank","xSize","newStrides","axis","$axis","parseAxisParam","uniqueElements","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","axisValues","m","undefined","uniqueIndex","keys","outputTmpShape","outputBuffer","uniqueElementIndex","addImplCPU","bincountImpl","bincountImplCPU","bincountReduceImpl","bincountReduceImplCPU","castImpl","castImplCPU","ceilImplCPU","concatImpl","concatImplCPU","equalImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherNdImpl","gatherNdImplCPU","gatherV2Impl","gatherV2ImplCPU","greaterImplCPU","greaterEqualImplCPU","lessImplCPU","lessEqualImplCPU","linSpaceImpl","linSpaceImplCPU","logImplCPU","maxImpl","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImpl","negImplCPU","notEqualImplCPU","prodImpl","prodImplCPU","raggedGatherImpl","raggedGatherImplCPU","raggedRangeImpl","raggedRangeImplCPU","raggedTensorToTensorImpl","raggedTensorToTensorImplCPU","rangeImpl","rangeImplCPU","rsqrtImplCPU","scatterImpl","scatterImplCPU","sigmoidImplCPU","simpleAbsImpl","simpleAbsImplCPU","sliceImpl","sliceImplCPU","sparseFillEmptyRowsImpl","sparseFillEmptyRowsImplCPU","sparseReshapeImpl","sparseReshapeImplCPU","sparseSegmentReductionImpl","sparseSegmentReductionImplCPU","sqrtImplCPU","stridedSliceImpl","stridedSliceImplCPU","stringNGramsImpl","stringNGramsImplCPU","stringSplitImpl","stringSplitImplCPU","stringToHashBucketFastImpl","stringToHashBucketFastImplCPU","subImplCPU","tileImpl","tileImplCPU","topKImpl","topKImplCPU","transposeImpl","transposeImplCPU","uniqueImpl","uniqueImplCPU","shared","getVecChannels","getChannels","PackProgram","channels","outOfBoundsCondition","getOutOfBoundsCondition","setup","getSetup","getOutput","getSourceCoordsArr","dims","coord","cond","innerDims","sourceCoords","ReshapePackedProgram","thisRC","shader_util.getLogicalCoordinatesFromFlatIndexByUniform","TextureManager","acquireTexture","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","texBytes","computeBytes","numFreeTextures","numUsedTextures","_numBytesFree","newTexture","shift","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","_numBytesAllocated","releaseTexture","logicalTexType","deleteTexThreshold","texList","texIndex","splice","logEnabled","total","freeRatio","round","numBytesAllocated","numBytesFree","getNumUsedTextures","getNumFreeTextures","tex","internalFormatForPhysicalTexType","packedWidth","packedHeight","bytesPerElement","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","UnaryOpProgram","opSnippet","ABS","CLONE","UnaryOpPackedProgram","UnpackProgram","getSourceCoords","whereImpl","kernel_impls","binaryCaches","CPU_HANDOFF_SIZE_THRESHOLD","MathBackendWebGL","KernelBackend","gpuResource","super","WeakMap","WeakSet","newGPGPU","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","global","screen","window","devicePixelRatio","DataStorage","engine","nextDataId","numDataIds","pendingDeletes","writeTexture","texHeight","texWidth","makeTensorInfo","inData","dataId","webgl_util.getShapeAs3D","runWebGLProgram","disposeIntermediateTensorInfo","write","checkNumericalProblems","refCount","has","incRef","decRef","move","tensorInfo","disposeData","readSync","complexTensorInfos","unary_op.CLONE","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","now","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","pendingRead","subscribers","read","tmpDownloadTarget","decode","tmpData","tex_util.getDenseTexShape","ps","all","dTypeVals","delete","pendingDisposal","removeDataId","readToGPU","options","gpuResouorce","tmpTarget","customTexShape","tensorRef","makeTensorFromTensorInfo","bufferSync","strings","decodeString","webgl_util.canBeRepresented","shouldUsePackedProgram","timerAvailable","time","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","filter","flattenedActiveTimerNames","uploadWaitMs","kernelMs","wallMs","sum","ms","memory","unreliable","numBytesInGPU","numBytesInGPUAllocated","numBytesInGPUFree","startTimer","startMs","endMs","endTimer","waitForQueryAndGetTime","timerQuery","force","add","releaseGPUData","key","origDataId","dataRefCount","getTexture","uploadToGPU","getDataInfo","shouldExecuteOnCPU","sizeThreshold","every","getGPGPUContext","where","condition","condVals","packedUnaryOp","outInfo","compileAndRun","outValues","makeOutput","unary_op.ABS","isString","encodedValues","unpackTensor","packTensor","packedReshape","afterShape","input3DShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","afterShapeAs3D","customValues","texSize","outputDtype","customUniformValues","preventEagerUnpackingOfOutput","outData","packedOutput","outPackingScheme","tex_util.PackingScheme","texelShape","outTexUsage","dataToDispose","inputsData","uniformValues","webgl_util.isReshapeFree","savedInput","outputData","keyInputs","concat","hasOffset","xTexShape","shader_compiler.getUniformInfoFromShape","rank1","rank2","rank34","isLogicalShapTexShapeEqual","isScalar","isInOutTexShapeEqual","isTexShapeGreaterThanOne","keyUserCode","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","inShapeInfos","source","shader_compiler.makeShader","gpgpu_math.compileProgram","outTex","uniform1f","NaN","varLoc","varOffsetLoc","varShapeLoc","varTexShapeLoc","uniform1iv","uniform2iv","uniform3iv","uniform4iv","uniform2i","uniform1fv","outShapeLoc","customLoc","customValue","uniform2fv","uniform3fv","uniform4fv","gpgpu_math.runProgram","info","glFlushThreshold","lastGlFlushTime","unpacked","getBinary","getTextureManager","HTMLCanvasElement","remove","floatPrecision","floatPrecisionValue","debugFlag","underflowCheckValue","scalar","epsilon","webgl_util.getTextureShapeFromLogicalShape","isByteArray","Uint8ClampedArray","tempDenseInputTexShape","tempDenseInputHandle","tempDenseInputTexData","preventEagerUnpacking","encodedOutputTarget","outputTexData","float32Values","float32ToTypedArray","texType","warnedAboutMemory","mb","toFixed","checkCompileCompletion","entries","checkCompletion_","checkCompletionAsync_","p","COMPLETION_STATUS_KHR","nextFrame","webgl_util.logShaderSourceAndInfoLog","createTensorFromGPUData","backend","isTexture","makeTensorFromDataId","forceHalfFloat","isBrowser","registerBackend","webgl","BinaryOpProgram","BinaryOpPackedProgram","checkOutOfBounds","checkOutOfBoundsString","identity","args","identityConfig","kernelName","Identity","backendName","kernelFunc","complex","complexInfo","realTensorInfo","imagTensorInfo","complexConfig","Complex","LEAKYRELU","LEAKYRELU_PACKED","leakyReluConfig","LeakyRelu","$alpha","PRELU","PRELU_PACKED","preluConfig","Prelu","unaryKernelFunc","packedOpSnippet","cpuKernelImpl","webglBackend","$dtype","xData","binaryKernelFunc","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","decodedAVals","decodedBVals","mapActivationToShaderProgram","activation","packed","CHECK_NAN_SNIPPET","MatMulPackedProgram","transposeA","transposeB","addBias","hasPreluActivation","hasLeakyreluActivation","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","activationSnippet","applyActivationSnippet","addBiasSnippet","batchASnippet","batchBSnippet","COMPLEX_MULTIPLY","BinaryOpComplexProgram","MUL","multiply","realProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","realPart","imagPart","cpuMultiply","multiplyConfig","Multiply","$shape","inferFromImplicitShape","$xSize","xTexData","reshapeConfig","Reshape","MeanProgram","reduceInfo","divisor","windowSize","outSize","windowSizeNearestVec4","windowSizeVec4Remainder","updateSnippet","denominator","isInt","toPrecision","ReduceProgram","reduceType","initializationValue","compareOp","vecType","reductionType","reductionStages","stages","computeOptimalWindowSize","getReductionStages","previousResult","TransposeProgram","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","TransposePackedProgram","outputOrder","switchedOrder","nextColumn","getc","keepDims","reductionIndices","origAxes","axes","permutedAxes","getAxesPermutation","sumInputIsTransposed","sumInput","getInnerMostAxes","assertAxesAreInnerMostDims","sumOutShape","expandShapeToKeepDim","reshapedInput","reduced","sumOutType","sumImpl","sumConfig","Sum","transpose","cpuTranspose","transposeConfig","Transpose","batchMatMulImpl","bias","preluActivationWeights","leakyreluAlpha","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","a3dShape","b3dShape","a3d","b3d","intermediates","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","aVec","bVec","shouldReshapeB","aVec3d","bVec3d","$leakyreluAlpha","outReshaped","_fusedMatMulConfig","_FusedMatMul","absConfig","Abs","acos","acosConfig","Acos","acosh","acoshConfig","Acosh","ADD","addKernelFunc","cpuAdd","addConfig","Add","AddNProgram","shapes","snippets","variable","operation","AddNPackedProgram","addNConfig","AddN","addN","tensors","midIndex","leftSide","rightSide","d1","d2","allConfig","All","permutedX","a2D","anyConfig","Any","ArgMinMaxProgram","firstPass","compOp","indexSnippet","ArgMinMaxPackedProgram","sourceLocSetup","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","argReduce","bestIndicesA","argReducePacked","argMinMaxReduce","intermediateTensorInfos","xtexData","xUnPacked","reshaped","argMaxConfig","ArgMax","$x","argMinConfig","ArgMin","asin","asinConfig","Asin","asinh","asinhConfig","Asinh","atan","atanConfig","Atan","atan2","atan2Config","Atan2","atanh","atanhConfig","Atanh","Pool2DProgram","convInfo","poolType","computePositions","flattenPositions","includeBatchInIndex","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","isAvgPool","batchFlattenPositionStr","inHeight","inWidth","inChannels","flattenPositionStr","filterWidthNearestVec4","filterWidthVec4Remainder","Pool3DProgram","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","inDepth","avgPoolConfig","AvgPool","filterSize","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterHeight","avgPoolProgram","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","AvgPool2DBackpropProgram","avgMultiplier","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","outDepth","avgPool3DGradConfig","AvgPool3DGrad","dy","avgPoolBackpropProgram","avgPoolGradConfig","AvgPoolGrad","batchMatMulConfig","BatchMatMul","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","offsetSnippet","scaleSnippet","BatchNormPackedProgram","batchNormConfig","FusedBatchNorm","mean","variance","scale","finalInputs","SliceProgram","destSize","getCoords","body","SlicePackedProgram","sourceLoc","getChannel","upperRow","lowerRow","$begin","$size","parseSliceParams","assertParamsValid","newTexData","shallowSlice","sliceConfig","Slice","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","toDispose","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","bincountConfig","Bincount","weights","broadcastArgsConfig","BroadcastArgs","s0","s1","s0Vals","s1Vals","broadcastShape","notEqual","notEqualConfig","NotEqual","realConfig","Real","castConfig","Cast","cast","zerosTensor","tf","zeros","floatX","hasEncodingLoss","resultType","int","zerosTensorInfo","CEIL","ceilConfig","Ceil","ClipProgram","ClipPackedProgram","clipByValueConfig","ClipByValue","clipValueMin","clipValueMax","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","complexAbsConfig","ComplexAbs","programInputs","ConcatProgram","computeOutShape","offsets","lastIndex","lastShift","ConcatPackedProgram","lastChannels","allChannels","getValueSnippet","shiftedChannels","channelIdx","imagConfig","Imag","reals","imags","realConcated","imagConcated","r","runOnCpu","tensors2D","innerSize","inputsValShapes","finalOutShape","$inputs","shouldPack","maxTexturesInShader","reducedInputs","subArray","computeTensors2D","reshapedResult","assertParamsConsistent","concatConfig","Concat","Conv2DProgram","inputDepthNearestVec4","inputDepthVec4Remainder","isChannelsLast","rowDim","colDim","channelDim","Conv3DProgram","Conv2DPackedProgram","hasLeakyReluAlpha","texelsAcross","texelC","colIndex","nextTexelOffset","Im2ColPackedProgram","boundsCheckingSnippet","unrolled","getShapeForBatchMatMul","conv2dByMatMul","sharedMatMulDim","outerShapeX","outerShapeFilter","outChannels","xReshaped","originalXTexDataShape","filterReshaped","pointwiseConv","pointwiseConvTexData","conv2dWithIm2Row","x2ColShape","w2Row","im2ColProgram","im2Col","im2ColReshaped","matmulProgram","conv2DConfig","Conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","Conv2DDerFilterProgram","filterShape","Conv2DDerInputProgram","Conv3DDerFilterProgram","Conv3DDerInputProgram","conv2DBackpropFilterConfig","Conv2DBackpropFilter","conv2DBackpropInputConfig","Conv2DBackpropInput","conv3DConfig","Conv3D","computeConv3DInfo","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","conv3DBackpropInputConfig","Conv3DBackpropInputV2","cos","CHECK_NAN_SNIPPET_UNARY","cosConfig","Cos","cosh","coshConfig","Cosh","CropAndResizeProgram","imageShape","boxShape","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","CumOpType","CumProgram","exclusive","reverse","initVal","Prod","val","idxString","getFinalCoord","cumImpl","permutation","permutedAxis","log2","prevResult","reverseTransposedResult","getUndoAxesPermutation","cumprodConfig","Cumprod","cumsumConfig","Cumsum","denseBincountConfig","DenseBincount","DepthToSpaceProgram","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","depthToSpaceConfig","DepthToSpace","outputHeight","outputWidth","outputDepth","DepthwiseConv2DProgram","channelMul","DepthwiseConvPacked2DProgram","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","$dilations","DepthwiseConv2DDerFilterProgram","DepthwiseConv2DDerInputProgram","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","DiagProgram","diagConfig","Diag","flat","Dilation2DProgram","dilation2DConfig","Dilation2D","computeDilation2DInfo","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","elu","eluConfig","Elu","eluGradConfig","EluGrad","equal","equalConfig","Equal","erf","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","erfConfig","Erf","expConfig","Exp","$dim","expandDimsConfig","ExpandDims","EXPM1","expm1Config","Expm1","FFTProgram","component","inverse","innerDim","exponentMultiplierSnippet","PI","resultDenominator","opString","fftImpl","inputSize","innerDimensionSize","input2D","complexOutputReshaped","fftConfig","FFT","FillProgram","inferDtype","fillConfig","Fill","FlipLeftRightProgram","flipLeftRightConfig","FlipLeftRight","FLOOR","floorConfig","Floor","floorDiv","floorDivConfig","FloorDiv","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","FromPixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","videoWidth","videoHeight","newWillReadFrequently","fromPixels2DContext","willReadFrequently","drawImage","tempPixelHandle","fusedConv2DConfig","FusedConv2D","prepareInputs","alignInputWithDataFormat","alignedInput","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","shouldPackDepthwiseConv","GatherNDProgram","sliceDim","gatherNdConfig","GatherNd","prepareAndValidate","flattenIndices","flattenX","outValue","GatherProgram","currentCoords","gatherV2","batchDims","parsedAxis","indicesVals","axisDim","segment_util","collectGatherOpShapeInfo","indicesSize","outerSize","dimSize","gatherV2Config","GatherV2","greater","greaterConfig","Greater","greaterEqual","greaterEqualConfig","GreaterEqual","ifftConfig","IFFT","isFinite","isFiniteConfig","IsFinite","isInf","isInfConfig","IsInf","isNaNConfig","IsNan","less","lessConfig","Less","lessEqual","lessEqualConfig","LessEqual","linSpaceConfig","LinSpace","logConfig","Log","log1p","log1pConfig","Log1p","logicalAnd","logicalAndConfig","LogicalAnd","logicalNot","logicalNotConfig","LogicalNot","logicalOr","logicalOrConfig","LogicalOr","LRNProgram","radius","beta","rad","maxD","powOperator","basis","LRNPackedProgram","LRNConfig","LRN","depthRadius","LRNGradProgram","LRNGradConfig","LRNGrad","maxInputIsTransposed","maxInput","maxInputValues","maxOutShape","reshapedOutput","maxConfig","Max","maximum","maximumConfig","Maximum","maxPoolConfig","MaxPool","maxPoolProgram","maxPool3DConfig","MaxPool3D","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","maxPool3DGradConfig","MaxPool3DGrad","maxPool3dPositionsProgram","maxPool3dPositions","maxPoolBackpropProgram","maxPoolGradConfig","MaxPoolGrad","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","indexes","poolOutput","maxPoolWithArgmaxImpl","meanConfig","Mean","meanInputIsTransposed","meanInput","meanInputValues","meanOutShape","meanImpl","minConfig","Min","minimum","minimumConfig","Minimum","MirrorPadProgram","paddings","mode","unpackedCoords","MirrorPadPackedProgram","cLimit","padSetup","mirrorPadConfig","MirrorPad","mod","modConfig","Mod","MultinomialProgram","numOutcomes","numSamples","realDiv","realDivConfig","RealDiv","SUB","sub","cpuSub","subConfig","Sub","softmax","logits","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","seed","normalized","probs","negConfig","Neg","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","OneHotProgram","onValue","offValue","oneHotConfig","OneHot","zerosLike","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","packConfig","Pack","assertShapesMatch","expandedT","PadProgram","constantValue","PadPackedProgram","componentSetup","paddingArea","padV2","padV2Config","PadV2","pow","powConfig","Pow","prodConfig","raggedGatherConfig","RaggedGather","$paramsNestedSplits","$paramsNestedSplitsShapes","$paramsDenseValues","$indices","outputDenseValuesShape","outputNestedSplitsTensors","outputDenseValuesTensor","raggedRangeConfig","RaggedRange","$starts","$limits","$deltas","rtNestedSplitsData","rtDenseValuesData","raggedTensorToTensorConfig","RaggedTensorToTensor","rowPartitionTensors","$values","$defaultValue","$rowPartitionValues","range","rangeConfig","Range","reciprocal","reciprocalConfig","Reciprocal","relu","reluConfig","Relu","relu6","relu6Config","Relu6","ResizeBilinearProgram","newHeight","newWidth","alignCorners","halfPixelCenters","oldHeight","oldWidth","effectiveInSize","effectiveOutSize","sourceFracIndexRC","ResizeBilinearPackedProgram","resizeBilinearConfig","ResizeBilinear","images","ResizeBilinearBackpropProgram","dyShape","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","resizeBilinearGradConfig","ResizeBilinearGrad","ResizeNearestNeighborProgram","roundBase","ResizeNearestNeighborPackedProgram","resizeNearestNeighborConfig","ResizeNearestNeighbor","ResizeNearestNeigborBackpropProgram","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","ReverseProgram","inCoords","getInCoord","ReversePackedProgram","nextRow","inCoordsArray","channels1","getR","getG","getB","getA","reverseConfig","Reverse","$dims","RotateProgram","fillValue","fillSnippet","rotateWithOffsetConfig","RotateWithOffset","radians","center","centerX","centerY","getImageCenter","sin","roundConfig","Round","rsqrt","rsqrtConfig","Rsqrt","ScatterProgram","updateSize","indicesRank","updatesRank","summingDupeIndex","stridesType","indicesString","indicesSnippet","updatesString","updatesSnippet","strideString","scatterNdConfig","ScatterNd","calculateShapes","SearchSortedProgram","numInputs","side","webGL1LoopHead","loopHead","boundComparator","searchSortedConfig","SearchSorted","sortedSequence","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","Select","selu","SELU_SCALEALPHA","SELU_SCALE","seluConfig","Selu","sigmoid","sigmoidConfig","Sigmoid","signConfig","Sign","sinConfig","Sin","sinh","sinhConfig","Sinh","softplus","softplusConfig","Softplus","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$denseShape","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","updatesBuf","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","SQRT","sqrtConfig","Sqrt","square","squareConfig","Square","SQUARED_DIFFERENCE","squaredDifference","squaredDifferenceConfig","SquaredDifference","stepConfig","Step","StridedSliceProgram","inputDtype","newCoords","outputAxis","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","resultReshaped","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tan","tanConfig","Tan","tanh","tanhConfig","Tanh","TileProgram","tile","buf","tileConfig","Tile","SwapProgram","MergeProgram","disposeIntermediateTensorInfoOrNull","roundUpToPow2","pow2","topKConfig","TopK","TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD","TOPK_K_CPU_HANDOFF_THRESHOLD","xIsPacked","x2D","kPow2","lastDimPow2","getInputs","runSwap","dir","inc","NEGATIVE_INFINITY","prevIndices","len","mergeProgram","prevValues","TransformProgram","interpolation","fillMode","interpolationModeId","fillModeId","transformConfig","Transform","transforms","uniqueConfig","Unique","unpackConfig","Unpack","SegmentOpProgram","segOpInfo","segOpType","numSegments","checkValueOutOfBounds","checkSegmentIdOutOfBounds","kernelConfigs","UnsortedSegmentSum","outputDType","segOpCompute","segOpComputeOptimalWindowSize","rangeInfo","tileInfo","kernelConfig","registerKernel"],"mappings":"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,GACAI,GACAE,GACAW,GACAuB,GACAiB,GACAG,GACAY,GACAY,GACAI,GACApX,GACA4X,GACAkC,GACAqC,GACAW,GACAE,GACAE,GACAG,GACAE,GACAI,GACAG,GACAsB,GACAqB,GACAE,GACAE,GACAS,GACAQ,GACAK,GACAE,GACAG,GACAI,GACAG,GACAqB,GACAE,GACAG,GACAS,GACAE,GACAG,GACAG,GACAe,GACAI,GACAG,GACAG,GACAG,GACAI,GACAc,GACAK,GACAK,GACAkB,GACAG,GACAG,GACAnrB,GACAqrB,GACAlS,GACAqS,GACAG,GACAE,GACAhrB,GACAmrB,GACAG,GACAE,GACAE,GACAG,GACAG,GACAG,GACAG,GACAU,GACAI,GACAO,GACAG,GACAE,GACAG,GACAI,GACAK,GACAK,GACAK,GACAO,GACAG,GACAS,GACAG,GACAsB,GACA1uB,GACA+uB,GACAG,GACAU,GACAK,GACA7d,GACAwe,GACAK,GACAG,GACAU,GACAG,GACAp1B,GACAs1B,GACAC,GACAS,GACAO,GACAO,GACArhB,GACAob,GACAoG,GACAG,GACAG,GACA9zB,GACA20B,GACAe,GACAK,GACAG,GACAa,GACAM,GACAQ,GACAG,GACAa,GACAS,GACAS,GACAK,GACAG,GACAE,GACAE,GACAG,GACA9qB,GACAke,GACA+M,GACAE,GACAQ,GACAI,GACAI,GACAK,GACAE,GACAK,GACAO,GACAG,GACAI,GACAE,GACAM,GACAgB,GACAG,GACAI,GACAnS,GACAtqB,GACA48B,GACAG,GACAK,GACAO,GACAsB,GACA7+B,GACAg/B,GACAE,GDnPoD,CACpDnnC,WAAY4nC,qBACZ1nC,YAAa,QACbC,oBArFiCL,GAKjC,MAAM/jC,OAACA,EAAMmjC,QAAEA,EAAO/xB,MAAEA,GAAS2yB,GAC3B7sC,EAACA,EAACqwB,WAAEA,GAAcvnB,GAClByrE,YAACA,GAAer6D,EAEhB0Y,EAAQ5yB,EAAEtQ,MAAMgF,OAEhB6tD,EAAY,GAElB,IAAIxvB,EAAO,EACX,MAAM26B,EAAc/tD,eAAas0C,mBAAmB,CAAClhB,GAAOH,GAC5D,IAAImmB,EAAY/4C,EACG,MAAf0tD,IACF3U,EAAYjE,GAAU,CAAChsC,OAAQ,CAAC9I,KAAIisC,UAAS/xB,MAAO,CAACyY,KAAM+6B,KAC3DnL,EAAUniD,KAAK24C,GACfhmB,EAAOpzB,eAAay0C,iBAAiB,EAAGxhB,GAAO,IAGjD,MAAMrxB,EAAW5B,eAAa23D,aAAa/R,gBACvCxM,EAAUrpD,MAAOqjC,EAAMwhD,GACrBjtE,EAAS1X,OAAKC,cAAc,CAACkpD,EAAUrpD,MAAMqjC,KAC7CimB,EACFl2B,GAAQ,CAACha,OAAQ,CAAC9I,EAAG+4C,GAAY9M,UAAS/xB,MAAO,CAACxqB,MAAO,EAAE,EAAG4X,MAClEi7C,EAAUniD,KAAK44C,GAEf,MAAM47B,EAAclgC,aAAW10C,EAAEvC,OAE3Bo3E,EACF,CAAC70E,EAAes0E,EAAiCjkD,EAChD5yB,EAAiB82E,KAChB,MAAMhjD,EAAYvxB,EAAEtQ,MAAM,GACpB4X,EAAStH,EAAEtQ,MAAM,GACjBoiD,EACFnyC,eAAa23D,aAAawd,8BACtBxtE,EAAQitE,GAEV9+E,EAAU,IAAI2+E,GADF,CAACtiC,aAAYxqC,SAAQiqB,YAAWgjD,eACFD,GAC1Cp2E,EAAS+tC,EAAQ/G,cAAczvC,EAAS,CAACuK,EAAGqwB,GAAa5yB,GAG/D,GAFA8kD,EAAUniD,KAAKlC,GAEXA,EAAOxO,MAAM,KAAO6kF,EACtB,OAAOr2E,EAET,MAAM62E,EAAYlQ,GAAM,CACtB54B,UACA/xB,MAAO,CAACsC,MAAO,EAAGyN,KAAMsqD,EAAarqD,KAAM,EAAGzsB,MAAO,aAEjDu3E,EAAWlD,GAAK,CACpBhpE,OAAQ,CAAC9I,EAAG+0E,GACZ9oC,UACA/xB,MAAO,CAAC+X,KAAM,CAAC3qB,EAASwqC,MAG1ByQ,EAAUniD,KAAK20E,GACfxyB,EAAUniD,KAAK40E,GAIf,OADIH,EAAa32E,EAAQo2E,EAAWU,EAAUv3E,EAAO82E,EACxC,EAMb55B,EACF73B,GAAQ,CAACha,OAAQ,CAAC9I,EAJF60E,EAChB77B,EAAK,qBAAsB3oB,EAAYukD,EAAaL,IAGjBtoC,UAAS/xB,MAAO,CAACxqB,MAAO6R,KAE/D,IAAI6Q,EAASuoC,EACb,GAAmB,MAAf+S,EAAqB,CACvBnL,EAAUniD,KAAKu6C,GACf,MAAMhoB,EAAOhzB,eAAaouD,uBAAuBL,GACjDt7C,EAAS0iC,GAAU,CAAChsC,OAAQ,CAAC9I,EAAGoS,GAAS65B,UAAS/xB,MAAO,CAACyY,UAI5D,OADA4vB,EAAUjlD,SAAQC,GAAK0uC,EAAQ5M,8BAA8B9hC,KACtD6U,CACT,GCuPE8vD,IAGF,IAAK,MAAM+S,KAAgBP,GACzBQ,iBAAeD,mHCnWD"}